
gpio_uart_it.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec0  08003ec0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ec0  08003ec0  00013ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ec8  08003ec8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec8  08003ec8  00013ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ecc  08003ecc  00013ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000005c  08003f2c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08003f2c  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009218  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000196a  00000000  00000000  000292e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  0002ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059c  00000000  00000000  0002b3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021169  00000000  00000000  0002b94c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a518  00000000  00000000  0004cab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8446  00000000  00000000  00056fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002278  00000000  00000000  0011f414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012168c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c10 	.word	0x08003c10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003c10 	.word	0x08003c10

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fb5d 	bl	8000c80 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t opt=0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f813 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f8a9 	bl	8000724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f87d 	bl	80006d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005d6:	2028      	movs	r0, #40	; 0x28
 80005d8:	f000 fcbb 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  //HAL_NVIC_EnableIRQ(USART2_IRQn);
  printWelcomeMessage();
 80005dc:	f000 f920 	bl	8000820 <printWelcomeMessage>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  opt=ReadUserInput();
 80005e0:	f000 f948 	bl	8000874 <ReadUserInput>
 80005e4:	4603      	mov	r3, r0
 80005e6:	71fb      	strb	r3, [r7, #7]
	  processUserInput(opt);
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f962 	bl	80008b4 <processUserInput>
	  opt=ReadUserInput();
 80005f0:	e7f6      	b.n	80005e0 <main+0x24>
	...

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2234      	movs	r2, #52	; 0x34
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f002 fe80 	bl	8003308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b2a      	ldr	r3, [pc, #168]	; (80006c8 <SystemClock_Config+0xd4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a29      	ldr	r2, [pc, #164]	; (80006c8 <SystemClock_Config+0xd4>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <SystemClock_Config+0xd4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <SystemClock_Config+0xd8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <SystemClock_Config+0xd8>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b20      	ldr	r3, [pc, #128]	; (80006cc <SystemClock_Config+0xd8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000668:	2310      	movs	r3, #16
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800066c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000670:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000672:	2304      	movs	r3, #4
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fa3c 	bl	8001b00 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800068e:	f000 f9d3 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 fedc 	bl	800146c <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ba:	f000 f9bd 	bl	8000a38 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f001 fc98 	bl	800203c <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f991 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000078 	.word	0x20000078
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2c      	ldr	r2, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <MX_GPIO_Init+0xd0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007b0:	f000 fe28 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_GPIO_Init+0xd8>)
 80007cc:	f000 fc6e 	bl	80010ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d0:	2320      	movs	r3, #32
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0xd4>)
 80007e8:	f000 fc60 	bl	80010ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020800 	.word	0x40020800

08000800 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI15_10_IRQHandler(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <EXTI15_10_IRQHandler+0x18>)
 8000806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080a:	615a      	str	r2, [r3, #20]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800080c:	2120      	movs	r1, #32
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <EXTI15_10_IRQHandler+0x1c>)
 8000810:	f000 fe11 	bl	8001436 <HAL_GPIO_TogglePin>
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40013c00 	.word	0x40013c00
 800081c:	40020000 	.word	0x40020000

08000820 <printWelcomeMessage>:
void printWelcomeMessage(void){
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	2206      	movs	r2, #6
 800082a:	490d      	ldr	r1, [pc, #52]	; (8000860 <printWelcomeMessage+0x40>)
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <printWelcomeMessage+0x44>)
 800082e:	f001 fc52 	bl	80020d6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	2204      	movs	r2, #4
 8000838:	490b      	ldr	r1, [pc, #44]	; (8000868 <printWelcomeMessage+0x48>)
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <printWelcomeMessage+0x44>)
 800083c:	f001 fc4b 	bl	80020d6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen((const char*)WELCOME_MSG), HAL_MAX_DELAY);
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	2231      	movs	r2, #49	; 0x31
 8000846:	4909      	ldr	r1, [pc, #36]	; (800086c <printWelcomeMessage+0x4c>)
 8000848:	4806      	ldr	r0, [pc, #24]	; (8000864 <printWelcomeMessage+0x44>)
 800084a:	f001 fc44 	bl	80020d6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen((const char*)MAIN_MENU), HAL_MAX_DELAY);
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	228b      	movs	r2, #139	; 0x8b
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <printWelcomeMessage+0x50>)
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <printWelcomeMessage+0x44>)
 8000858:	f001 fc3d 	bl	80020d6 <HAL_UART_Transmit>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	08003c28 	.word	0x08003c28
 8000864:	20000078 	.word	0x20000078
 8000868:	08003c30 	.word	0x08003c30
 800086c:	08003d40 	.word	0x08003d40
 8000870:	08003cb4 	.word	0x08003cb4

08000874 <ReadUserInput>:

uint8_t ReadUserInput(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	uint8_t receiveBuf[1];
	HAL_UART_Transmit(&huart2, (uint8_t*)"Ingrese su opcion: \r\n", strlen("Ingrese su opcion: \r\n"), HAL_MAX_DELAY);
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
 800087e:	2215      	movs	r2, #21
 8000880:	490a      	ldr	r1, [pc, #40]	; (80008ac <ReadUserInput+0x38>)
 8000882:	480b      	ldr	r0, [pc, #44]	; (80008b0 <ReadUserInput+0x3c>)
 8000884:	f001 fc27 	bl	80020d6 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)receiveBuf, 1, HAL_MAX_DELAY);
 8000888:	1d39      	adds	r1, r7, #4
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	2201      	movs	r2, #1
 8000890:	4807      	ldr	r0, [pc, #28]	; (80008b0 <ReadUserInput+0x3c>)
 8000892:	f001 fcb2 	bl	80021fa <HAL_UART_Receive>
	return atoi((char*)receiveBuf);
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fc85 	bl	80031a8 <atoi>
 800089e:	4603      	mov	r3, r0
 80008a0:	b2db      	uxtb	r3, r3

}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	08003c38 	.word	0x08003c38
 80008b0:	20000078 	.word	0x20000078

080008b4 <processUserInput>:

uint8_t processUserInput(uint8_t opt){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b0a2      	sub	sp, #136	; 0x88
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	char msg[100];
	if(!opt || opt > 3)
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d002      	beq.n	80008ca <processUserInput+0x16>
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d901      	bls.n	80008ce <processUserInput+0x1a>
	{
		return 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e09a      	b.n	8000a04 <processUserInput+0x150>
	}

	sprintf(msg, "%d \r\n", opt); // formateo a entero opt
 80008ce:	79fa      	ldrb	r2, [r7, #7]
 80008d0:	f107 0320 	add.w	r3, r7, #32
 80008d4:	494d      	ldr	r1, [pc, #308]	; (8000a0c <processUserInput+0x158>)
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fcf6 	bl	80032c8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fc95 	bl	8000210 <strlen>
 80008e6:	4603      	mov	r3, r0
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	f107 0120 	add.w	r1, r7, #32
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	4847      	ldr	r0, [pc, #284]	; (8000a10 <processUserInput+0x15c>)
 80008f4:	f001 fbef 	bl	80020d6 <HAL_UART_Transmit>


	switch(opt) {
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d02b      	beq.n	8000956 <processUserInput+0xa2>
 80008fe:	2b03      	cmp	r3, #3
 8000900:	dc7f      	bgt.n	8000a02 <processUserInput+0x14e>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d002      	beq.n	800090c <processUserInput+0x58>
 8000906:	2b02      	cmp	r3, #2
 8000908:	d005      	beq.n	8000916 <processUserInput+0x62>
 800090a:	e07a      	b.n	8000a02 <processUserInput+0x14e>
	case 1:
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800090c:	2120      	movs	r1, #32
 800090e:	4841      	ldr	r0, [pc, #260]	; (8000a14 <processUserInput+0x160>)
 8000910:	f000 fd91 	bl	8001436 <HAL_GPIO_TogglePin>
		break;
 8000914:	e075      	b.n	8000a02 <processUserInput+0x14e>
	case 2:
		sprintf(msg, "\r\nUSER BUTTON status: %s \r\n",HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET ? "PRESSED" : "RELEASED");
 8000916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091a:	483f      	ldr	r0, [pc, #252]	; (8000a18 <processUserInput+0x164>)
 800091c:	f000 fd5a 	bl	80013d4 <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d101      	bne.n	800092a <processUserInput+0x76>
 8000926:	4a3d      	ldr	r2, [pc, #244]	; (8000a1c <processUserInput+0x168>)
 8000928:	e000      	b.n	800092c <processUserInput+0x78>
 800092a:	4a3d      	ldr	r2, [pc, #244]	; (8000a20 <processUserInput+0x16c>)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	493c      	ldr	r1, [pc, #240]	; (8000a24 <processUserInput+0x170>)
 8000932:	4618      	mov	r0, r3
 8000934:	f002 fcc8 	bl	80032c8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000938:	f107 0320 	add.w	r3, r7, #32
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc67 	bl	8000210 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0120 	add.w	r1, r7, #32
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	4830      	ldr	r0, [pc, #192]	; (8000a10 <processUserInput+0x15c>)
 8000950:	f001 fbc1 	bl	80020d6 <HAL_UART_Transmit>
		break;
 8000954:	e055      	b.n	8000a02 <processUserInput+0x14e>
	case 3:
		char rx_buff[20];
		char rx_char;
		uint8_t indice=0;
 8000956:	2300      	movs	r3, #0
 8000958:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
 8000960:	2206      	movs	r2, #6
 8000962:	4931      	ldr	r1, [pc, #196]	; (8000a28 <processUserInput+0x174>)
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <processUserInput+0x15c>)
 8000966:	f001 fbb6 	bl	80020d6 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	2204      	movs	r2, #4
 8000970:	492e      	ldr	r1, [pc, #184]	; (8000a2c <processUserInput+0x178>)
 8000972:	4827      	ldr	r0, [pc, #156]	; (8000a10 <processUserInput+0x15c>)
 8000974:	f001 fbaf 	bl	80020d6 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)"Ingrese su nombre: \r\n", strlen("Ingrese su nombre: \r\n"), HAL_MAX_DELAY);
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	2215      	movs	r2, #21
 800097e:	492c      	ldr	r1, [pc, #176]	; (8000a30 <processUserInput+0x17c>)
 8000980:	4823      	ldr	r0, [pc, #140]	; (8000a10 <processUserInput+0x15c>)
 8000982:	f001 fba8 	bl	80020d6 <HAL_UART_Transmit>
		while(1)
		{
			 HAL_UART_Receive(&huart2, (uint8_t*)&rx_char, 1, HAL_MAX_DELAY);
 8000986:	f107 010b 	add.w	r1, r7, #11
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	2201      	movs	r2, #1
 8000990:	481f      	ldr	r0, [pc, #124]	; (8000a10 <processUserInput+0x15c>)
 8000992:	f001 fc32 	bl	80021fa <HAL_UART_Receive>
			 HAL_UART_Transmit(&huart2, (uint8_t*)&rx_char, 1, HAL_MAX_DELAY);
 8000996:	f107 010b 	add.w	r1, r7, #11
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	2201      	movs	r2, #1
 80009a0:	481b      	ldr	r0, [pc, #108]	; (8000a10 <processUserInput+0x15c>)
 80009a2:	f001 fb98 	bl	80020d6 <HAL_UART_Transmit>
			 if(rx_char != '\r') //hasta que se presione enter
 80009a6:	7afb      	ldrb	r3, [r7, #11]
 80009a8:	2b0d      	cmp	r3, #13
 80009aa:	d00c      	beq.n	80009c6 <processUserInput+0x112>
			 {
				 rx_buff[indice]=rx_char;
 80009ac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80009b0:	7afa      	ldrb	r2, [r7, #11]
 80009b2:	3388      	adds	r3, #136	; 0x88
 80009b4:	443b      	add	r3, r7
 80009b6:	f803 2c7c 	strb.w	r2, [r3, #-124]
				 indice++;
 80009ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80009be:	3301      	adds	r3, #1
 80009c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80009c4:	e7df      	b.n	8000986 <processUserInput+0xd2>

			 }
			 else
			 {
				 rx_buff[indice]= '\0';
 80009c6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80009ca:	3388      	adds	r3, #136	; 0x88
 80009cc:	443b      	add	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	f803 2c7c 	strb.w	r2, [r3, #-124]
				 break;
 80009d4:	bf00      	nop

			 }


		}
		sprintf(msg,"Hola amigo %s \r\n",rx_buff);
 80009d6:	f107 020c 	add.w	r2, r7, #12
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	4915      	ldr	r1, [pc, #84]	; (8000a34 <processUserInput+0x180>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 fc71 	bl	80032c8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fc10 	bl	8000210 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	f107 0120 	add.w	r1, r7, #32
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <processUserInput+0x15c>)
 80009fe:	f001 fb6a 	bl	80020d6 <HAL_UART_Transmit>


		break;
	}
	return 1;
 8000a02:	2301      	movs	r3, #1
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3788      	adds	r7, #136	; 0x88
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	08003c50 	.word	0x08003c50
 8000a10:	20000078 	.word	0x20000078
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	08003c58 	.word	0x08003c58
 8000a20:	08003c60 	.word	0x08003c60
 8000a24:	08003c6c 	.word	0x08003c6c
 8000a28:	08003c28 	.word	0x08003c28
 8000a2c:	08003c30 	.word	0x08003c30
 8000a30:	08003c88 	.word	0x08003c88
 8000a34:	08003ca0 	.word	0x08003ca0

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a82:	2007      	movs	r0, #7
 8000a84:	f000 fa3e 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	; (8000b28 <HAL_UART_MspInit+0x94>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d133      	bne.n	8000b1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_UART_MspInit+0x98>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <HAL_UART_MspInit+0x98>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_UART_MspInit+0x98>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_UART_MspInit+0x98>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <HAL_UART_MspInit+0x98>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_UART_MspInit+0x98>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4809      	ldr	r0, [pc, #36]	; (8000b30 <HAL_UART_MspInit+0x9c>)
 8000b0a:	f000 facf 	bl	80010ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	2026      	movs	r0, #38	; 0x26
 8000b14:	f000 fa01 	bl	8000f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b18:	2026      	movs	r0, #38	; 0x26
 8000b1a:	f000 fa1a 	bl	8000f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40004400 	.word	0x40004400
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f8d0 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <USART2_IRQHandler+0x10>)
 8000b8e:	f001 fbd7 	bl	8002340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000078 	.word	0x20000078

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f002 fba4 	bl	8003318 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20020000 	.word	0x20020000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	200000bc 	.word	0x200000bc
 8000c04:	20000210 	.word	0x20000210

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f002 fb63 	bl	8003324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fcad 	bl	80005bc <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c70:	08003ed0 	.word	0x08003ed0
  ldr r2, =_sbss
 8000c74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c78:	2000020c 	.word	0x2000020c

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f92b 	bl	8000f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fec6 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f943 	bl	8000f6e <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f90b 	bl	8000f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000004 	.word	0x20000004

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008
 8000d48:	200000c0 	.word	0x200000c0

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200000c0 	.word	0x200000c0

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed0:	d301      	bcc.n	8000ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00f      	b.n	8000ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <SysTick_Config+0x40>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ede:	210f      	movs	r1, #15
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f7ff ff8e 	bl	8000e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SysTick_Config+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <SysTick_Config+0x40>)
 8000ef0:	2207      	movs	r2, #7
 8000ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	e000e010 	.word	0xe000e010

08000f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff29 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	60b9      	str	r1, [r7, #8]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff3e 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff8e 	bl	8000e58 <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5d 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff31 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ffa2 	bl	8000ec0 <SysTick_Config>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff feda 	bl	8000d4c <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d008      	beq.n	8000fb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e052      	b.n	800105e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0216 	bic.w	r2, r2, #22
 8000fc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d103      	bne.n	8000fe8 <HAL_DMA_Abort+0x62>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0208 	bic.w	r2, r2, #8
 8000ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001008:	e013      	b.n	8001032 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800100a:	f7ff fe9f 	bl	8000d4c <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b05      	cmp	r3, #5
 8001016:	d90c      	bls.n	8001032 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2220      	movs	r2, #32
 800101c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e015      	b.n	800105e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	2b00      	cmp	r3, #0
 800103e:	d1e4      	bne.n	800100a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	223f      	movs	r2, #63	; 0x3f
 8001046:	409a      	lsls	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d004      	beq.n	8001084 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e00c      	b.n	800109e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2205      	movs	r2, #5
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e165      	b.n	8001394 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	f040 8154 	bne.w	800138e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b03      	cmp	r3, #3
 800116a:	d017      	beq.n	800119c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d123      	bne.n	80011f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	691a      	ldr	r2, [r3, #16]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	69b9      	ldr	r1, [r7, #24]
 80011ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0203 	and.w	r2, r3, #3
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80ae 	beq.w	800138e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b5d      	ldr	r3, [pc, #372]	; (80013ac <HAL_GPIO_Init+0x300>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	4a5c      	ldr	r2, [pc, #368]	; (80013ac <HAL_GPIO_Init+0x300>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001240:	6453      	str	r3, [r2, #68]	; 0x44
 8001242:	4b5a      	ldr	r3, [pc, #360]	; (80013ac <HAL_GPIO_Init+0x300>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124e:	4a58      	ldr	r2, [pc, #352]	; (80013b0 <HAL_GPIO_Init+0x304>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a4f      	ldr	r2, [pc, #316]	; (80013b4 <HAL_GPIO_Init+0x308>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d025      	beq.n	80012c6 <HAL_GPIO_Init+0x21a>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a4e      	ldr	r2, [pc, #312]	; (80013b8 <HAL_GPIO_Init+0x30c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d01f      	beq.n	80012c2 <HAL_GPIO_Init+0x216>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4d      	ldr	r2, [pc, #308]	; (80013bc <HAL_GPIO_Init+0x310>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d019      	beq.n	80012be <HAL_GPIO_Init+0x212>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a4c      	ldr	r2, [pc, #304]	; (80013c0 <HAL_GPIO_Init+0x314>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x20e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a4b      	ldr	r2, [pc, #300]	; (80013c4 <HAL_GPIO_Init+0x318>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x20a>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4a      	ldr	r2, [pc, #296]	; (80013c8 <HAL_GPIO_Init+0x31c>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x206>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_GPIO_Init+0x320>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x202>
 80012aa:	2306      	movs	r3, #6
 80012ac:	e00c      	b.n	80012c8 <HAL_GPIO_Init+0x21c>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e00a      	b.n	80012c8 <HAL_GPIO_Init+0x21c>
 80012b2:	2305      	movs	r3, #5
 80012b4:	e008      	b.n	80012c8 <HAL_GPIO_Init+0x21c>
 80012b6:	2304      	movs	r3, #4
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x21c>
 80012ba:	2303      	movs	r3, #3
 80012bc:	e004      	b.n	80012c8 <HAL_GPIO_Init+0x21c>
 80012be:	2302      	movs	r3, #2
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_Init+0x21c>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x21c>
 80012c6:	2300      	movs	r3, #0
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	f002 0203 	and.w	r2, r2, #3
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	4093      	lsls	r3, r2
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d8:	4935      	ldr	r1, [pc, #212]	; (80013b0 <HAL_GPIO_Init+0x304>)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <HAL_GPIO_Init+0x324>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130a:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <HAL_GPIO_Init+0x324>)
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001334:	4a26      	ldr	r2, [pc, #152]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <HAL_GPIO_Init+0x324>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_GPIO_Init+0x324>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001388:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <HAL_GPIO_Init+0x324>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3301      	adds	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	f67f ae96 	bls.w	80010c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40013800 	.word	0x40013800
 80013b4:	40020000 	.word	0x40020000
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020c00 	.word	0x40020c00
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40021400 	.word	0x40021400
 80013cc:	40021800 	.word	0x40021800
 80013d0:	40013c00 	.word	0x40013c00

080013d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	e001      	b.n	80013f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001448:	887a      	ldrh	r2, [r7, #2]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	041a      	lsls	r2, r3, #16
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43d9      	mvns	r1, r3
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	400b      	ands	r3, r1
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0cc      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001480:	4b68      	ldr	r3, [pc, #416]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 030f 	and.w	r3, r3, #15
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d90c      	bls.n	80014a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b65      	ldr	r3, [pc, #404]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0b8      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a58      	ldr	r2, [pc, #352]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d8:	4b53      	ldr	r3, [pc, #332]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a52      	ldr	r2, [pc, #328]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e4:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	494d      	ldr	r1, [pc, #308]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d044      	beq.n	800158c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d119      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e07f      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d003      	beq.n	800152a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001526:	2b03      	cmp	r3, #3
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e06f      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e067      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f023 0203 	bic.w	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4934      	ldr	r1, [pc, #208]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800155c:	f7ff fbf6 	bl	8000d4c <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	e00a      	b.n	800157a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff fbf2 	bl	8000d4c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e04f      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 020c 	and.w	r2, r3, #12
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	429a      	cmp	r2, r3
 800158a:	d1eb      	bne.n	8001564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800158c:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d20c      	bcs.n	80015b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e032      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4916      	ldr	r1, [pc, #88]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	490e      	ldr	r1, [pc, #56]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015f2:	f000 f855 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	5ccb      	ldrb	r3, [r1, r3]
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fb56 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00
 8001628:	40023800 	.word	0x40023800
 800162c:	08003d74 	.word	0x08003d74
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_RCC_GetHCLKFreq+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000

08001650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001654:	f7ff fff0 	bl	8001638 <HAL_RCC_GetHCLKFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	0a9b      	lsrs	r3, r3, #10
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	4903      	ldr	r1, [pc, #12]	; (8001674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800166c:	4618      	mov	r0, r3
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	08003d84 	.word	0x08003d84

08001678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800167c:	f7ff ffdc 	bl	8001638 <HAL_RCC_GetHCLKFreq>
 8001680:	4602      	mov	r2, r0
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	0b5b      	lsrs	r3, r3, #13
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	4903      	ldr	r1, [pc, #12]	; (800169c <HAL_RCC_GetPCLK2Freq+0x24>)
 800168e:	5ccb      	ldrb	r3, [r1, r3]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	08003d84 	.word	0x08003d84

080016a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a4:	b0ae      	sub	sp, #184	; 0xb8
 80016a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016c6:	4bcb      	ldr	r3, [pc, #812]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	f200 8206 	bhi.w	8001ae0 <HAL_RCC_GetSysClockFreq+0x440>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	08001711 	.word	0x08001711
 80016e0:	08001ae1 	.word	0x08001ae1
 80016e4:	08001ae1 	.word	0x08001ae1
 80016e8:	08001ae1 	.word	0x08001ae1
 80016ec:	08001719 	.word	0x08001719
 80016f0:	08001ae1 	.word	0x08001ae1
 80016f4:	08001ae1 	.word	0x08001ae1
 80016f8:	08001ae1 	.word	0x08001ae1
 80016fc:	08001721 	.word	0x08001721
 8001700:	08001ae1 	.word	0x08001ae1
 8001704:	08001ae1 	.word	0x08001ae1
 8001708:	08001ae1 	.word	0x08001ae1
 800170c:	08001911 	.word	0x08001911
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001710:	4bb9      	ldr	r3, [pc, #740]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001716:	e1e7      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001718:	4bb8      	ldr	r3, [pc, #736]	; (80019fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800171a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800171e:	e1e3      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001720:	4bb4      	ldr	r3, [pc, #720]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001728:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800172c:	4bb1      	ldr	r3, [pc, #708]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d071      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001738:	4bae      	ldr	r3, [pc, #696]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	099b      	lsrs	r3, r3, #6
 800173e:	2200      	movs	r2, #0
 8001740:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001744:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800174c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001750:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800175a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800175e:	4622      	mov	r2, r4
 8001760:	462b      	mov	r3, r5
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0159      	lsls	r1, r3, #5
 800176c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001770:	0150      	lsls	r0, r2, #5
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4621      	mov	r1, r4
 8001778:	1a51      	subs	r1, r2, r1
 800177a:	6439      	str	r1, [r7, #64]	; 0x40
 800177c:	4629      	mov	r1, r5
 800177e:	eb63 0301 	sbc.w	r3, r3, r1
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001790:	4649      	mov	r1, r9
 8001792:	018b      	lsls	r3, r1, #6
 8001794:	4641      	mov	r1, r8
 8001796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179a:	4641      	mov	r1, r8
 800179c:	018a      	lsls	r2, r1, #6
 800179e:	4641      	mov	r1, r8
 80017a0:	1a51      	subs	r1, r2, r1
 80017a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80017a4:	4649      	mov	r1, r9
 80017a6:	eb63 0301 	sbc.w	r3, r3, r1
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017b8:	4649      	mov	r1, r9
 80017ba:	00cb      	lsls	r3, r1, #3
 80017bc:	4641      	mov	r1, r8
 80017be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017c2:	4641      	mov	r1, r8
 80017c4:	00ca      	lsls	r2, r1, #3
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	4622      	mov	r2, r4
 80017ce:	189b      	adds	r3, r3, r2
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
 80017d2:	462b      	mov	r3, r5
 80017d4:	460a      	mov	r2, r1
 80017d6:	eb42 0303 	adc.w	r3, r2, r3
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80017e8:	4629      	mov	r1, r5
 80017ea:	024b      	lsls	r3, r1, #9
 80017ec:	4621      	mov	r1, r4
 80017ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017f2:	4621      	mov	r1, r4
 80017f4:	024a      	lsls	r2, r1, #9
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017fe:	2200      	movs	r2, #0
 8001800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001804:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001808:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800180c:	f7fe fd58 	bl	80002c0 <__aeabi_uldivmod>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4613      	mov	r3, r2
 8001816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800181a:	e067      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800181c:	4b75      	ldr	r3, [pc, #468]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	099b      	lsrs	r3, r3, #6
 8001822:	2200      	movs	r2, #0
 8001824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001828:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800182c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001834:	67bb      	str	r3, [r7, #120]	; 0x78
 8001836:	2300      	movs	r3, #0
 8001838:	67fb      	str	r3, [r7, #124]	; 0x7c
 800183a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800183e:	4622      	mov	r2, r4
 8001840:	462b      	mov	r3, r5
 8001842:	f04f 0000 	mov.w	r0, #0
 8001846:	f04f 0100 	mov.w	r1, #0
 800184a:	0159      	lsls	r1, r3, #5
 800184c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001850:	0150      	lsls	r0, r2, #5
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4621      	mov	r1, r4
 8001858:	1a51      	subs	r1, r2, r1
 800185a:	62b9      	str	r1, [r7, #40]	; 0x28
 800185c:	4629      	mov	r1, r5
 800185e:	eb63 0301 	sbc.w	r3, r3, r1
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001870:	4649      	mov	r1, r9
 8001872:	018b      	lsls	r3, r1, #6
 8001874:	4641      	mov	r1, r8
 8001876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800187a:	4641      	mov	r1, r8
 800187c:	018a      	lsls	r2, r1, #6
 800187e:	4641      	mov	r1, r8
 8001880:	ebb2 0a01 	subs.w	sl, r2, r1
 8001884:	4649      	mov	r1, r9
 8001886:	eb63 0b01 	sbc.w	fp, r3, r1
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001896:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800189a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800189e:	4692      	mov	sl, r2
 80018a0:	469b      	mov	fp, r3
 80018a2:	4623      	mov	r3, r4
 80018a4:	eb1a 0303 	adds.w	r3, sl, r3
 80018a8:	623b      	str	r3, [r7, #32]
 80018aa:	462b      	mov	r3, r5
 80018ac:	eb4b 0303 	adc.w	r3, fp, r3
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018be:	4629      	mov	r1, r5
 80018c0:	028b      	lsls	r3, r1, #10
 80018c2:	4621      	mov	r1, r4
 80018c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018c8:	4621      	mov	r1, r4
 80018ca:	028a      	lsls	r2, r1, #10
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018d4:	2200      	movs	r2, #0
 80018d6:	673b      	str	r3, [r7, #112]	; 0x70
 80018d8:	677a      	str	r2, [r7, #116]	; 0x74
 80018da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018de:	f7fe fcef 	bl	80002c0 <__aeabi_uldivmod>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4613      	mov	r3, r2
 80018e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	3301      	adds	r3, #1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80018fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800190e:	e0eb      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d06b      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	2200      	movs	r2, #0
 8001930:	66bb      	str	r3, [r7, #104]	; 0x68
 8001932:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800193a:	663b      	str	r3, [r7, #96]	; 0x60
 800193c:	2300      	movs	r3, #0
 800193e:	667b      	str	r3, [r7, #100]	; 0x64
 8001940:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001944:	4622      	mov	r2, r4
 8001946:	462b      	mov	r3, r5
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	0159      	lsls	r1, r3, #5
 8001952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001956:	0150      	lsls	r0, r2, #5
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4621      	mov	r1, r4
 800195e:	1a51      	subs	r1, r2, r1
 8001960:	61b9      	str	r1, [r7, #24]
 8001962:	4629      	mov	r1, r5
 8001964:	eb63 0301 	sbc.w	r3, r3, r1
 8001968:	61fb      	str	r3, [r7, #28]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001976:	4659      	mov	r1, fp
 8001978:	018b      	lsls	r3, r1, #6
 800197a:	4651      	mov	r1, sl
 800197c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001980:	4651      	mov	r1, sl
 8001982:	018a      	lsls	r2, r1, #6
 8001984:	4651      	mov	r1, sl
 8001986:	ebb2 0801 	subs.w	r8, r2, r1
 800198a:	4659      	mov	r1, fp
 800198c:	eb63 0901 	sbc.w	r9, r3, r1
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800199c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019a4:	4690      	mov	r8, r2
 80019a6:	4699      	mov	r9, r3
 80019a8:	4623      	mov	r3, r4
 80019aa:	eb18 0303 	adds.w	r3, r8, r3
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	462b      	mov	r3, r5
 80019b2:	eb49 0303 	adc.w	r3, r9, r3
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019c4:	4629      	mov	r1, r5
 80019c6:	024b      	lsls	r3, r1, #9
 80019c8:	4621      	mov	r1, r4
 80019ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019ce:	4621      	mov	r1, r4
 80019d0:	024a      	lsls	r2, r1, #9
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019da:	2200      	movs	r2, #0
 80019dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80019de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80019e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019e4:	f7fe fc6c 	bl	80002c0 <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4613      	mov	r3, r2
 80019ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019f2:	e065      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x420>
 80019f4:	40023800 	.word	0x40023800
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a00:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	099b      	lsrs	r3, r3, #6
 8001a06:	2200      	movs	r2, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a10:	653b      	str	r3, [r7, #80]	; 0x50
 8001a12:	2300      	movs	r3, #0
 8001a14:	657b      	str	r3, [r7, #84]	; 0x54
 8001a16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a1a:	4642      	mov	r2, r8
 8001a1c:	464b      	mov	r3, r9
 8001a1e:	f04f 0000 	mov.w	r0, #0
 8001a22:	f04f 0100 	mov.w	r1, #0
 8001a26:	0159      	lsls	r1, r3, #5
 8001a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2c:	0150      	lsls	r0, r2, #5
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4641      	mov	r1, r8
 8001a34:	1a51      	subs	r1, r2, r1
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	4649      	mov	r1, r9
 8001a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a4c:	4659      	mov	r1, fp
 8001a4e:	018b      	lsls	r3, r1, #6
 8001a50:	4651      	mov	r1, sl
 8001a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a56:	4651      	mov	r1, sl
 8001a58:	018a      	lsls	r2, r1, #6
 8001a5a:	4651      	mov	r1, sl
 8001a5c:	1a54      	subs	r4, r2, r1
 8001a5e:	4659      	mov	r1, fp
 8001a60:	eb63 0501 	sbc.w	r5, r3, r1
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	00eb      	lsls	r3, r5, #3
 8001a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a72:	00e2      	lsls	r2, r4, #3
 8001a74:	4614      	mov	r4, r2
 8001a76:	461d      	mov	r5, r3
 8001a78:	4643      	mov	r3, r8
 8001a7a:	18e3      	adds	r3, r4, r3
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	464b      	mov	r3, r9
 8001a80:	eb45 0303 	adc.w	r3, r5, r3
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a92:	4629      	mov	r1, r5
 8001a94:	028b      	lsls	r3, r1, #10
 8001a96:	4621      	mov	r1, r4
 8001a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	028a      	lsls	r2, r1, #10
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aac:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ab2:	f7fe fc05 	bl	80002c0 <__aeabi_uldivmod>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4613      	mov	r3, r2
 8001abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0f1b      	lsrs	r3, r3, #28
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001ace:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001ad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ade:	e003      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ae6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	37b8      	adds	r7, #184	; 0xb8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400

08001b00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e28d      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8083 	beq.w	8001c26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b20:	4b94      	ldr	r3, [pc, #592]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d019      	beq.n	8001b60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b2c:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d106      	bne.n	8001b46 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b38:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b44:	d00c      	beq.n	8001b60 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b8b      	ldr	r3, [pc, #556]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b52:	4b88      	ldr	r3, [pc, #544]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5e:	d10b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	4b84      	ldr	r3, [pc, #528]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d05b      	beq.n	8001c24 <HAL_RCC_OscConfig+0x124>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d157      	bne.n	8001c24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e25a      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x90>
 8001b82:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7b      	ldr	r2, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0xcc>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xb4>
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0xcc>
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b6c      	ldr	r3, [pc, #432]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6b      	ldr	r2, [pc, #428]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f8ba 	bl	8000d4c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f8b6 	bl	8000d4c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e21f      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0xdc>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f8a6 	bl	8000d4c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff f8a2 	bl	8000d4c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e20b      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x104>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06f      	beq.n	8001d12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c32:	4b50      	ldr	r3, [pc, #320]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d017      	beq.n	8001c6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c3e:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d105      	bne.n	8001c56 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c4a:	4b4a      	ldr	r3, [pc, #296]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d11c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c62:	4b44      	ldr	r3, [pc, #272]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d116      	bne.n	8001c9c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_RCC_OscConfig+0x186>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e1d3      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4937      	ldr	r1, [pc, #220]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	e03a      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d020      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca4:	4b34      	ldr	r3, [pc, #208]	; (8001d78 <HAL_RCC_OscConfig+0x278>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001caa:	f7ff f84f 	bl	8000d4c <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f84b 	bl	8000d4c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e1b4      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4925      	ldr	r1, [pc, #148]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e015      	b.n	8001d12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x278>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff f82e 	bl	8000d4c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff f82a 	bl	8000d4c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e193      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d036      	beq.n	8001d8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d016      	beq.n	8001d54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f80e 	bl	8000d4c <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff f80a 	bl	8000d4c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e173      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x234>
 8001d52:	e01b      	b.n	8001d8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_OscConfig+0x27c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7fe fff7 	bl	8000d4c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	e00e      	b.n	8001d80 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d62:	f7fe fff3 	bl	8000d4c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d907      	bls.n	8001d80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e15c      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
 8001d74:	40023800 	.word	0x40023800
 8001d78:	42470000 	.word	0x42470000
 8001d7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ea      	bne.n	8001d62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 8097 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b83      	ldr	r3, [pc, #524]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10f      	bne.n	8001dca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	4b7f      	ldr	r3, [pc, #508]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a7e      	ldr	r2, [pc, #504]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b7c      	ldr	r3, [pc, #496]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	4b79      	ldr	r3, [pc, #484]	; (8001fb0 <HAL_RCC_OscConfig+0x4b0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd6:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_OscConfig+0x4b0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a75      	ldr	r2, [pc, #468]	; (8001fb0 <HAL_RCC_OscConfig+0x4b0>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7fe ffb3 	bl	8000d4c <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7fe ffaf 	bl	8000d4c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e118      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	4b6c      	ldr	r3, [pc, #432]	; (8001fb0 <HAL_RCC_OscConfig+0x4b0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x31e>
 8001e10:	4b66      	ldr	r3, [pc, #408]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a65      	ldr	r2, [pc, #404]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	e01c      	b.n	8001e58 <HAL_RCC_OscConfig+0x358>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x340>
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a60      	ldr	r2, [pc, #384]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e2c:	f043 0304 	orr.w	r3, r3, #4
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	e00b      	b.n	8001e58 <HAL_RCC_OscConfig+0x358>
 8001e40:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a59      	ldr	r2, [pc, #356]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e46:	f023 0301 	bic.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	4b57      	ldr	r3, [pc, #348]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	4a56      	ldr	r2, [pc, #344]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	f023 0304 	bic.w	r3, r3, #4
 8001e56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d015      	beq.n	8001e8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7fe ff74 	bl	8000d4c <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	e00a      	b.n	8001e7e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e68:	f7fe ff70 	bl	8000d4c <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e0d7      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ee      	beq.n	8001e68 <HAL_RCC_OscConfig+0x368>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7fe ff5e 	bl	8000d4c <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e94:	f7fe ff5a 	bl	8000d4c <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0c1      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ee      	bne.n	8001e94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d105      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80ad 	beq.w	800202c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ed2:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d060      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d145      	bne.n	8001f72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <HAL_RCC_OscConfig+0x4b4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7fe ff2e 	bl	8000d4c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe ff2a 	bl	8000d4c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e093      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	019b      	lsls	r3, r3, #6
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	085b      	lsrs	r3, r3, #1
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	061b      	lsls	r3, r3, #24
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	071b      	lsls	r3, r3, #28
 8001f3e:	491b      	ldr	r1, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x4b4>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7fe feff 	bl	8000d4c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe fefb 	bl	8000d4c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e064      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x452>
 8001f70:	e05c      	b.n	800202c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_RCC_OscConfig+0x4b4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe fee8 	bl	8000d4c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe fee4 	bl	8000d4c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e04d      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_OscConfig+0x4ac>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x480>
 8001f9e:	e045      	b.n	800202c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e040      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <HAL_RCC_OscConfig+0x538>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d030      	beq.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d129      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d122      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d119      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	3b01      	subs	r3, #1
 8002002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d10f      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d107      	bne.n	8002028 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e03f      	b.n	80020ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fd16 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800207e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 fe1d 	bl	8002cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b08a      	sub	sp, #40	; 0x28
 80020da:	af02      	add	r7, sp, #8
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b20      	cmp	r3, #32
 80020f4:	d17c      	bne.n	80021f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_UART_Transmit+0x2c>
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e075      	b.n	80021f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_UART_Transmit+0x3e>
 8002110:	2302      	movs	r3, #2
 8002112:	e06e      	b.n	80021f2 <HAL_UART_Transmit+0x11c>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2221      	movs	r2, #33	; 0x21
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800212a:	f7fe fe0f 	bl	8000d4c <HAL_GetTick>
 800212e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	88fa      	ldrh	r2, [r7, #6]
 8002134:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	88fa      	ldrh	r2, [r7, #6]
 800213a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002144:	d108      	bne.n	8002158 <HAL_UART_Transmit+0x82>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	e003      	b.n	8002160 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002168:	e02a      	b.n	80021c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2200      	movs	r2, #0
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fb9b 	bl	80028b0 <UART_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e036      	b.n	80021f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10b      	bne.n	80021a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002198:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	3302      	adds	r3, #2
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	e007      	b.n	80021b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	3301      	adds	r3, #1
 80021b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1cf      	bne.n	800216a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	2200      	movs	r2, #0
 80021d2:	2140      	movs	r1, #64	; 0x40
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fb6b 	bl	80028b0 <UART_WaitOnFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e006      	b.n	80021f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b08a      	sub	sp, #40	; 0x28
 80021fe:	af02      	add	r7, sp, #8
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b20      	cmp	r3, #32
 8002218:	f040 808c 	bne.w	8002334 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <HAL_UART_Receive+0x2e>
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e084      	b.n	8002336 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_UART_Receive+0x40>
 8002236:	2302      	movs	r3, #2
 8002238:	e07d      	b.n	8002336 <HAL_UART_Receive+0x13c>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2222      	movs	r2, #34	; 0x22
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002256:	f7fe fd79 	bl	8000d4c <HAL_GetTick>
 800225a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	88fa      	ldrh	r2, [r7, #6]
 8002260:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	88fa      	ldrh	r2, [r7, #6]
 8002266:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002270:	d108      	bne.n	8002284 <HAL_UART_Receive+0x8a>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	e003      	b.n	800228c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002294:	e043      	b.n	800231e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2200      	movs	r2, #0
 800229e:	2120      	movs	r1, #32
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fb05 	bl	80028b0 <UART_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e042      	b.n	8002336 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10c      	bne.n	80022d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	3302      	adds	r3, #2
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e01f      	b.n	8002310 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d8:	d007      	beq.n	80022ea <HAL_UART_Receive+0xf0>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <HAL_UART_Receive+0xfe>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e008      	b.n	800230a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002304:	b2da      	uxtb	r2, r3
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3301      	adds	r3, #1
 800230e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002314:	b29b      	uxth	r3, r3
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002322:	b29b      	uxth	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1b6      	bne.n	8002296 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0ba      	sub	sp, #232	; 0xe8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800237e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10f      	bne.n	80023a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800238a:	f003 0320 	and.w	r3, r3, #32
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_UART_IRQHandler+0x66>
 8002392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fbd3 	bl	8002b4a <UART_Receive_IT>
      return;
 80023a4:	e256      	b.n	8002854 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80de 	beq.w	800256c <HAL_UART_IRQHandler+0x22c>
 80023b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d106      	bne.n	80023ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80d1 	beq.w	800256c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_UART_IRQHandler+0xae>
 80023d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00b      	beq.n	8002412 <HAL_UART_IRQHandler+0xd2>
 80023fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f043 0202 	orr.w	r2, r3, #2
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00b      	beq.n	8002436 <HAL_UART_IRQHandler+0xf6>
 800241e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f043 0204 	orr.w	r2, r3, #4
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d011      	beq.n	8002466 <HAL_UART_IRQHandler+0x126>
 8002442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d105      	bne.n	800245a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800244e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d005      	beq.n	8002466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f043 0208 	orr.w	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 81ed 	beq.w	800284a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x14e>
 800247c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fb5e 	bl	8002b4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <HAL_UART_IRQHandler+0x17a>
 80024b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d04f      	beq.n	800255a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fa66 	bl	800298c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ca:	2b40      	cmp	r3, #64	; 0x40
 80024cc:	d141      	bne.n	8002552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3314      	adds	r3, #20
 80024d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3314      	adds	r3, #20
 80024f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1d9      	bne.n	80024ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	2b00      	cmp	r3, #0
 8002520:	d013      	beq.n	800254a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002526:	4a7d      	ldr	r2, [pc, #500]	; (800271c <HAL_UART_IRQHandler+0x3dc>)
 8002528:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fd99 	bl	8001066 <HAL_DMA_Abort_IT>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002544:	4610      	mov	r0, r2
 8002546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002548:	e00e      	b.n	8002568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f99a 	bl	8002884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002550:	e00a      	b.n	8002568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f996 	bl	8002884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002558:	e006      	b.n	8002568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f992 	bl	8002884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002566:	e170      	b.n	800284a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002568:	bf00      	nop
    return;
 800256a:	e16e      	b.n	800284a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 814a 	bne.w	800280a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8143 	beq.w	800280a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 813c 	beq.w	800280a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b40      	cmp	r3, #64	; 0x40
 80025b4:	f040 80b4 	bne.w	8002720 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8140 	beq.w	800284e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025d6:	429a      	cmp	r2, r3
 80025d8:	f080 8139 	bcs.w	800284e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ee:	f000 8088 	beq.w	8002702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	330c      	adds	r3, #12
 80025f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002600:	e853 3f00 	ldrex	r3, [r3]
 8002604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800260c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	330c      	adds	r3, #12
 800261a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800261e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002626:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800262a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1d9      	bne.n	80025f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3314      	adds	r3, #20
 8002644:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002648:	e853 3f00 	ldrex	r3, [r3]
 800264c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800264e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3314      	adds	r3, #20
 800265e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002662:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002666:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002668:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800266a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800266e:	e841 2300 	strex	r3, r2, [r1]
 8002672:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e1      	bne.n	800263e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3314      	adds	r3, #20
 8002680:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002684:	e853 3f00 	ldrex	r3, [r3]
 8002688:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800268a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3314      	adds	r3, #20
 800269a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800269e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80026a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80026a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026a6:	e841 2300 	strex	r3, r2, [r1]
 80026aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80026ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1e3      	bne.n	800267a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	330c      	adds	r3, #12
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ca:	e853 3f00 	ldrex	r3, [r3]
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80026d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d2:	f023 0310 	bic.w	r3, r3, #16
 80026d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80026e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026ec:	e841 2300 	strex	r3, r2, [r1]
 80026f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e3      	bne.n	80026c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fc42 	bl	8000f86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800270a:	b29b      	uxth	r3, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	b29b      	uxth	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f8c0 	bl	8002898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002718:	e099      	b.n	800284e <HAL_UART_IRQHandler+0x50e>
 800271a:	bf00      	nop
 800271c:	08002a53 	.word	0x08002a53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002728:	b29b      	uxth	r3, r3
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 808b 	beq.w	8002852 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800273c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8086 	beq.w	8002852 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800275c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	330c      	adds	r3, #12
 8002766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800276a:	647a      	str	r2, [r7, #68]	; 0x44
 800276c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002772:	e841 2300 	strex	r3, r2, [r1]
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e3      	bne.n	8002746 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3314      	adds	r3, #20
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	623b      	str	r3, [r7, #32]
   return(result);
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3314      	adds	r3, #20
 800279e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027a2:	633a      	str	r2, [r7, #48]	; 0x30
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e3      	bne.n	800277e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	330c      	adds	r3, #12
 80027ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	e853 3f00 	ldrex	r3, [r3]
 80027d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0310 	bic.w	r3, r3, #16
 80027da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027e8:	61fa      	str	r2, [r7, #28]
 80027ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ec:	69b9      	ldr	r1, [r7, #24]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	e841 2300 	strex	r3, r2, [r1]
 80027f4:	617b      	str	r3, [r7, #20]
   return(result);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e3      	bne.n	80027c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002800:	4619      	mov	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f848 	bl	8002898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002808:	e023      	b.n	8002852 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800280a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_UART_IRQHandler+0x4ea>
 8002816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f929 	bl	8002a7a <UART_Transmit_IT>
    return;
 8002828:	e014      	b.n	8002854 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800282a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800282e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00e      	beq.n	8002854 <HAL_UART_IRQHandler+0x514>
 8002836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f969 	bl	8002b1a <UART_EndTransmit_IT>
    return;
 8002848:	e004      	b.n	8002854 <HAL_UART_IRQHandler+0x514>
    return;
 800284a:	bf00      	nop
 800284c:	e002      	b.n	8002854 <HAL_UART_IRQHandler+0x514>
      return;
 800284e:	bf00      	nop
 8002850:	e000      	b.n	8002854 <HAL_UART_IRQHandler+0x514>
      return;
 8002852:	bf00      	nop
  }
}
 8002854:	37e8      	adds	r7, #232	; 0xe8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop

0800285c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b090      	sub	sp, #64	; 0x40
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c0:	e050      	b.n	8002964 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d04c      	beq.n	8002964 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80028d0:	f7fe fa3c 	bl	8000d4c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028dc:	429a      	cmp	r2, r3
 80028de:	d241      	bcs.n	8002964 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	e853 3f00 	ldrex	r3, [r3]
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	330c      	adds	r3, #12
 80028fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002900:	637a      	str	r2, [r7, #52]	; 0x34
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002908:	e841 2300 	strex	r3, r2, [r1]
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e5      	bne.n	80028e0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3314      	adds	r3, #20
 800291a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	e853 3f00 	ldrex	r3, [r3]
 8002922:	613b      	str	r3, [r7, #16]
   return(result);
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	63bb      	str	r3, [r7, #56]	; 0x38
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	3314      	adds	r3, #20
 8002932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002934:	623a      	str	r2, [r7, #32]
 8002936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002938:	69f9      	ldr	r1, [r7, #28]
 800293a:	6a3a      	ldr	r2, [r7, #32]
 800293c:	e841 2300 	strex	r3, r2, [r1]
 8002940:	61bb      	str	r3, [r7, #24]
   return(result);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e5      	bne.n	8002914 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e00f      	b.n	8002984 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	429a      	cmp	r2, r3
 8002980:	d09f      	beq.n	80028c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3740      	adds	r7, #64	; 0x40
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800298c:	b480      	push	{r7}
 800298e:	b095      	sub	sp, #84	; 0x54
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	330c      	adds	r3, #12
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	e853 3f00 	ldrex	r3, [r3]
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029b4:	643a      	str	r2, [r7, #64]	; 0x40
 80029b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029bc:	e841 2300 	strex	r3, r2, [r1]
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e5      	bne.n	8002994 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3314      	adds	r3, #20
 80029ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	e853 3f00 	ldrex	r3, [r3]
 80029d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f023 0301 	bic.w	r3, r3, #1
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3314      	adds	r3, #20
 80029e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f0:	e841 2300 	strex	r3, r2, [r1]
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1e5      	bne.n	80029c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d119      	bne.n	8002a38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a24:	61ba      	str	r2, [r7, #24]
 8002a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a28:	6979      	ldr	r1, [r7, #20]
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	e841 2300 	strex	r3, r2, [r1]
 8002a30:	613b      	str	r3, [r7, #16]
   return(result);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e5      	bne.n	8002a04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a46:	bf00      	nop
 8002a48:	3754      	adds	r7, #84	; 0x54
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff ff09 	bl	8002884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b21      	cmp	r3, #33	; 0x21
 8002a8c:	d13e      	bne.n	8002b0c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a96:	d114      	bne.n	8002ac2 <UART_Transmit_IT+0x48>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d110      	bne.n	8002ac2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ab4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	1c9a      	adds	r2, r3, #2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	621a      	str	r2, [r3, #32]
 8002ac0:	e008      	b.n	8002ad4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	1c59      	adds	r1, r3, #1
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6211      	str	r1, [r2, #32]
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10f      	bne.n	8002b08 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b06:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e000      	b.n	8002b0e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
  }
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b30:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff fe8e 	bl	800285c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b08c      	sub	sp, #48	; 0x30
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b22      	cmp	r3, #34	; 0x22
 8002b5c:	f040 80ab 	bne.w	8002cb6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d117      	bne.n	8002b9a <UART_Receive_IT+0x50>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d113      	bne.n	8002b9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	1c9a      	adds	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
 8002b98:	e026      	b.n	8002be8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	d007      	beq.n	8002bbe <UART_Receive_IT+0x74>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <UART_Receive_IT+0x82>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e008      	b.n	8002bde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d15a      	bne.n	8002cb2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0220 	bic.w	r2, r2, #32
 8002c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d135      	bne.n	8002ca8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	e853 3f00 	ldrex	r3, [r3]
 8002c50:	613b      	str	r3, [r7, #16]
   return(result);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f023 0310 	bic.w	r3, r3, #16
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c62:	623a      	str	r2, [r7, #32]
 8002c64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c66:	69f9      	ldr	r1, [r7, #28]
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	e841 2300 	strex	r3, r2, [r1]
 8002c6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e5      	bne.n	8002c42 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d10a      	bne.n	8002c9a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fdf9 	bl	8002898 <HAL_UARTEx_RxEventCallback>
 8002ca6:	e002      	b.n	8002cae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff fde1 	bl	8002870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e002      	b.n	8002cb8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3730      	adds	r7, #48	; 0x30
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc4:	b0c0      	sub	sp, #256	; 0x100
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	68d9      	ldr	r1, [r3, #12]
 8002cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	ea40 0301 	orr.w	r3, r0, r1
 8002ce8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d18:	f021 010c 	bic.w	r1, r1, #12
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d26:	430b      	orrs	r3, r1
 8002d28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3a:	6999      	ldr	r1, [r3, #24]
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	ea40 0301 	orr.w	r3, r0, r1
 8002d46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4b8f      	ldr	r3, [pc, #572]	; (8002f8c <UART_SetConfig+0x2cc>)
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d005      	beq.n	8002d60 <UART_SetConfig+0xa0>
 8002d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b8d      	ldr	r3, [pc, #564]	; (8002f90 <UART_SetConfig+0x2d0>)
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d104      	bne.n	8002d6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d60:	f7fe fc8a 	bl	8001678 <HAL_RCC_GetPCLK2Freq>
 8002d64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d68:	e003      	b.n	8002d72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d6a:	f7fe fc71 	bl	8001650 <HAL_RCC_GetPCLK1Freq>
 8002d6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d7c:	f040 810c 	bne.w	8002f98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d92:	4622      	mov	r2, r4
 8002d94:	462b      	mov	r3, r5
 8002d96:	1891      	adds	r1, r2, r2
 8002d98:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d9a:	415b      	adcs	r3, r3
 8002d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002da2:	4621      	mov	r1, r4
 8002da4:	eb12 0801 	adds.w	r8, r2, r1
 8002da8:	4629      	mov	r1, r5
 8002daa:	eb43 0901 	adc.w	r9, r3, r1
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dc2:	4690      	mov	r8, r2
 8002dc4:	4699      	mov	r9, r3
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	eb18 0303 	adds.w	r3, r8, r3
 8002dcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002dd0:	462b      	mov	r3, r5
 8002dd2:	eb49 0303 	adc.w	r3, r9, r3
 8002dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002de6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dee:	460b      	mov	r3, r1
 8002df0:	18db      	adds	r3, r3, r3
 8002df2:	653b      	str	r3, [r7, #80]	; 0x50
 8002df4:	4613      	mov	r3, r2
 8002df6:	eb42 0303 	adc.w	r3, r2, r3
 8002dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8002dfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e04:	f7fd fa5c 	bl	80002c0 <__aeabi_uldivmod>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4b61      	ldr	r3, [pc, #388]	; (8002f94 <UART_SetConfig+0x2d4>)
 8002e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	011c      	lsls	r4, r3, #4
 8002e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e28:	4642      	mov	r2, r8
 8002e2a:	464b      	mov	r3, r9
 8002e2c:	1891      	adds	r1, r2, r2
 8002e2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e30:	415b      	adcs	r3, r3
 8002e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e38:	4641      	mov	r1, r8
 8002e3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e3e:	4649      	mov	r1, r9
 8002e40:	eb43 0b01 	adc.w	fp, r3, r1
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e58:	4692      	mov	sl, r2
 8002e5a:	469b      	mov	fp, r3
 8002e5c:	4643      	mov	r3, r8
 8002e5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e66:	464b      	mov	r3, r9
 8002e68:	eb4b 0303 	adc.w	r3, fp, r3
 8002e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e84:	460b      	mov	r3, r1
 8002e86:	18db      	adds	r3, r3, r3
 8002e88:	643b      	str	r3, [r7, #64]	; 0x40
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	647b      	str	r3, [r7, #68]	; 0x44
 8002e92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e9a:	f7fd fa11 	bl	80002c0 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <UART_SetConfig+0x2d4>)
 8002ea6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2264      	movs	r2, #100	; 0x64
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	1acb      	subs	r3, r1, r3
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002eba:	4b36      	ldr	r3, [pc, #216]	; (8002f94 <UART_SetConfig+0x2d4>)
 8002ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ec8:	441c      	add	r4, r3
 8002eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ed4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ed8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	1891      	adds	r1, r2, r2
 8002ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ee4:	415b      	adcs	r3, r3
 8002ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002eec:	4641      	mov	r1, r8
 8002eee:	1851      	adds	r1, r2, r1
 8002ef0:	6339      	str	r1, [r7, #48]	; 0x30
 8002ef2:	4649      	mov	r1, r9
 8002ef4:	414b      	adcs	r3, r1
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f04:	4659      	mov	r1, fp
 8002f06:	00cb      	lsls	r3, r1, #3
 8002f08:	4651      	mov	r1, sl
 8002f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f0e:	4651      	mov	r1, sl
 8002f10:	00ca      	lsls	r2, r1, #3
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	4642      	mov	r2, r8
 8002f1a:	189b      	adds	r3, r3, r2
 8002f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f20:	464b      	mov	r3, r9
 8002f22:	460a      	mov	r2, r1
 8002f24:	eb42 0303 	adc.w	r3, r2, r3
 8002f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f40:	460b      	mov	r3, r1
 8002f42:	18db      	adds	r3, r3, r3
 8002f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f46:	4613      	mov	r3, r2
 8002f48:	eb42 0303 	adc.w	r3, r2, r3
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f56:	f7fd f9b3 	bl	80002c0 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4b0d      	ldr	r3, [pc, #52]	; (8002f94 <UART_SetConfig+0x2d4>)
 8002f60:	fba3 1302 	umull	r1, r3, r3, r2
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	2164      	movs	r1, #100	; 0x64
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	3332      	adds	r3, #50	; 0x32
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <UART_SetConfig+0x2d4>)
 8002f74:	fba2 2303 	umull	r2, r3, r2, r3
 8002f78:	095b      	lsrs	r3, r3, #5
 8002f7a:	f003 0207 	and.w	r2, r3, #7
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4422      	add	r2, r4
 8002f86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f88:	e106      	b.n	8003198 <UART_SetConfig+0x4d8>
 8002f8a:	bf00      	nop
 8002f8c:	40011000 	.word	0x40011000
 8002f90:	40011400 	.word	0x40011400
 8002f94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002faa:	4642      	mov	r2, r8
 8002fac:	464b      	mov	r3, r9
 8002fae:	1891      	adds	r1, r2, r2
 8002fb0:	6239      	str	r1, [r7, #32]
 8002fb2:	415b      	adcs	r3, r3
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fba:	4641      	mov	r1, r8
 8002fbc:	1854      	adds	r4, r2, r1
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	eb43 0501 	adc.w	r5, r3, r1
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	00eb      	lsls	r3, r5, #3
 8002fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fd2:	00e2      	lsls	r2, r4, #3
 8002fd4:	4614      	mov	r4, r2
 8002fd6:	461d      	mov	r5, r3
 8002fd8:	4643      	mov	r3, r8
 8002fda:	18e3      	adds	r3, r4, r3
 8002fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fe0:	464b      	mov	r3, r9
 8002fe2:	eb45 0303 	adc.w	r3, r5, r3
 8002fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003006:	4629      	mov	r1, r5
 8003008:	008b      	lsls	r3, r1, #2
 800300a:	4621      	mov	r1, r4
 800300c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003010:	4621      	mov	r1, r4
 8003012:	008a      	lsls	r2, r1, #2
 8003014:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003018:	f7fd f952 	bl	80002c0 <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4b60      	ldr	r3, [pc, #384]	; (80031a4 <UART_SetConfig+0x4e4>)
 8003022:	fba3 2302 	umull	r2, r3, r3, r2
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	011c      	lsls	r4, r3, #4
 800302a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800302e:	2200      	movs	r2, #0
 8003030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003034:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003038:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800303c:	4642      	mov	r2, r8
 800303e:	464b      	mov	r3, r9
 8003040:	1891      	adds	r1, r2, r2
 8003042:	61b9      	str	r1, [r7, #24]
 8003044:	415b      	adcs	r3, r3
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800304c:	4641      	mov	r1, r8
 800304e:	1851      	adds	r1, r2, r1
 8003050:	6139      	str	r1, [r7, #16]
 8003052:	4649      	mov	r1, r9
 8003054:	414b      	adcs	r3, r1
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003064:	4659      	mov	r1, fp
 8003066:	00cb      	lsls	r3, r1, #3
 8003068:	4651      	mov	r1, sl
 800306a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800306e:	4651      	mov	r1, sl
 8003070:	00ca      	lsls	r2, r1, #3
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	4603      	mov	r3, r0
 8003078:	4642      	mov	r2, r8
 800307a:	189b      	adds	r3, r3, r2
 800307c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003080:	464b      	mov	r3, r9
 8003082:	460a      	mov	r2, r1
 8003084:	eb42 0303 	adc.w	r3, r2, r3
 8003088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	67bb      	str	r3, [r7, #120]	; 0x78
 8003096:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030a4:	4649      	mov	r1, r9
 80030a6:	008b      	lsls	r3, r1, #2
 80030a8:	4641      	mov	r1, r8
 80030aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ae:	4641      	mov	r1, r8
 80030b0:	008a      	lsls	r2, r1, #2
 80030b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030b6:	f7fd f903 	bl	80002c0 <__aeabi_uldivmod>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <UART_SetConfig+0x4e4>)
 80030c2:	fba3 2301 	umull	r2, r3, r3, r1
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	2264      	movs	r2, #100	; 0x64
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	1acb      	subs	r3, r1, r3
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	3332      	adds	r3, #50	; 0x32
 80030d4:	4a33      	ldr	r2, [pc, #204]	; (80031a4 <UART_SetConfig+0x4e4>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	095b      	lsrs	r3, r3, #5
 80030dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e0:	441c      	add	r4, r3
 80030e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030e6:	2200      	movs	r2, #0
 80030e8:	673b      	str	r3, [r7, #112]	; 0x70
 80030ea:	677a      	str	r2, [r7, #116]	; 0x74
 80030ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030f0:	4642      	mov	r2, r8
 80030f2:	464b      	mov	r3, r9
 80030f4:	1891      	adds	r1, r2, r2
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	415b      	adcs	r3, r3
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003100:	4641      	mov	r1, r8
 8003102:	1851      	adds	r1, r2, r1
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	4649      	mov	r1, r9
 8003108:	414b      	adcs	r3, r1
 800310a:	607b      	str	r3, [r7, #4]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003118:	4659      	mov	r1, fp
 800311a:	00cb      	lsls	r3, r1, #3
 800311c:	4651      	mov	r1, sl
 800311e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003122:	4651      	mov	r1, sl
 8003124:	00ca      	lsls	r2, r1, #3
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	4603      	mov	r3, r0
 800312c:	4642      	mov	r2, r8
 800312e:	189b      	adds	r3, r3, r2
 8003130:	66bb      	str	r3, [r7, #104]	; 0x68
 8003132:	464b      	mov	r3, r9
 8003134:	460a      	mov	r2, r1
 8003136:	eb42 0303 	adc.w	r3, r2, r3
 800313a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	663b      	str	r3, [r7, #96]	; 0x60
 8003146:	667a      	str	r2, [r7, #100]	; 0x64
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003154:	4649      	mov	r1, r9
 8003156:	008b      	lsls	r3, r1, #2
 8003158:	4641      	mov	r1, r8
 800315a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800315e:	4641      	mov	r1, r8
 8003160:	008a      	lsls	r2, r1, #2
 8003162:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003166:	f7fd f8ab 	bl	80002c0 <__aeabi_uldivmod>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <UART_SetConfig+0x4e4>)
 8003170:	fba3 1302 	umull	r1, r3, r3, r2
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	2164      	movs	r1, #100	; 0x64
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	3332      	adds	r3, #50	; 0x32
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <UART_SetConfig+0x4e4>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	f003 020f 	and.w	r2, r3, #15
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4422      	add	r2, r4
 8003196:	609a      	str	r2, [r3, #8]
}
 8003198:	bf00      	nop
 800319a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800319e:	46bd      	mov	sp, r7
 80031a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031a4:	51eb851f 	.word	0x51eb851f

080031a8 <atoi>:
 80031a8:	220a      	movs	r2, #10
 80031aa:	2100      	movs	r1, #0
 80031ac:	f000 b882 	b.w	80032b4 <strtol>

080031b0 <_strtol_l.constprop.0>:
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031b6:	d001      	beq.n	80031bc <_strtol_l.constprop.0+0xc>
 80031b8:	2b24      	cmp	r3, #36	; 0x24
 80031ba:	d906      	bls.n	80031ca <_strtol_l.constprop.0+0x1a>
 80031bc:	f000 f8ac 	bl	8003318 <__errno>
 80031c0:	2316      	movs	r3, #22
 80031c2:	6003      	str	r3, [r0, #0]
 80031c4:	2000      	movs	r0, #0
 80031c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80032b0 <_strtol_l.constprop.0+0x100>
 80031ce:	460d      	mov	r5, r1
 80031d0:	462e      	mov	r6, r5
 80031d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80031d6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80031da:	f017 0708 	ands.w	r7, r7, #8
 80031de:	d1f7      	bne.n	80031d0 <_strtol_l.constprop.0+0x20>
 80031e0:	2c2d      	cmp	r4, #45	; 0x2d
 80031e2:	d132      	bne.n	800324a <_strtol_l.constprop.0+0x9a>
 80031e4:	782c      	ldrb	r4, [r5, #0]
 80031e6:	2701      	movs	r7, #1
 80031e8:	1cb5      	adds	r5, r6, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d05b      	beq.n	80032a6 <_strtol_l.constprop.0+0xf6>
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d109      	bne.n	8003206 <_strtol_l.constprop.0+0x56>
 80031f2:	2c30      	cmp	r4, #48	; 0x30
 80031f4:	d107      	bne.n	8003206 <_strtol_l.constprop.0+0x56>
 80031f6:	782c      	ldrb	r4, [r5, #0]
 80031f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80031fc:	2c58      	cmp	r4, #88	; 0x58
 80031fe:	d14d      	bne.n	800329c <_strtol_l.constprop.0+0xec>
 8003200:	786c      	ldrb	r4, [r5, #1]
 8003202:	2310      	movs	r3, #16
 8003204:	3502      	adds	r5, #2
 8003206:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800320a:	f108 38ff 	add.w	r8, r8, #4294967295
 800320e:	f04f 0e00 	mov.w	lr, #0
 8003212:	fbb8 f9f3 	udiv	r9, r8, r3
 8003216:	4676      	mov	r6, lr
 8003218:	fb03 8a19 	mls	sl, r3, r9, r8
 800321c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003220:	f1bc 0f09 	cmp.w	ip, #9
 8003224:	d816      	bhi.n	8003254 <_strtol_l.constprop.0+0xa4>
 8003226:	4664      	mov	r4, ip
 8003228:	42a3      	cmp	r3, r4
 800322a:	dd24      	ble.n	8003276 <_strtol_l.constprop.0+0xc6>
 800322c:	f1be 3fff 	cmp.w	lr, #4294967295
 8003230:	d008      	beq.n	8003244 <_strtol_l.constprop.0+0x94>
 8003232:	45b1      	cmp	r9, r6
 8003234:	d31c      	bcc.n	8003270 <_strtol_l.constprop.0+0xc0>
 8003236:	d101      	bne.n	800323c <_strtol_l.constprop.0+0x8c>
 8003238:	45a2      	cmp	sl, r4
 800323a:	db19      	blt.n	8003270 <_strtol_l.constprop.0+0xc0>
 800323c:	fb06 4603 	mla	r6, r6, r3, r4
 8003240:	f04f 0e01 	mov.w	lr, #1
 8003244:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003248:	e7e8      	b.n	800321c <_strtol_l.constprop.0+0x6c>
 800324a:	2c2b      	cmp	r4, #43	; 0x2b
 800324c:	bf04      	itt	eq
 800324e:	782c      	ldrbeq	r4, [r5, #0]
 8003250:	1cb5      	addeq	r5, r6, #2
 8003252:	e7ca      	b.n	80031ea <_strtol_l.constprop.0+0x3a>
 8003254:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003258:	f1bc 0f19 	cmp.w	ip, #25
 800325c:	d801      	bhi.n	8003262 <_strtol_l.constprop.0+0xb2>
 800325e:	3c37      	subs	r4, #55	; 0x37
 8003260:	e7e2      	b.n	8003228 <_strtol_l.constprop.0+0x78>
 8003262:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003266:	f1bc 0f19 	cmp.w	ip, #25
 800326a:	d804      	bhi.n	8003276 <_strtol_l.constprop.0+0xc6>
 800326c:	3c57      	subs	r4, #87	; 0x57
 800326e:	e7db      	b.n	8003228 <_strtol_l.constprop.0+0x78>
 8003270:	f04f 3eff 	mov.w	lr, #4294967295
 8003274:	e7e6      	b.n	8003244 <_strtol_l.constprop.0+0x94>
 8003276:	f1be 3fff 	cmp.w	lr, #4294967295
 800327a:	d105      	bne.n	8003288 <_strtol_l.constprop.0+0xd8>
 800327c:	2322      	movs	r3, #34	; 0x22
 800327e:	6003      	str	r3, [r0, #0]
 8003280:	4646      	mov	r6, r8
 8003282:	b942      	cbnz	r2, 8003296 <_strtol_l.constprop.0+0xe6>
 8003284:	4630      	mov	r0, r6
 8003286:	e79e      	b.n	80031c6 <_strtol_l.constprop.0+0x16>
 8003288:	b107      	cbz	r7, 800328c <_strtol_l.constprop.0+0xdc>
 800328a:	4276      	negs	r6, r6
 800328c:	2a00      	cmp	r2, #0
 800328e:	d0f9      	beq.n	8003284 <_strtol_l.constprop.0+0xd4>
 8003290:	f1be 0f00 	cmp.w	lr, #0
 8003294:	d000      	beq.n	8003298 <_strtol_l.constprop.0+0xe8>
 8003296:	1e69      	subs	r1, r5, #1
 8003298:	6011      	str	r1, [r2, #0]
 800329a:	e7f3      	b.n	8003284 <_strtol_l.constprop.0+0xd4>
 800329c:	2430      	movs	r4, #48	; 0x30
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1b1      	bne.n	8003206 <_strtol_l.constprop.0+0x56>
 80032a2:	2308      	movs	r3, #8
 80032a4:	e7af      	b.n	8003206 <_strtol_l.constprop.0+0x56>
 80032a6:	2c30      	cmp	r4, #48	; 0x30
 80032a8:	d0a5      	beq.n	80031f6 <_strtol_l.constprop.0+0x46>
 80032aa:	230a      	movs	r3, #10
 80032ac:	e7ab      	b.n	8003206 <_strtol_l.constprop.0+0x56>
 80032ae:	bf00      	nop
 80032b0:	08003d8d 	.word	0x08003d8d

080032b4 <strtol>:
 80032b4:	4613      	mov	r3, r2
 80032b6:	460a      	mov	r2, r1
 80032b8:	4601      	mov	r1, r0
 80032ba:	4802      	ldr	r0, [pc, #8]	; (80032c4 <strtol+0x10>)
 80032bc:	6800      	ldr	r0, [r0, #0]
 80032be:	f7ff bf77 	b.w	80031b0 <_strtol_l.constprop.0>
 80032c2:	bf00      	nop
 80032c4:	20000058 	.word	0x20000058

080032c8 <siprintf>:
 80032c8:	b40e      	push	{r1, r2, r3}
 80032ca:	b500      	push	{lr}
 80032cc:	b09c      	sub	sp, #112	; 0x70
 80032ce:	ab1d      	add	r3, sp, #116	; 0x74
 80032d0:	9002      	str	r0, [sp, #8]
 80032d2:	9006      	str	r0, [sp, #24]
 80032d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032d8:	4809      	ldr	r0, [pc, #36]	; (8003300 <siprintf+0x38>)
 80032da:	9107      	str	r1, [sp, #28]
 80032dc:	9104      	str	r1, [sp, #16]
 80032de:	4909      	ldr	r1, [pc, #36]	; (8003304 <siprintf+0x3c>)
 80032e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80032e4:	9105      	str	r1, [sp, #20]
 80032e6:	6800      	ldr	r0, [r0, #0]
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	a902      	add	r1, sp, #8
 80032ec:	f000 f992 	bl	8003614 <_svfiprintf_r>
 80032f0:	9b02      	ldr	r3, [sp, #8]
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	b01c      	add	sp, #112	; 0x70
 80032f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80032fc:	b003      	add	sp, #12
 80032fe:	4770      	bx	lr
 8003300:	20000058 	.word	0x20000058
 8003304:	ffff0208 	.word	0xffff0208

08003308 <memset>:
 8003308:	4402      	add	r2, r0
 800330a:	4603      	mov	r3, r0
 800330c:	4293      	cmp	r3, r2
 800330e:	d100      	bne.n	8003312 <memset+0xa>
 8003310:	4770      	bx	lr
 8003312:	f803 1b01 	strb.w	r1, [r3], #1
 8003316:	e7f9      	b.n	800330c <memset+0x4>

08003318 <__errno>:
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <__errno+0x8>)
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000058 	.word	0x20000058

08003324 <__libc_init_array>:
 8003324:	b570      	push	{r4, r5, r6, lr}
 8003326:	4d0d      	ldr	r5, [pc, #52]	; (800335c <__libc_init_array+0x38>)
 8003328:	4c0d      	ldr	r4, [pc, #52]	; (8003360 <__libc_init_array+0x3c>)
 800332a:	1b64      	subs	r4, r4, r5
 800332c:	10a4      	asrs	r4, r4, #2
 800332e:	2600      	movs	r6, #0
 8003330:	42a6      	cmp	r6, r4
 8003332:	d109      	bne.n	8003348 <__libc_init_array+0x24>
 8003334:	4d0b      	ldr	r5, [pc, #44]	; (8003364 <__libc_init_array+0x40>)
 8003336:	4c0c      	ldr	r4, [pc, #48]	; (8003368 <__libc_init_array+0x44>)
 8003338:	f000 fc6a 	bl	8003c10 <_init>
 800333c:	1b64      	subs	r4, r4, r5
 800333e:	10a4      	asrs	r4, r4, #2
 8003340:	2600      	movs	r6, #0
 8003342:	42a6      	cmp	r6, r4
 8003344:	d105      	bne.n	8003352 <__libc_init_array+0x2e>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	f855 3b04 	ldr.w	r3, [r5], #4
 800334c:	4798      	blx	r3
 800334e:	3601      	adds	r6, #1
 8003350:	e7ee      	b.n	8003330 <__libc_init_array+0xc>
 8003352:	f855 3b04 	ldr.w	r3, [r5], #4
 8003356:	4798      	blx	r3
 8003358:	3601      	adds	r6, #1
 800335a:	e7f2      	b.n	8003342 <__libc_init_array+0x1e>
 800335c:	08003ec8 	.word	0x08003ec8
 8003360:	08003ec8 	.word	0x08003ec8
 8003364:	08003ec8 	.word	0x08003ec8
 8003368:	08003ecc 	.word	0x08003ecc

0800336c <__retarget_lock_acquire_recursive>:
 800336c:	4770      	bx	lr

0800336e <__retarget_lock_release_recursive>:
 800336e:	4770      	bx	lr

08003370 <_free_r>:
 8003370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003372:	2900      	cmp	r1, #0
 8003374:	d044      	beq.n	8003400 <_free_r+0x90>
 8003376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800337a:	9001      	str	r0, [sp, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f1a1 0404 	sub.w	r4, r1, #4
 8003382:	bfb8      	it	lt
 8003384:	18e4      	addlt	r4, r4, r3
 8003386:	f000 f8df 	bl	8003548 <__malloc_lock>
 800338a:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <_free_r+0x94>)
 800338c:	9801      	ldr	r0, [sp, #4]
 800338e:	6813      	ldr	r3, [r2, #0]
 8003390:	b933      	cbnz	r3, 80033a0 <_free_r+0x30>
 8003392:	6063      	str	r3, [r4, #4]
 8003394:	6014      	str	r4, [r2, #0]
 8003396:	b003      	add	sp, #12
 8003398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800339c:	f000 b8da 	b.w	8003554 <__malloc_unlock>
 80033a0:	42a3      	cmp	r3, r4
 80033a2:	d908      	bls.n	80033b6 <_free_r+0x46>
 80033a4:	6825      	ldr	r5, [r4, #0]
 80033a6:	1961      	adds	r1, r4, r5
 80033a8:	428b      	cmp	r3, r1
 80033aa:	bf01      	itttt	eq
 80033ac:	6819      	ldreq	r1, [r3, #0]
 80033ae:	685b      	ldreq	r3, [r3, #4]
 80033b0:	1949      	addeq	r1, r1, r5
 80033b2:	6021      	streq	r1, [r4, #0]
 80033b4:	e7ed      	b.n	8003392 <_free_r+0x22>
 80033b6:	461a      	mov	r2, r3
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	b10b      	cbz	r3, 80033c0 <_free_r+0x50>
 80033bc:	42a3      	cmp	r3, r4
 80033be:	d9fa      	bls.n	80033b6 <_free_r+0x46>
 80033c0:	6811      	ldr	r1, [r2, #0]
 80033c2:	1855      	adds	r5, r2, r1
 80033c4:	42a5      	cmp	r5, r4
 80033c6:	d10b      	bne.n	80033e0 <_free_r+0x70>
 80033c8:	6824      	ldr	r4, [r4, #0]
 80033ca:	4421      	add	r1, r4
 80033cc:	1854      	adds	r4, r2, r1
 80033ce:	42a3      	cmp	r3, r4
 80033d0:	6011      	str	r1, [r2, #0]
 80033d2:	d1e0      	bne.n	8003396 <_free_r+0x26>
 80033d4:	681c      	ldr	r4, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	6053      	str	r3, [r2, #4]
 80033da:	440c      	add	r4, r1
 80033dc:	6014      	str	r4, [r2, #0]
 80033de:	e7da      	b.n	8003396 <_free_r+0x26>
 80033e0:	d902      	bls.n	80033e8 <_free_r+0x78>
 80033e2:	230c      	movs	r3, #12
 80033e4:	6003      	str	r3, [r0, #0]
 80033e6:	e7d6      	b.n	8003396 <_free_r+0x26>
 80033e8:	6825      	ldr	r5, [r4, #0]
 80033ea:	1961      	adds	r1, r4, r5
 80033ec:	428b      	cmp	r3, r1
 80033ee:	bf04      	itt	eq
 80033f0:	6819      	ldreq	r1, [r3, #0]
 80033f2:	685b      	ldreq	r3, [r3, #4]
 80033f4:	6063      	str	r3, [r4, #4]
 80033f6:	bf04      	itt	eq
 80033f8:	1949      	addeq	r1, r1, r5
 80033fa:	6021      	streq	r1, [r4, #0]
 80033fc:	6054      	str	r4, [r2, #4]
 80033fe:	e7ca      	b.n	8003396 <_free_r+0x26>
 8003400:	b003      	add	sp, #12
 8003402:	bd30      	pop	{r4, r5, pc}
 8003404:	20000204 	.word	0x20000204

08003408 <sbrk_aligned>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	4e0e      	ldr	r6, [pc, #56]	; (8003444 <sbrk_aligned+0x3c>)
 800340c:	460c      	mov	r4, r1
 800340e:	6831      	ldr	r1, [r6, #0]
 8003410:	4605      	mov	r5, r0
 8003412:	b911      	cbnz	r1, 800341a <sbrk_aligned+0x12>
 8003414:	f000 fba6 	bl	8003b64 <_sbrk_r>
 8003418:	6030      	str	r0, [r6, #0]
 800341a:	4621      	mov	r1, r4
 800341c:	4628      	mov	r0, r5
 800341e:	f000 fba1 	bl	8003b64 <_sbrk_r>
 8003422:	1c43      	adds	r3, r0, #1
 8003424:	d00a      	beq.n	800343c <sbrk_aligned+0x34>
 8003426:	1cc4      	adds	r4, r0, #3
 8003428:	f024 0403 	bic.w	r4, r4, #3
 800342c:	42a0      	cmp	r0, r4
 800342e:	d007      	beq.n	8003440 <sbrk_aligned+0x38>
 8003430:	1a21      	subs	r1, r4, r0
 8003432:	4628      	mov	r0, r5
 8003434:	f000 fb96 	bl	8003b64 <_sbrk_r>
 8003438:	3001      	adds	r0, #1
 800343a:	d101      	bne.n	8003440 <sbrk_aligned+0x38>
 800343c:	f04f 34ff 	mov.w	r4, #4294967295
 8003440:	4620      	mov	r0, r4
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	20000208 	.word	0x20000208

08003448 <_malloc_r>:
 8003448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800344c:	1ccd      	adds	r5, r1, #3
 800344e:	f025 0503 	bic.w	r5, r5, #3
 8003452:	3508      	adds	r5, #8
 8003454:	2d0c      	cmp	r5, #12
 8003456:	bf38      	it	cc
 8003458:	250c      	movcc	r5, #12
 800345a:	2d00      	cmp	r5, #0
 800345c:	4607      	mov	r7, r0
 800345e:	db01      	blt.n	8003464 <_malloc_r+0x1c>
 8003460:	42a9      	cmp	r1, r5
 8003462:	d905      	bls.n	8003470 <_malloc_r+0x28>
 8003464:	230c      	movs	r3, #12
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	2600      	movs	r6, #0
 800346a:	4630      	mov	r0, r6
 800346c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003470:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003544 <_malloc_r+0xfc>
 8003474:	f000 f868 	bl	8003548 <__malloc_lock>
 8003478:	f8d8 3000 	ldr.w	r3, [r8]
 800347c:	461c      	mov	r4, r3
 800347e:	bb5c      	cbnz	r4, 80034d8 <_malloc_r+0x90>
 8003480:	4629      	mov	r1, r5
 8003482:	4638      	mov	r0, r7
 8003484:	f7ff ffc0 	bl	8003408 <sbrk_aligned>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	4604      	mov	r4, r0
 800348c:	d155      	bne.n	800353a <_malloc_r+0xf2>
 800348e:	f8d8 4000 	ldr.w	r4, [r8]
 8003492:	4626      	mov	r6, r4
 8003494:	2e00      	cmp	r6, #0
 8003496:	d145      	bne.n	8003524 <_malloc_r+0xdc>
 8003498:	2c00      	cmp	r4, #0
 800349a:	d048      	beq.n	800352e <_malloc_r+0xe6>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	4631      	mov	r1, r6
 80034a0:	4638      	mov	r0, r7
 80034a2:	eb04 0903 	add.w	r9, r4, r3
 80034a6:	f000 fb5d 	bl	8003b64 <_sbrk_r>
 80034aa:	4581      	cmp	r9, r0
 80034ac:	d13f      	bne.n	800352e <_malloc_r+0xe6>
 80034ae:	6821      	ldr	r1, [r4, #0]
 80034b0:	1a6d      	subs	r5, r5, r1
 80034b2:	4629      	mov	r1, r5
 80034b4:	4638      	mov	r0, r7
 80034b6:	f7ff ffa7 	bl	8003408 <sbrk_aligned>
 80034ba:	3001      	adds	r0, #1
 80034bc:	d037      	beq.n	800352e <_malloc_r+0xe6>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	442b      	add	r3, r5
 80034c2:	6023      	str	r3, [r4, #0]
 80034c4:	f8d8 3000 	ldr.w	r3, [r8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d038      	beq.n	800353e <_malloc_r+0xf6>
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	42a2      	cmp	r2, r4
 80034d0:	d12b      	bne.n	800352a <_malloc_r+0xe2>
 80034d2:	2200      	movs	r2, #0
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	e00f      	b.n	80034f8 <_malloc_r+0xb0>
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	1b52      	subs	r2, r2, r5
 80034dc:	d41f      	bmi.n	800351e <_malloc_r+0xd6>
 80034de:	2a0b      	cmp	r2, #11
 80034e0:	d917      	bls.n	8003512 <_malloc_r+0xca>
 80034e2:	1961      	adds	r1, r4, r5
 80034e4:	42a3      	cmp	r3, r4
 80034e6:	6025      	str	r5, [r4, #0]
 80034e8:	bf18      	it	ne
 80034ea:	6059      	strne	r1, [r3, #4]
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	bf08      	it	eq
 80034f0:	f8c8 1000 	streq.w	r1, [r8]
 80034f4:	5162      	str	r2, [r4, r5]
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	4638      	mov	r0, r7
 80034fa:	f104 060b 	add.w	r6, r4, #11
 80034fe:	f000 f829 	bl	8003554 <__malloc_unlock>
 8003502:	f026 0607 	bic.w	r6, r6, #7
 8003506:	1d23      	adds	r3, r4, #4
 8003508:	1af2      	subs	r2, r6, r3
 800350a:	d0ae      	beq.n	800346a <_malloc_r+0x22>
 800350c:	1b9b      	subs	r3, r3, r6
 800350e:	50a3      	str	r3, [r4, r2]
 8003510:	e7ab      	b.n	800346a <_malloc_r+0x22>
 8003512:	42a3      	cmp	r3, r4
 8003514:	6862      	ldr	r2, [r4, #4]
 8003516:	d1dd      	bne.n	80034d4 <_malloc_r+0x8c>
 8003518:	f8c8 2000 	str.w	r2, [r8]
 800351c:	e7ec      	b.n	80034f8 <_malloc_r+0xb0>
 800351e:	4623      	mov	r3, r4
 8003520:	6864      	ldr	r4, [r4, #4]
 8003522:	e7ac      	b.n	800347e <_malloc_r+0x36>
 8003524:	4634      	mov	r4, r6
 8003526:	6876      	ldr	r6, [r6, #4]
 8003528:	e7b4      	b.n	8003494 <_malloc_r+0x4c>
 800352a:	4613      	mov	r3, r2
 800352c:	e7cc      	b.n	80034c8 <_malloc_r+0x80>
 800352e:	230c      	movs	r3, #12
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4638      	mov	r0, r7
 8003534:	f000 f80e 	bl	8003554 <__malloc_unlock>
 8003538:	e797      	b.n	800346a <_malloc_r+0x22>
 800353a:	6025      	str	r5, [r4, #0]
 800353c:	e7dc      	b.n	80034f8 <_malloc_r+0xb0>
 800353e:	605b      	str	r3, [r3, #4]
 8003540:	deff      	udf	#255	; 0xff
 8003542:	bf00      	nop
 8003544:	20000204 	.word	0x20000204

08003548 <__malloc_lock>:
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <__malloc_lock+0x8>)
 800354a:	f7ff bf0f 	b.w	800336c <__retarget_lock_acquire_recursive>
 800354e:	bf00      	nop
 8003550:	20000200 	.word	0x20000200

08003554 <__malloc_unlock>:
 8003554:	4801      	ldr	r0, [pc, #4]	; (800355c <__malloc_unlock+0x8>)
 8003556:	f7ff bf0a 	b.w	800336e <__retarget_lock_release_recursive>
 800355a:	bf00      	nop
 800355c:	20000200 	.word	0x20000200

08003560 <__ssputs_r>:
 8003560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003564:	688e      	ldr	r6, [r1, #8]
 8003566:	461f      	mov	r7, r3
 8003568:	42be      	cmp	r6, r7
 800356a:	680b      	ldr	r3, [r1, #0]
 800356c:	4682      	mov	sl, r0
 800356e:	460c      	mov	r4, r1
 8003570:	4690      	mov	r8, r2
 8003572:	d82c      	bhi.n	80035ce <__ssputs_r+0x6e>
 8003574:	898a      	ldrh	r2, [r1, #12]
 8003576:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800357a:	d026      	beq.n	80035ca <__ssputs_r+0x6a>
 800357c:	6965      	ldr	r5, [r4, #20]
 800357e:	6909      	ldr	r1, [r1, #16]
 8003580:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003584:	eba3 0901 	sub.w	r9, r3, r1
 8003588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800358c:	1c7b      	adds	r3, r7, #1
 800358e:	444b      	add	r3, r9
 8003590:	106d      	asrs	r5, r5, #1
 8003592:	429d      	cmp	r5, r3
 8003594:	bf38      	it	cc
 8003596:	461d      	movcc	r5, r3
 8003598:	0553      	lsls	r3, r2, #21
 800359a:	d527      	bpl.n	80035ec <__ssputs_r+0x8c>
 800359c:	4629      	mov	r1, r5
 800359e:	f7ff ff53 	bl	8003448 <_malloc_r>
 80035a2:	4606      	mov	r6, r0
 80035a4:	b360      	cbz	r0, 8003600 <__ssputs_r+0xa0>
 80035a6:	6921      	ldr	r1, [r4, #16]
 80035a8:	464a      	mov	r2, r9
 80035aa:	f000 faeb 	bl	8003b84 <memcpy>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b8:	81a3      	strh	r3, [r4, #12]
 80035ba:	6126      	str	r6, [r4, #16]
 80035bc:	6165      	str	r5, [r4, #20]
 80035be:	444e      	add	r6, r9
 80035c0:	eba5 0509 	sub.w	r5, r5, r9
 80035c4:	6026      	str	r6, [r4, #0]
 80035c6:	60a5      	str	r5, [r4, #8]
 80035c8:	463e      	mov	r6, r7
 80035ca:	42be      	cmp	r6, r7
 80035cc:	d900      	bls.n	80035d0 <__ssputs_r+0x70>
 80035ce:	463e      	mov	r6, r7
 80035d0:	6820      	ldr	r0, [r4, #0]
 80035d2:	4632      	mov	r2, r6
 80035d4:	4641      	mov	r1, r8
 80035d6:	f000 faab 	bl	8003b30 <memmove>
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	1b9b      	subs	r3, r3, r6
 80035de:	60a3      	str	r3, [r4, #8]
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	4433      	add	r3, r6
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	2000      	movs	r0, #0
 80035e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ec:	462a      	mov	r2, r5
 80035ee:	f000 fad7 	bl	8003ba0 <_realloc_r>
 80035f2:	4606      	mov	r6, r0
 80035f4:	2800      	cmp	r0, #0
 80035f6:	d1e0      	bne.n	80035ba <__ssputs_r+0x5a>
 80035f8:	6921      	ldr	r1, [r4, #16]
 80035fa:	4650      	mov	r0, sl
 80035fc:	f7ff feb8 	bl	8003370 <_free_r>
 8003600:	230c      	movs	r3, #12
 8003602:	f8ca 3000 	str.w	r3, [sl]
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800360c:	81a3      	strh	r3, [r4, #12]
 800360e:	f04f 30ff 	mov.w	r0, #4294967295
 8003612:	e7e9      	b.n	80035e8 <__ssputs_r+0x88>

08003614 <_svfiprintf_r>:
 8003614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003618:	4698      	mov	r8, r3
 800361a:	898b      	ldrh	r3, [r1, #12]
 800361c:	061b      	lsls	r3, r3, #24
 800361e:	b09d      	sub	sp, #116	; 0x74
 8003620:	4607      	mov	r7, r0
 8003622:	460d      	mov	r5, r1
 8003624:	4614      	mov	r4, r2
 8003626:	d50e      	bpl.n	8003646 <_svfiprintf_r+0x32>
 8003628:	690b      	ldr	r3, [r1, #16]
 800362a:	b963      	cbnz	r3, 8003646 <_svfiprintf_r+0x32>
 800362c:	2140      	movs	r1, #64	; 0x40
 800362e:	f7ff ff0b 	bl	8003448 <_malloc_r>
 8003632:	6028      	str	r0, [r5, #0]
 8003634:	6128      	str	r0, [r5, #16]
 8003636:	b920      	cbnz	r0, 8003642 <_svfiprintf_r+0x2e>
 8003638:	230c      	movs	r3, #12
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	e0d0      	b.n	80037e4 <_svfiprintf_r+0x1d0>
 8003642:	2340      	movs	r3, #64	; 0x40
 8003644:	616b      	str	r3, [r5, #20]
 8003646:	2300      	movs	r3, #0
 8003648:	9309      	str	r3, [sp, #36]	; 0x24
 800364a:	2320      	movs	r3, #32
 800364c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003650:	f8cd 800c 	str.w	r8, [sp, #12]
 8003654:	2330      	movs	r3, #48	; 0x30
 8003656:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80037fc <_svfiprintf_r+0x1e8>
 800365a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800365e:	f04f 0901 	mov.w	r9, #1
 8003662:	4623      	mov	r3, r4
 8003664:	469a      	mov	sl, r3
 8003666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800366a:	b10a      	cbz	r2, 8003670 <_svfiprintf_r+0x5c>
 800366c:	2a25      	cmp	r2, #37	; 0x25
 800366e:	d1f9      	bne.n	8003664 <_svfiprintf_r+0x50>
 8003670:	ebba 0b04 	subs.w	fp, sl, r4
 8003674:	d00b      	beq.n	800368e <_svfiprintf_r+0x7a>
 8003676:	465b      	mov	r3, fp
 8003678:	4622      	mov	r2, r4
 800367a:	4629      	mov	r1, r5
 800367c:	4638      	mov	r0, r7
 800367e:	f7ff ff6f 	bl	8003560 <__ssputs_r>
 8003682:	3001      	adds	r0, #1
 8003684:	f000 80a9 	beq.w	80037da <_svfiprintf_r+0x1c6>
 8003688:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800368a:	445a      	add	r2, fp
 800368c:	9209      	str	r2, [sp, #36]	; 0x24
 800368e:	f89a 3000 	ldrb.w	r3, [sl]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80a1 	beq.w	80037da <_svfiprintf_r+0x1c6>
 8003698:	2300      	movs	r3, #0
 800369a:	f04f 32ff 	mov.w	r2, #4294967295
 800369e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036a2:	f10a 0a01 	add.w	sl, sl, #1
 80036a6:	9304      	str	r3, [sp, #16]
 80036a8:	9307      	str	r3, [sp, #28]
 80036aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ae:	931a      	str	r3, [sp, #104]	; 0x68
 80036b0:	4654      	mov	r4, sl
 80036b2:	2205      	movs	r2, #5
 80036b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b8:	4850      	ldr	r0, [pc, #320]	; (80037fc <_svfiprintf_r+0x1e8>)
 80036ba:	f7fc fdb1 	bl	8000220 <memchr>
 80036be:	9a04      	ldr	r2, [sp, #16]
 80036c0:	b9d8      	cbnz	r0, 80036fa <_svfiprintf_r+0xe6>
 80036c2:	06d0      	lsls	r0, r2, #27
 80036c4:	bf44      	itt	mi
 80036c6:	2320      	movmi	r3, #32
 80036c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036cc:	0711      	lsls	r1, r2, #28
 80036ce:	bf44      	itt	mi
 80036d0:	232b      	movmi	r3, #43	; 0x2b
 80036d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036d6:	f89a 3000 	ldrb.w	r3, [sl]
 80036da:	2b2a      	cmp	r3, #42	; 0x2a
 80036dc:	d015      	beq.n	800370a <_svfiprintf_r+0xf6>
 80036de:	9a07      	ldr	r2, [sp, #28]
 80036e0:	4654      	mov	r4, sl
 80036e2:	2000      	movs	r0, #0
 80036e4:	f04f 0c0a 	mov.w	ip, #10
 80036e8:	4621      	mov	r1, r4
 80036ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036ee:	3b30      	subs	r3, #48	; 0x30
 80036f0:	2b09      	cmp	r3, #9
 80036f2:	d94d      	bls.n	8003790 <_svfiprintf_r+0x17c>
 80036f4:	b1b0      	cbz	r0, 8003724 <_svfiprintf_r+0x110>
 80036f6:	9207      	str	r2, [sp, #28]
 80036f8:	e014      	b.n	8003724 <_svfiprintf_r+0x110>
 80036fa:	eba0 0308 	sub.w	r3, r0, r8
 80036fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003702:	4313      	orrs	r3, r2
 8003704:	9304      	str	r3, [sp, #16]
 8003706:	46a2      	mov	sl, r4
 8003708:	e7d2      	b.n	80036b0 <_svfiprintf_r+0x9c>
 800370a:	9b03      	ldr	r3, [sp, #12]
 800370c:	1d19      	adds	r1, r3, #4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	9103      	str	r1, [sp, #12]
 8003712:	2b00      	cmp	r3, #0
 8003714:	bfbb      	ittet	lt
 8003716:	425b      	neglt	r3, r3
 8003718:	f042 0202 	orrlt.w	r2, r2, #2
 800371c:	9307      	strge	r3, [sp, #28]
 800371e:	9307      	strlt	r3, [sp, #28]
 8003720:	bfb8      	it	lt
 8003722:	9204      	strlt	r2, [sp, #16]
 8003724:	7823      	ldrb	r3, [r4, #0]
 8003726:	2b2e      	cmp	r3, #46	; 0x2e
 8003728:	d10c      	bne.n	8003744 <_svfiprintf_r+0x130>
 800372a:	7863      	ldrb	r3, [r4, #1]
 800372c:	2b2a      	cmp	r3, #42	; 0x2a
 800372e:	d134      	bne.n	800379a <_svfiprintf_r+0x186>
 8003730:	9b03      	ldr	r3, [sp, #12]
 8003732:	1d1a      	adds	r2, r3, #4
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	9203      	str	r2, [sp, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	bfb8      	it	lt
 800373c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003740:	3402      	adds	r4, #2
 8003742:	9305      	str	r3, [sp, #20]
 8003744:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800380c <_svfiprintf_r+0x1f8>
 8003748:	7821      	ldrb	r1, [r4, #0]
 800374a:	2203      	movs	r2, #3
 800374c:	4650      	mov	r0, sl
 800374e:	f7fc fd67 	bl	8000220 <memchr>
 8003752:	b138      	cbz	r0, 8003764 <_svfiprintf_r+0x150>
 8003754:	9b04      	ldr	r3, [sp, #16]
 8003756:	eba0 000a 	sub.w	r0, r0, sl
 800375a:	2240      	movs	r2, #64	; 0x40
 800375c:	4082      	lsls	r2, r0
 800375e:	4313      	orrs	r3, r2
 8003760:	3401      	adds	r4, #1
 8003762:	9304      	str	r3, [sp, #16]
 8003764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003768:	4825      	ldr	r0, [pc, #148]	; (8003800 <_svfiprintf_r+0x1ec>)
 800376a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800376e:	2206      	movs	r2, #6
 8003770:	f7fc fd56 	bl	8000220 <memchr>
 8003774:	2800      	cmp	r0, #0
 8003776:	d038      	beq.n	80037ea <_svfiprintf_r+0x1d6>
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <_svfiprintf_r+0x1f0>)
 800377a:	bb1b      	cbnz	r3, 80037c4 <_svfiprintf_r+0x1b0>
 800377c:	9b03      	ldr	r3, [sp, #12]
 800377e:	3307      	adds	r3, #7
 8003780:	f023 0307 	bic.w	r3, r3, #7
 8003784:	3308      	adds	r3, #8
 8003786:	9303      	str	r3, [sp, #12]
 8003788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800378a:	4433      	add	r3, r6
 800378c:	9309      	str	r3, [sp, #36]	; 0x24
 800378e:	e768      	b.n	8003662 <_svfiprintf_r+0x4e>
 8003790:	fb0c 3202 	mla	r2, ip, r2, r3
 8003794:	460c      	mov	r4, r1
 8003796:	2001      	movs	r0, #1
 8003798:	e7a6      	b.n	80036e8 <_svfiprintf_r+0xd4>
 800379a:	2300      	movs	r3, #0
 800379c:	3401      	adds	r4, #1
 800379e:	9305      	str	r3, [sp, #20]
 80037a0:	4619      	mov	r1, r3
 80037a2:	f04f 0c0a 	mov.w	ip, #10
 80037a6:	4620      	mov	r0, r4
 80037a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ac:	3a30      	subs	r2, #48	; 0x30
 80037ae:	2a09      	cmp	r2, #9
 80037b0:	d903      	bls.n	80037ba <_svfiprintf_r+0x1a6>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0c6      	beq.n	8003744 <_svfiprintf_r+0x130>
 80037b6:	9105      	str	r1, [sp, #20]
 80037b8:	e7c4      	b.n	8003744 <_svfiprintf_r+0x130>
 80037ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80037be:	4604      	mov	r4, r0
 80037c0:	2301      	movs	r3, #1
 80037c2:	e7f0      	b.n	80037a6 <_svfiprintf_r+0x192>
 80037c4:	ab03      	add	r3, sp, #12
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	462a      	mov	r2, r5
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <_svfiprintf_r+0x1f4>)
 80037cc:	a904      	add	r1, sp, #16
 80037ce:	4638      	mov	r0, r7
 80037d0:	f3af 8000 	nop.w
 80037d4:	1c42      	adds	r2, r0, #1
 80037d6:	4606      	mov	r6, r0
 80037d8:	d1d6      	bne.n	8003788 <_svfiprintf_r+0x174>
 80037da:	89ab      	ldrh	r3, [r5, #12]
 80037dc:	065b      	lsls	r3, r3, #25
 80037de:	f53f af2d 	bmi.w	800363c <_svfiprintf_r+0x28>
 80037e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037e4:	b01d      	add	sp, #116	; 0x74
 80037e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ea:	ab03      	add	r3, sp, #12
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	462a      	mov	r2, r5
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <_svfiprintf_r+0x1f4>)
 80037f2:	a904      	add	r1, sp, #16
 80037f4:	4638      	mov	r0, r7
 80037f6:	f000 f879 	bl	80038ec <_printf_i>
 80037fa:	e7eb      	b.n	80037d4 <_svfiprintf_r+0x1c0>
 80037fc:	08003e8d 	.word	0x08003e8d
 8003800:	08003e97 	.word	0x08003e97
 8003804:	00000000 	.word	0x00000000
 8003808:	08003561 	.word	0x08003561
 800380c:	08003e93 	.word	0x08003e93

08003810 <_printf_common>:
 8003810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003814:	4616      	mov	r6, r2
 8003816:	4699      	mov	r9, r3
 8003818:	688a      	ldr	r2, [r1, #8]
 800381a:	690b      	ldr	r3, [r1, #16]
 800381c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003820:	4293      	cmp	r3, r2
 8003822:	bfb8      	it	lt
 8003824:	4613      	movlt	r3, r2
 8003826:	6033      	str	r3, [r6, #0]
 8003828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800382c:	4607      	mov	r7, r0
 800382e:	460c      	mov	r4, r1
 8003830:	b10a      	cbz	r2, 8003836 <_printf_common+0x26>
 8003832:	3301      	adds	r3, #1
 8003834:	6033      	str	r3, [r6, #0]
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	0699      	lsls	r1, r3, #26
 800383a:	bf42      	ittt	mi
 800383c:	6833      	ldrmi	r3, [r6, #0]
 800383e:	3302      	addmi	r3, #2
 8003840:	6033      	strmi	r3, [r6, #0]
 8003842:	6825      	ldr	r5, [r4, #0]
 8003844:	f015 0506 	ands.w	r5, r5, #6
 8003848:	d106      	bne.n	8003858 <_printf_common+0x48>
 800384a:	f104 0a19 	add.w	sl, r4, #25
 800384e:	68e3      	ldr	r3, [r4, #12]
 8003850:	6832      	ldr	r2, [r6, #0]
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	42ab      	cmp	r3, r5
 8003856:	dc26      	bgt.n	80038a6 <_printf_common+0x96>
 8003858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800385c:	1e13      	subs	r3, r2, #0
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	bf18      	it	ne
 8003862:	2301      	movne	r3, #1
 8003864:	0692      	lsls	r2, r2, #26
 8003866:	d42b      	bmi.n	80038c0 <_printf_common+0xb0>
 8003868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800386c:	4649      	mov	r1, r9
 800386e:	4638      	mov	r0, r7
 8003870:	47c0      	blx	r8
 8003872:	3001      	adds	r0, #1
 8003874:	d01e      	beq.n	80038b4 <_printf_common+0xa4>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	6922      	ldr	r2, [r4, #16]
 800387a:	f003 0306 	and.w	r3, r3, #6
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf02      	ittt	eq
 8003882:	68e5      	ldreq	r5, [r4, #12]
 8003884:	6833      	ldreq	r3, [r6, #0]
 8003886:	1aed      	subeq	r5, r5, r3
 8003888:	68a3      	ldr	r3, [r4, #8]
 800388a:	bf0c      	ite	eq
 800388c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003890:	2500      	movne	r5, #0
 8003892:	4293      	cmp	r3, r2
 8003894:	bfc4      	itt	gt
 8003896:	1a9b      	subgt	r3, r3, r2
 8003898:	18ed      	addgt	r5, r5, r3
 800389a:	2600      	movs	r6, #0
 800389c:	341a      	adds	r4, #26
 800389e:	42b5      	cmp	r5, r6
 80038a0:	d11a      	bne.n	80038d8 <_printf_common+0xc8>
 80038a2:	2000      	movs	r0, #0
 80038a4:	e008      	b.n	80038b8 <_printf_common+0xa8>
 80038a6:	2301      	movs	r3, #1
 80038a8:	4652      	mov	r2, sl
 80038aa:	4649      	mov	r1, r9
 80038ac:	4638      	mov	r0, r7
 80038ae:	47c0      	blx	r8
 80038b0:	3001      	adds	r0, #1
 80038b2:	d103      	bne.n	80038bc <_printf_common+0xac>
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038bc:	3501      	adds	r5, #1
 80038be:	e7c6      	b.n	800384e <_printf_common+0x3e>
 80038c0:	18e1      	adds	r1, r4, r3
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	2030      	movs	r0, #48	; 0x30
 80038c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038ca:	4422      	add	r2, r4
 80038cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038d4:	3302      	adds	r3, #2
 80038d6:	e7c7      	b.n	8003868 <_printf_common+0x58>
 80038d8:	2301      	movs	r3, #1
 80038da:	4622      	mov	r2, r4
 80038dc:	4649      	mov	r1, r9
 80038de:	4638      	mov	r0, r7
 80038e0:	47c0      	blx	r8
 80038e2:	3001      	adds	r0, #1
 80038e4:	d0e6      	beq.n	80038b4 <_printf_common+0xa4>
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7d9      	b.n	800389e <_printf_common+0x8e>
	...

080038ec <_printf_i>:
 80038ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038f0:	7e0f      	ldrb	r7, [r1, #24]
 80038f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038f4:	2f78      	cmp	r7, #120	; 0x78
 80038f6:	4691      	mov	r9, r2
 80038f8:	4680      	mov	r8, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	469a      	mov	sl, r3
 80038fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003902:	d807      	bhi.n	8003914 <_printf_i+0x28>
 8003904:	2f62      	cmp	r7, #98	; 0x62
 8003906:	d80a      	bhi.n	800391e <_printf_i+0x32>
 8003908:	2f00      	cmp	r7, #0
 800390a:	f000 80d4 	beq.w	8003ab6 <_printf_i+0x1ca>
 800390e:	2f58      	cmp	r7, #88	; 0x58
 8003910:	f000 80c0 	beq.w	8003a94 <_printf_i+0x1a8>
 8003914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800391c:	e03a      	b.n	8003994 <_printf_i+0xa8>
 800391e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003922:	2b15      	cmp	r3, #21
 8003924:	d8f6      	bhi.n	8003914 <_printf_i+0x28>
 8003926:	a101      	add	r1, pc, #4	; (adr r1, 800392c <_printf_i+0x40>)
 8003928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800392c:	08003985 	.word	0x08003985
 8003930:	08003999 	.word	0x08003999
 8003934:	08003915 	.word	0x08003915
 8003938:	08003915 	.word	0x08003915
 800393c:	08003915 	.word	0x08003915
 8003940:	08003915 	.word	0x08003915
 8003944:	08003999 	.word	0x08003999
 8003948:	08003915 	.word	0x08003915
 800394c:	08003915 	.word	0x08003915
 8003950:	08003915 	.word	0x08003915
 8003954:	08003915 	.word	0x08003915
 8003958:	08003a9d 	.word	0x08003a9d
 800395c:	080039c5 	.word	0x080039c5
 8003960:	08003a57 	.word	0x08003a57
 8003964:	08003915 	.word	0x08003915
 8003968:	08003915 	.word	0x08003915
 800396c:	08003abf 	.word	0x08003abf
 8003970:	08003915 	.word	0x08003915
 8003974:	080039c5 	.word	0x080039c5
 8003978:	08003915 	.word	0x08003915
 800397c:	08003915 	.word	0x08003915
 8003980:	08003a5f 	.word	0x08003a5f
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	602a      	str	r2, [r5, #0]
 800398c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003994:	2301      	movs	r3, #1
 8003996:	e09f      	b.n	8003ad8 <_printf_i+0x1ec>
 8003998:	6820      	ldr	r0, [r4, #0]
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	0607      	lsls	r7, r0, #24
 800399e:	f103 0104 	add.w	r1, r3, #4
 80039a2:	6029      	str	r1, [r5, #0]
 80039a4:	d501      	bpl.n	80039aa <_printf_i+0xbe>
 80039a6:	681e      	ldr	r6, [r3, #0]
 80039a8:	e003      	b.n	80039b2 <_printf_i+0xc6>
 80039aa:	0646      	lsls	r6, r0, #25
 80039ac:	d5fb      	bpl.n	80039a6 <_printf_i+0xba>
 80039ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80039b2:	2e00      	cmp	r6, #0
 80039b4:	da03      	bge.n	80039be <_printf_i+0xd2>
 80039b6:	232d      	movs	r3, #45	; 0x2d
 80039b8:	4276      	negs	r6, r6
 80039ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039be:	485a      	ldr	r0, [pc, #360]	; (8003b28 <_printf_i+0x23c>)
 80039c0:	230a      	movs	r3, #10
 80039c2:	e012      	b.n	80039ea <_printf_i+0xfe>
 80039c4:	682b      	ldr	r3, [r5, #0]
 80039c6:	6820      	ldr	r0, [r4, #0]
 80039c8:	1d19      	adds	r1, r3, #4
 80039ca:	6029      	str	r1, [r5, #0]
 80039cc:	0605      	lsls	r5, r0, #24
 80039ce:	d501      	bpl.n	80039d4 <_printf_i+0xe8>
 80039d0:	681e      	ldr	r6, [r3, #0]
 80039d2:	e002      	b.n	80039da <_printf_i+0xee>
 80039d4:	0641      	lsls	r1, r0, #25
 80039d6:	d5fb      	bpl.n	80039d0 <_printf_i+0xe4>
 80039d8:	881e      	ldrh	r6, [r3, #0]
 80039da:	4853      	ldr	r0, [pc, #332]	; (8003b28 <_printf_i+0x23c>)
 80039dc:	2f6f      	cmp	r7, #111	; 0x6f
 80039de:	bf0c      	ite	eq
 80039e0:	2308      	moveq	r3, #8
 80039e2:	230a      	movne	r3, #10
 80039e4:	2100      	movs	r1, #0
 80039e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039ea:	6865      	ldr	r5, [r4, #4]
 80039ec:	60a5      	str	r5, [r4, #8]
 80039ee:	2d00      	cmp	r5, #0
 80039f0:	bfa2      	ittt	ge
 80039f2:	6821      	ldrge	r1, [r4, #0]
 80039f4:	f021 0104 	bicge.w	r1, r1, #4
 80039f8:	6021      	strge	r1, [r4, #0]
 80039fa:	b90e      	cbnz	r6, 8003a00 <_printf_i+0x114>
 80039fc:	2d00      	cmp	r5, #0
 80039fe:	d04b      	beq.n	8003a98 <_printf_i+0x1ac>
 8003a00:	4615      	mov	r5, r2
 8003a02:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a06:	fb03 6711 	mls	r7, r3, r1, r6
 8003a0a:	5dc7      	ldrb	r7, [r0, r7]
 8003a0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a10:	4637      	mov	r7, r6
 8003a12:	42bb      	cmp	r3, r7
 8003a14:	460e      	mov	r6, r1
 8003a16:	d9f4      	bls.n	8003a02 <_printf_i+0x116>
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d10b      	bne.n	8003a34 <_printf_i+0x148>
 8003a1c:	6823      	ldr	r3, [r4, #0]
 8003a1e:	07de      	lsls	r6, r3, #31
 8003a20:	d508      	bpl.n	8003a34 <_printf_i+0x148>
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	6861      	ldr	r1, [r4, #4]
 8003a26:	4299      	cmp	r1, r3
 8003a28:	bfde      	ittt	le
 8003a2a:	2330      	movle	r3, #48	; 0x30
 8003a2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a34:	1b52      	subs	r2, r2, r5
 8003a36:	6122      	str	r2, [r4, #16]
 8003a38:	f8cd a000 	str.w	sl, [sp]
 8003a3c:	464b      	mov	r3, r9
 8003a3e:	aa03      	add	r2, sp, #12
 8003a40:	4621      	mov	r1, r4
 8003a42:	4640      	mov	r0, r8
 8003a44:	f7ff fee4 	bl	8003810 <_printf_common>
 8003a48:	3001      	adds	r0, #1
 8003a4a:	d14a      	bne.n	8003ae2 <_printf_i+0x1f6>
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	b004      	add	sp, #16
 8003a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	f043 0320 	orr.w	r3, r3, #32
 8003a5c:	6023      	str	r3, [r4, #0]
 8003a5e:	4833      	ldr	r0, [pc, #204]	; (8003b2c <_printf_i+0x240>)
 8003a60:	2778      	movs	r7, #120	; 0x78
 8003a62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	6829      	ldr	r1, [r5, #0]
 8003a6a:	061f      	lsls	r7, r3, #24
 8003a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a70:	d402      	bmi.n	8003a78 <_printf_i+0x18c>
 8003a72:	065f      	lsls	r7, r3, #25
 8003a74:	bf48      	it	mi
 8003a76:	b2b6      	uxthmi	r6, r6
 8003a78:	07df      	lsls	r7, r3, #31
 8003a7a:	bf48      	it	mi
 8003a7c:	f043 0320 	orrmi.w	r3, r3, #32
 8003a80:	6029      	str	r1, [r5, #0]
 8003a82:	bf48      	it	mi
 8003a84:	6023      	strmi	r3, [r4, #0]
 8003a86:	b91e      	cbnz	r6, 8003a90 <_printf_i+0x1a4>
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	f023 0320 	bic.w	r3, r3, #32
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	2310      	movs	r3, #16
 8003a92:	e7a7      	b.n	80039e4 <_printf_i+0xf8>
 8003a94:	4824      	ldr	r0, [pc, #144]	; (8003b28 <_printf_i+0x23c>)
 8003a96:	e7e4      	b.n	8003a62 <_printf_i+0x176>
 8003a98:	4615      	mov	r5, r2
 8003a9a:	e7bd      	b.n	8003a18 <_printf_i+0x12c>
 8003a9c:	682b      	ldr	r3, [r5, #0]
 8003a9e:	6826      	ldr	r6, [r4, #0]
 8003aa0:	6961      	ldr	r1, [r4, #20]
 8003aa2:	1d18      	adds	r0, r3, #4
 8003aa4:	6028      	str	r0, [r5, #0]
 8003aa6:	0635      	lsls	r5, r6, #24
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	d501      	bpl.n	8003ab0 <_printf_i+0x1c4>
 8003aac:	6019      	str	r1, [r3, #0]
 8003aae:	e002      	b.n	8003ab6 <_printf_i+0x1ca>
 8003ab0:	0670      	lsls	r0, r6, #25
 8003ab2:	d5fb      	bpl.n	8003aac <_printf_i+0x1c0>
 8003ab4:	8019      	strh	r1, [r3, #0]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	6123      	str	r3, [r4, #16]
 8003aba:	4615      	mov	r5, r2
 8003abc:	e7bc      	b.n	8003a38 <_printf_i+0x14c>
 8003abe:	682b      	ldr	r3, [r5, #0]
 8003ac0:	1d1a      	adds	r2, r3, #4
 8003ac2:	602a      	str	r2, [r5, #0]
 8003ac4:	681d      	ldr	r5, [r3, #0]
 8003ac6:	6862      	ldr	r2, [r4, #4]
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7fc fba8 	bl	8000220 <memchr>
 8003ad0:	b108      	cbz	r0, 8003ad6 <_printf_i+0x1ea>
 8003ad2:	1b40      	subs	r0, r0, r5
 8003ad4:	6060      	str	r0, [r4, #4]
 8003ad6:	6863      	ldr	r3, [r4, #4]
 8003ad8:	6123      	str	r3, [r4, #16]
 8003ada:	2300      	movs	r3, #0
 8003adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ae0:	e7aa      	b.n	8003a38 <_printf_i+0x14c>
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	462a      	mov	r2, r5
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	4640      	mov	r0, r8
 8003aea:	47d0      	blx	sl
 8003aec:	3001      	adds	r0, #1
 8003aee:	d0ad      	beq.n	8003a4c <_printf_i+0x160>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	079b      	lsls	r3, r3, #30
 8003af4:	d413      	bmi.n	8003b1e <_printf_i+0x232>
 8003af6:	68e0      	ldr	r0, [r4, #12]
 8003af8:	9b03      	ldr	r3, [sp, #12]
 8003afa:	4298      	cmp	r0, r3
 8003afc:	bfb8      	it	lt
 8003afe:	4618      	movlt	r0, r3
 8003b00:	e7a6      	b.n	8003a50 <_printf_i+0x164>
 8003b02:	2301      	movs	r3, #1
 8003b04:	4632      	mov	r2, r6
 8003b06:	4649      	mov	r1, r9
 8003b08:	4640      	mov	r0, r8
 8003b0a:	47d0      	blx	sl
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d09d      	beq.n	8003a4c <_printf_i+0x160>
 8003b10:	3501      	adds	r5, #1
 8003b12:	68e3      	ldr	r3, [r4, #12]
 8003b14:	9903      	ldr	r1, [sp, #12]
 8003b16:	1a5b      	subs	r3, r3, r1
 8003b18:	42ab      	cmp	r3, r5
 8003b1a:	dcf2      	bgt.n	8003b02 <_printf_i+0x216>
 8003b1c:	e7eb      	b.n	8003af6 <_printf_i+0x20a>
 8003b1e:	2500      	movs	r5, #0
 8003b20:	f104 0619 	add.w	r6, r4, #25
 8003b24:	e7f5      	b.n	8003b12 <_printf_i+0x226>
 8003b26:	bf00      	nop
 8003b28:	08003e9e 	.word	0x08003e9e
 8003b2c:	08003eaf 	.word	0x08003eaf

08003b30 <memmove>:
 8003b30:	4288      	cmp	r0, r1
 8003b32:	b510      	push	{r4, lr}
 8003b34:	eb01 0402 	add.w	r4, r1, r2
 8003b38:	d902      	bls.n	8003b40 <memmove+0x10>
 8003b3a:	4284      	cmp	r4, r0
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	d807      	bhi.n	8003b50 <memmove+0x20>
 8003b40:	1e43      	subs	r3, r0, #1
 8003b42:	42a1      	cmp	r1, r4
 8003b44:	d008      	beq.n	8003b58 <memmove+0x28>
 8003b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b4e:	e7f8      	b.n	8003b42 <memmove+0x12>
 8003b50:	4402      	add	r2, r0
 8003b52:	4601      	mov	r1, r0
 8003b54:	428a      	cmp	r2, r1
 8003b56:	d100      	bne.n	8003b5a <memmove+0x2a>
 8003b58:	bd10      	pop	{r4, pc}
 8003b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b62:	e7f7      	b.n	8003b54 <memmove+0x24>

08003b64 <_sbrk_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4d06      	ldr	r5, [pc, #24]	; (8003b80 <_sbrk_r+0x1c>)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	602b      	str	r3, [r5, #0]
 8003b70:	f7fd f814 	bl	8000b9c <_sbrk>
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d102      	bne.n	8003b7e <_sbrk_r+0x1a>
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	b103      	cbz	r3, 8003b7e <_sbrk_r+0x1a>
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	bd38      	pop	{r3, r4, r5, pc}
 8003b80:	200001fc 	.word	0x200001fc

08003b84 <memcpy>:
 8003b84:	440a      	add	r2, r1
 8003b86:	4291      	cmp	r1, r2
 8003b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b8c:	d100      	bne.n	8003b90 <memcpy+0xc>
 8003b8e:	4770      	bx	lr
 8003b90:	b510      	push	{r4, lr}
 8003b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b9a:	4291      	cmp	r1, r2
 8003b9c:	d1f9      	bne.n	8003b92 <memcpy+0xe>
 8003b9e:	bd10      	pop	{r4, pc}

08003ba0 <_realloc_r>:
 8003ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ba4:	4680      	mov	r8, r0
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	460e      	mov	r6, r1
 8003baa:	b921      	cbnz	r1, 8003bb6 <_realloc_r+0x16>
 8003bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	f7ff bc49 	b.w	8003448 <_malloc_r>
 8003bb6:	b92a      	cbnz	r2, 8003bc4 <_realloc_r+0x24>
 8003bb8:	f7ff fbda 	bl	8003370 <_free_r>
 8003bbc:	4625      	mov	r5, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc4:	f000 f81b 	bl	8003bfe <_malloc_usable_size_r>
 8003bc8:	4284      	cmp	r4, r0
 8003bca:	4607      	mov	r7, r0
 8003bcc:	d802      	bhi.n	8003bd4 <_realloc_r+0x34>
 8003bce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003bd2:	d812      	bhi.n	8003bfa <_realloc_r+0x5a>
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	f7ff fc36 	bl	8003448 <_malloc_r>
 8003bdc:	4605      	mov	r5, r0
 8003bde:	2800      	cmp	r0, #0
 8003be0:	d0ed      	beq.n	8003bbe <_realloc_r+0x1e>
 8003be2:	42bc      	cmp	r4, r7
 8003be4:	4622      	mov	r2, r4
 8003be6:	4631      	mov	r1, r6
 8003be8:	bf28      	it	cs
 8003bea:	463a      	movcs	r2, r7
 8003bec:	f7ff ffca 	bl	8003b84 <memcpy>
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	f7ff fbbc 	bl	8003370 <_free_r>
 8003bf8:	e7e1      	b.n	8003bbe <_realloc_r+0x1e>
 8003bfa:	4635      	mov	r5, r6
 8003bfc:	e7df      	b.n	8003bbe <_realloc_r+0x1e>

08003bfe <_malloc_usable_size_r>:
 8003bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c02:	1f18      	subs	r0, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bfbc      	itt	lt
 8003c08:	580b      	ldrlt	r3, [r1, r0]
 8003c0a:	18c0      	addlt	r0, r0, r3
 8003c0c:	4770      	bx	lr
	...

08003c10 <_init>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr

08003c1c <_fini>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr
