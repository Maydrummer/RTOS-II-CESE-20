
tp1_rtos_ii_maisincho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000722c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075ac  080075ac  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075b4  080075b4  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b4  080075b4  000175b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080075bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004888  200000c0  0800767c  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004948  0800767c  00024948  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000185be  00000000  00000000  00020133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eb2  00000000  00000000  000386f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  0003c5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001088  00000000  00000000  0003db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ff4  00000000  00000000  0003ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b068  00000000  00000000  00064bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc139  00000000  00000000  0007fc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000062f8  00000000  00000000  0015bd50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00162048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073e4 	.word	0x080073e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	080073e4 	.word	0x080073e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <vApplicationGetIdleTaskMemory+0x30>)
 80005d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200000dc 	.word	0x200000dc
 80005ec:	2000017c 	.word	0x2000017c

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fb81 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f81f 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8b5 	bl	800076c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f889 	bl	8000718 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 8000606:	f004 ff99 	bl	800553c <app_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <main+0x44>)
 800060c:	1d3c      	adds	r4, r7, #4
 800060e:	461d      	mov	r5, r3
 8000610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f002 ffc2 	bl	80035aa <osThreadCreate>
 8000626:	4603      	mov	r3, r0
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <main+0x48>)
 800062a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800062c:	f002 ffb6 	bl	800359c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x40>
 8000632:	bf00      	nop
 8000634:	08007408 	.word	0x08007408
 8000638:	200003c0 	.word	0x200003c0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fe51 	bl	80062f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <SystemClock_Config+0xd4>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <SystemClock_Config+0xd4>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SystemClock_Config+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <SystemClock_Config+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <SystemClock_Config+0xd8>)
 800068a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b0:	2310      	movs	r3, #16
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fa26 	bl	8001b1c <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d6:	f000 f8e9 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fe94 	bl	8001424 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000702:	f000 f8d3 	bl	80008ac <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000750:	f001 ff30 	bl	80025b4 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f8a7 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000037c 	.word	0x2000037c
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b38      	ldr	r3, [pc, #224]	; (8000868 <MX_GPIO_Init+0xfc>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a37      	ldr	r2, [pc, #220]	; (8000868 <MX_GPIO_Init+0xfc>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b35      	ldr	r3, [pc, #212]	; (8000868 <MX_GPIO_Init+0xfc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <MX_GPIO_Init+0xfc>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a30      	ldr	r2, [pc, #192]	; (8000868 <MX_GPIO_Init+0xfc>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <MX_GPIO_Init+0xfc>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_GPIO_Init+0xfc>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a29      	ldr	r2, [pc, #164]	; (8000868 <MX_GPIO_Init+0xfc>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_GPIO_Init+0xfc>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_GPIO_Init+0xfc>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a22      	ldr	r2, [pc, #136]	; (8000868 <MX_GPIO_Init+0xfc>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_GPIO_Init+0xfc>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	481d      	ldr	r0, [pc, #116]	; (800086c <MX_GPIO_Init+0x100>)
 80007f8:	f000 fde2 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000802:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4817      	ldr	r0, [pc, #92]	; (8000870 <MX_GPIO_Init+0x104>)
 8000814:	f000 fc28 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000818:	2320      	movs	r3, #32
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	480f      	ldr	r0, [pc, #60]	; (800086c <MX_GPIO_Init+0x100>)
 8000830:	f000 fc1a 	bl	8001068 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4808      	ldr	r0, [pc, #32]	; (800086c <MX_GPIO_Init+0x100>)
 800084c:	f000 fc0c 	bl	8001068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2105      	movs	r1, #5
 8000854:	2028      	movs	r0, #40	; 0x28
 8000856:	f000 fb4b 	bl	8000ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800085a:	2028      	movs	r0, #40	; 0x28
 800085c:	f000 fb64 	bl	8000f28 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800
 800086c:	40020000 	.word	0x40020000
 8000870:	40020800 	.word	0x40020800

08000874 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(0xFFFFFFFF);
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f002 fedf 	bl	8003642 <osDelay>
 8000884:	e7fa      	b.n	800087c <StartDefaultTask+0x8>
	...

08000888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d101      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800089a:	f000 fa51 	bl	8000d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010000 	.word	0x40010000

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_MspInit+0x54>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <HAL_MspInit+0x54>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x54>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_MspInit+0x54>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <HAL_MspInit+0x54>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <HAL_MspInit+0x54>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	603b      	str	r3, [r7, #0]
 80008f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	210f      	movs	r1, #15
 80008fa:	f06f 0001 	mvn.w	r0, #1
 80008fe:	f000 faf7 	bl	8000ef0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1d      	ldr	r2, [pc, #116]	; (80009a4 <HAL_UART_MspInit+0x94>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d133      	bne.n	800099a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_UART_MspInit+0x98>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a1b      	ldr	r2, [pc, #108]	; (80009a8 <HAL_UART_MspInit+0x98>)
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_UART_MspInit+0x98>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_UART_MspInit+0x98>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <HAL_UART_MspInit+0x98>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_UART_MspInit+0x98>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800096a:	230c      	movs	r3, #12
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097a:	2307      	movs	r3, #7
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_UART_MspInit+0x9c>)
 8000986:	f000 fb6f 	bl	8001068 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2105      	movs	r1, #5
 800098e:	2026      	movs	r0, #38	; 0x26
 8000990:	f000 faae 	bl	8000ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000994:	2026      	movs	r0, #38	; 0x26
 8000996:	f000 fac7 	bl	8000f28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40004400 	.word	0x40004400
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000

080009b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <HAL_InitTick+0xd0>)
 80009c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c8:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <HAL_InitTick+0xd0>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6453      	str	r3, [r2, #68]	; 0x44
 80009d0:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <HAL_InitTick+0xd0>)
 80009d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009dc:	f107 020c 	add.w	r2, r7, #12
 80009e0:	f107 0310 	add.w	r3, r7, #16
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fe36 	bl	8001658 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009ec:	f000 fe20 	bl	8001630 <HAL_RCC_GetPCLK2Freq>
 80009f0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f4:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <HAL_InitTick+0xd4>)
 80009f6:	fba2 2303 	umull	r2, r3, r2, r3
 80009fa:	0c9b      	lsrs	r3, r3, #18
 80009fc:	3b01      	subs	r3, #1
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <HAL_InitTick+0xd8>)
 8000a02:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <HAL_InitTick+0xdc>)
 8000a04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_InitTick+0xd8>)
 8000a08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <HAL_InitTick+0xd8>)
 8000a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_InitTick+0xd8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_InitTick+0xd8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <HAL_InitTick+0xd8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a26:	4818      	ldr	r0, [pc, #96]	; (8000a88 <HAL_InitTick+0xd8>)
 8000a28:	f001 fb16 	bl	8002058 <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d11b      	bne.n	8000a72 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <HAL_InitTick+0xd8>)
 8000a3c:	f001 fb66 	bl	800210c <HAL_TIM_Base_Start_IT>
 8000a40:	4603      	mov	r3, r0
 8000a42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d111      	bne.n	8000a72 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a4e:	2019      	movs	r0, #25
 8000a50:	f000 fa6a 	bl	8000f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b0f      	cmp	r3, #15
 8000a58:	d808      	bhi.n	8000a6c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	2019      	movs	r0, #25
 8000a60:	f000 fa46 	bl	8000ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_InitTick+0xe0>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
 8000a6a:	e002      	b.n	8000a72 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3730      	adds	r7, #48	; 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800
 8000a84:	431bde83 	.word	0x431bde83
 8000a88:	200003c4 	.word	0x200003c4
 8000a8c:	40010000 	.word	0x40010000
 8000a90:	20000004 	.word	0x20000004

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ac6:	f001 fb91 	bl	80021ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200003c4 	.word	0x200003c4

08000ad4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <USART2_IRQHandler+0x10>)
 8000ada:	f001 fe63 	bl	80027a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000037c 	.word	0x2000037c

08000ae8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000aec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000af0:	f000 fc80 	bl	80013f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return 1;
 8000afc:	2301      	movs	r3, #1
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_kill>:

int _kill(int pid, int sig)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b12:	f005 fc93 	bl	800643c <__errno>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2216      	movs	r2, #22
 8000b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_exit>:

void _exit (int status)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ffe7 	bl	8000b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b3a:	e7fe      	b.n	8000b3a <_exit+0x12>

08000b3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	e00a      	b.n	8000b64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b4e:	f3af 8000 	nop.w
 8000b52:	4601      	mov	r1, r0
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	60ba      	str	r2, [r7, #8]
 8000b5a:	b2ca      	uxtb	r2, r1
 8000b5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf0      	blt.n	8000b4e <_read+0x12>
  }

  return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e009      	b.n	8000b9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	60ba      	str	r2, [r7, #8]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf1      	blt.n	8000b88 <_write+0x12>
  }
  return len;
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <_close>:

int _close(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_isatty>:

int _isatty(int file)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f005 fbf8 	bl	800643c <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	2000040c 	.word	0x2000040c
 8000c80:	20004948 	.word	0x20004948

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ffd7 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f005 fbb7 	bl	8006448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc89 	bl	80005f0 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000cec:	080075bc 	.word	0x080075bc
  ldr r2, =_sbss
 8000cf0:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000cf4:	20004948 	.word	0x20004948

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f8d8 	bl	8000eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f7ff fe40 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fdc2 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000410 	.word	0x20000410

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000410 	.word	0x20000410

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	; (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	; (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	; (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff4c 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f02:	f7ff ff61 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	6978      	ldr	r0, [r7, #20]
 8000f0e:	f7ff ffb1 	bl	8000e74 <NVIC_EncodePriority>
 8000f12:	4602      	mov	r2, r0
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff80 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff54 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f50:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f52:	f7ff ff09 	bl	8000d68 <HAL_GetTick>
 8000f56:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d008      	beq.n	8000f76 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e052      	b.n	800101c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0216 	bic.w	r2, r2, #22
 8000f84:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	695a      	ldr	r2, [r3, #20]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f94:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <HAL_DMA_Abort+0x62>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0208 	bic.w	r2, r2, #8
 8000fb4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0201 	bic.w	r2, r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fc6:	e013      	b.n	8000ff0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fc8:	f7ff fece 	bl	8000d68 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d90c      	bls.n	8000ff0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2220      	movs	r2, #32
 8000fda:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2203      	movs	r2, #3
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e015      	b.n	800101c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1e4      	bne.n	8000fc8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001002:	223f      	movs	r2, #63	; 0x3f
 8001004:	409a      	lsls	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d004      	beq.n	8001042 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00c      	b.n	800105c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2205      	movs	r2, #5
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e165      	b.n	8001350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 8154 	bne.w	800134a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d005      	beq.n	80010ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	2b03      	cmp	r3, #3
 8001126:	d017      	beq.n	8001158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80ae 	beq.w	800134a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <HAL_GPIO_Init+0x300>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a5c      	ldr	r2, [pc, #368]	; (8001368 <HAL_GPIO_Init+0x300>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b5a      	ldr	r3, [pc, #360]	; (8001368 <HAL_GPIO_Init+0x300>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120a:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_GPIO_Init+0x304>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <HAL_GPIO_Init+0x308>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d025      	beq.n	8001282 <HAL_GPIO_Init+0x21a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <HAL_GPIO_Init+0x30c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d01f      	beq.n	800127e <HAL_GPIO_Init+0x216>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <HAL_GPIO_Init+0x310>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x212>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4c      	ldr	r2, [pc, #304]	; (800137c <HAL_GPIO_Init+0x314>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x20e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <HAL_GPIO_Init+0x318>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x20a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4a      	ldr	r2, [pc, #296]	; (8001384 <HAL_GPIO_Init+0x31c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x206>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a49      	ldr	r2, [pc, #292]	; (8001388 <HAL_GPIO_Init+0x320>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x202>
 8001266:	2306      	movs	r3, #6
 8001268:	e00c      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 800126a:	2307      	movs	r3, #7
 800126c:	e00a      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 800126e:	2305      	movs	r3, #5
 8001270:	e008      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 8001272:	2304      	movs	r3, #4
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 8001276:	2303      	movs	r3, #3
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 800127a:	2302      	movs	r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x21c>
 8001282:	2300      	movs	r3, #0
 8001284:	69fa      	ldr	r2, [r7, #28]
 8001286:	f002 0203 	and.w	r2, r2, #3
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	; (800136c <HAL_GPIO_Init+0x304>)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b3a      	ldr	r3, [pc, #232]	; (800138c <HAL_GPIO_Init+0x324>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c6:	4a31      	ldr	r2, [pc, #196]	; (800138c <HAL_GPIO_Init+0x324>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_GPIO_Init+0x324>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f0:	4a26      	ldr	r2, [pc, #152]	; (800138c <HAL_GPIO_Init+0x324>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <HAL_GPIO_Init+0x324>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <HAL_GPIO_Init+0x324>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_GPIO_Init+0x324>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001344:	4a11      	ldr	r2, [pc, #68]	; (800138c <HAL_GPIO_Init+0x324>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3301      	adds	r3, #1
 800134e:	61fb      	str	r3, [r7, #28]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	f67f ae96 	bls.w	8001084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3724      	adds	r7, #36	; 0x24
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40013800 	.word	0x40013800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400
 8001378:	40020800 	.word	0x40020800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	40021000 	.word	0x40021000
 8001384:	40021400 	.word	0x40021400
 8001388:	40021800 	.word	0x40021800
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e001      	b.n	80013b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800140c:	88fb      	ldrh	r3, [r7, #6]
 800140e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fc6a 	bl	8005cec <HAL_GPIO_EXTI_Callback>
  }
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40013c00 	.word	0x40013c00

08001424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e0cc      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d90c      	bls.n	8001460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001446:	4b65      	ldr	r3, [pc, #404]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b63      	ldr	r3, [pc, #396]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b8      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001478:	4b59      	ldr	r3, [pc, #356]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a52      	ldr	r2, [pc, #328]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800149a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800149c:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	494d      	ldr	r1, [pc, #308]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d044      	beq.n	8001544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d119      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e07f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d003      	beq.n	80014e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d107      	bne.n	80014f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e2:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d109      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e06f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e067      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001502:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f023 0203 	bic.w	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4934      	ldr	r1, [pc, #208]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	4313      	orrs	r3, r2
 8001512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001514:	f7ff fc28 	bl	8000d68 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	e00a      	b.n	8001532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151c:	f7ff fc24 	bl	8000d68 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e04f      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	4b2b      	ldr	r3, [pc, #172]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 020c 	and.w	r2, r3, #12
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	d1eb      	bne.n	800151c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 030f 	and.w	r3, r3, #15
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d20c      	bcs.n	800156c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800155a:	4b20      	ldr	r3, [pc, #128]	; (80015dc <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e032      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d008      	beq.n	800158a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4916      	ldr	r1, [pc, #88]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d009      	beq.n	80015aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	490e      	ldr	r1, [pc, #56]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015aa:	f000 f887 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 80015ae:	4602      	mov	r2, r0
 80015b0:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	490a      	ldr	r1, [pc, #40]	; (80015e4 <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	5ccb      	ldrb	r3, [r1, r3]
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_RCC_ClockConfig+0x1c4>)
 80015c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_ClockConfig+0x1c8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f9f0 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023c00 	.word	0x40023c00
 80015e0:	40023800 	.word	0x40023800
 80015e4:	08007514 	.word	0x08007514
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_RCC_GetHCLKFreq+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000

08001608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800160c:	f7ff fff0 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 8001610:	4602      	mov	r2, r0
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	0a9b      	lsrs	r3, r3, #10
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	4903      	ldr	r1, [pc, #12]	; (800162c <HAL_RCC_GetPCLK1Freq+0x24>)
 800161e:	5ccb      	ldrb	r3, [r1, r3]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001624:	4618      	mov	r0, r3
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	08007524 	.word	0x08007524

08001630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001634:	f7ff ffdc 	bl	80015f0 <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	0b5b      	lsrs	r3, r3, #13
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4903      	ldr	r1, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	08007524 	.word	0x08007524

08001658 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	220f      	movs	r2, #15
 8001666:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_GetClockConfig+0x5c>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0203 	and.w	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_RCC_GetClockConfig+0x5c>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	08db      	lsrs	r3, r3, #3
 8001692:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <HAL_RCC_GetClockConfig+0x60>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 020f 	and.w	r2, r3, #15
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	601a      	str	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40023c00 	.word	0x40023c00

080016bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c0:	b0ae      	sub	sp, #184	; 0xb8
 80016c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e2:	4bcb      	ldr	r3, [pc, #812]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x354>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	f200 8206 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x440>
 80016f0:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	0800172d 	.word	0x0800172d
 80016fc:	08001afd 	.word	0x08001afd
 8001700:	08001afd 	.word	0x08001afd
 8001704:	08001afd 	.word	0x08001afd
 8001708:	08001735 	.word	0x08001735
 800170c:	08001afd 	.word	0x08001afd
 8001710:	08001afd 	.word	0x08001afd
 8001714:	08001afd 	.word	0x08001afd
 8001718:	0800173d 	.word	0x0800173d
 800171c:	08001afd 	.word	0x08001afd
 8001720:	08001afd 	.word	0x08001afd
 8001724:	08001afd 	.word	0x08001afd
 8001728:	0800192d 	.word	0x0800192d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800172c:	4bb9      	ldr	r3, [pc, #740]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x358>)
 800172e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001732:	e1e7      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001734:	4bb8      	ldr	r3, [pc, #736]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800173a:	e1e3      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800173c:	4bb4      	ldr	r3, [pc, #720]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001748:	4bb1      	ldr	r3, [pc, #708]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d071      	beq.n	8001838 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001754:	4bae      	ldr	r3, [pc, #696]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	099b      	lsrs	r3, r3, #6
 800175a:	2200      	movs	r2, #0
 800175c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001760:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001764:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800176c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800177a:	4622      	mov	r2, r4
 800177c:	462b      	mov	r3, r5
 800177e:	f04f 0000 	mov.w	r0, #0
 8001782:	f04f 0100 	mov.w	r1, #0
 8001786:	0159      	lsls	r1, r3, #5
 8001788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800178c:	0150      	lsls	r0, r2, #5
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4621      	mov	r1, r4
 8001794:	1a51      	subs	r1, r2, r1
 8001796:	6439      	str	r1, [r7, #64]	; 0x40
 8001798:	4629      	mov	r1, r5
 800179a:	eb63 0301 	sbc.w	r3, r3, r1
 800179e:	647b      	str	r3, [r7, #68]	; 0x44
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80017ac:	4649      	mov	r1, r9
 80017ae:	018b      	lsls	r3, r1, #6
 80017b0:	4641      	mov	r1, r8
 80017b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017b6:	4641      	mov	r1, r8
 80017b8:	018a      	lsls	r2, r1, #6
 80017ba:	4641      	mov	r1, r8
 80017bc:	1a51      	subs	r1, r2, r1
 80017be:	63b9      	str	r1, [r7, #56]	; 0x38
 80017c0:	4649      	mov	r1, r9
 80017c2:	eb63 0301 	sbc.w	r3, r3, r1
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80017d4:	4649      	mov	r1, r9
 80017d6:	00cb      	lsls	r3, r1, #3
 80017d8:	4641      	mov	r1, r8
 80017da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80017de:	4641      	mov	r1, r8
 80017e0:	00ca      	lsls	r2, r1, #3
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	4622      	mov	r2, r4
 80017ea:	189b      	adds	r3, r3, r2
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
 80017ee:	462b      	mov	r3, r5
 80017f0:	460a      	mov	r2, r1
 80017f2:	eb42 0303 	adc.w	r3, r2, r3
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001804:	4629      	mov	r1, r5
 8001806:	024b      	lsls	r3, r1, #9
 8001808:	4621      	mov	r1, r4
 800180a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800180e:	4621      	mov	r1, r4
 8001810:	024a      	lsls	r2, r1, #9
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800181a:	2200      	movs	r2, #0
 800181c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001820:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001824:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001828:	f7fe fd4a 	bl	80002c0 <__aeabi_uldivmod>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4613      	mov	r3, r2
 8001832:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001836:	e067      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001838:	4b75      	ldr	r3, [pc, #468]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	099b      	lsrs	r3, r3, #6
 800183e:	2200      	movs	r2, #0
 8001840:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001844:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001848:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800184c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001850:	67bb      	str	r3, [r7, #120]	; 0x78
 8001852:	2300      	movs	r3, #0
 8001854:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001856:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800185a:	4622      	mov	r2, r4
 800185c:	462b      	mov	r3, r5
 800185e:	f04f 0000 	mov.w	r0, #0
 8001862:	f04f 0100 	mov.w	r1, #0
 8001866:	0159      	lsls	r1, r3, #5
 8001868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800186c:	0150      	lsls	r0, r2, #5
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4621      	mov	r1, r4
 8001874:	1a51      	subs	r1, r2, r1
 8001876:	62b9      	str	r1, [r7, #40]	; 0x28
 8001878:	4629      	mov	r1, r5
 800187a:	eb63 0301 	sbc.w	r3, r3, r1
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800188c:	4649      	mov	r1, r9
 800188e:	018b      	lsls	r3, r1, #6
 8001890:	4641      	mov	r1, r8
 8001892:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001896:	4641      	mov	r1, r8
 8001898:	018a      	lsls	r2, r1, #6
 800189a:	4641      	mov	r1, r8
 800189c:	ebb2 0a01 	subs.w	sl, r2, r1
 80018a0:	4649      	mov	r1, r9
 80018a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80018b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018ba:	4692      	mov	sl, r2
 80018bc:	469b      	mov	fp, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	eb1a 0303 	adds.w	r3, sl, r3
 80018c4:	623b      	str	r3, [r7, #32]
 80018c6:	462b      	mov	r3, r5
 80018c8:	eb4b 0303 	adc.w	r3, fp, r3
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018da:	4629      	mov	r1, r5
 80018dc:	028b      	lsls	r3, r1, #10
 80018de:	4621      	mov	r1, r4
 80018e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e4:	4621      	mov	r1, r4
 80018e6:	028a      	lsls	r2, r1, #10
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018f0:	2200      	movs	r2, #0
 80018f2:	673b      	str	r3, [r7, #112]	; 0x70
 80018f4:	677a      	str	r2, [r7, #116]	; 0x74
 80018f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80018fa:	f7fe fce1 	bl	80002c0 <__aeabi_uldivmod>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4613      	mov	r3, r2
 8001904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001908:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	0c1b      	lsrs	r3, r3, #16
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	3301      	adds	r3, #1
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800191a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800191e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800192a:	e0eb      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x354>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d06b      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001944:	4b32      	ldr	r3, [pc, #200]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x354>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	099b      	lsrs	r3, r3, #6
 800194a:	2200      	movs	r2, #0
 800194c:	66bb      	str	r3, [r7, #104]	; 0x68
 800194e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001956:	663b      	str	r3, [r7, #96]	; 0x60
 8001958:	2300      	movs	r3, #0
 800195a:	667b      	str	r3, [r7, #100]	; 0x64
 800195c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001960:	4622      	mov	r2, r4
 8001962:	462b      	mov	r3, r5
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	0159      	lsls	r1, r3, #5
 800196e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001972:	0150      	lsls	r0, r2, #5
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4621      	mov	r1, r4
 800197a:	1a51      	subs	r1, r2, r1
 800197c:	61b9      	str	r1, [r7, #24]
 800197e:	4629      	mov	r1, r5
 8001980:	eb63 0301 	sbc.w	r3, r3, r1
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001992:	4659      	mov	r1, fp
 8001994:	018b      	lsls	r3, r1, #6
 8001996:	4651      	mov	r1, sl
 8001998:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199c:	4651      	mov	r1, sl
 800199e:	018a      	lsls	r2, r1, #6
 80019a0:	4651      	mov	r1, sl
 80019a2:	ebb2 0801 	subs.w	r8, r2, r1
 80019a6:	4659      	mov	r1, fp
 80019a8:	eb63 0901 	sbc.w	r9, r3, r1
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c0:	4690      	mov	r8, r2
 80019c2:	4699      	mov	r9, r3
 80019c4:	4623      	mov	r3, r4
 80019c6:	eb18 0303 	adds.w	r3, r8, r3
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	462b      	mov	r3, r5
 80019ce:	eb49 0303 	adc.w	r3, r9, r3
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80019e0:	4629      	mov	r1, r5
 80019e2:	024b      	lsls	r3, r1, #9
 80019e4:	4621      	mov	r1, r4
 80019e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019ea:	4621      	mov	r1, r4
 80019ec:	024a      	lsls	r2, r1, #9
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019f6:	2200      	movs	r2, #0
 80019f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80019fa:	65fa      	str	r2, [r7, #92]	; 0x5c
 80019fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001a00:	f7fe fc5e 	bl	80002c0 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a0e:	e065      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x420>
 8001a10:	40023800 	.word	0x40023800
 8001a14:	00f42400 	.word	0x00f42400
 8001a18:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1c:	4b3d      	ldr	r3, [pc, #244]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x458>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	099b      	lsrs	r3, r3, #6
 8001a22:	2200      	movs	r2, #0
 8001a24:	4618      	mov	r0, r3
 8001a26:	4611      	mov	r1, r2
 8001a28:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a2c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a2e:	2300      	movs	r3, #0
 8001a30:	657b      	str	r3, [r7, #84]	; 0x54
 8001a32:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a36:	4642      	mov	r2, r8
 8001a38:	464b      	mov	r3, r9
 8001a3a:	f04f 0000 	mov.w	r0, #0
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	0159      	lsls	r1, r3, #5
 8001a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a48:	0150      	lsls	r0, r2, #5
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4641      	mov	r1, r8
 8001a50:	1a51      	subs	r1, r2, r1
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	4649      	mov	r1, r9
 8001a56:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a68:	4659      	mov	r1, fp
 8001a6a:	018b      	lsls	r3, r1, #6
 8001a6c:	4651      	mov	r1, sl
 8001a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a72:	4651      	mov	r1, sl
 8001a74:	018a      	lsls	r2, r1, #6
 8001a76:	4651      	mov	r1, sl
 8001a78:	1a54      	subs	r4, r2, r1
 8001a7a:	4659      	mov	r1, fp
 8001a7c:	eb63 0501 	sbc.w	r5, r3, r1
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	00eb      	lsls	r3, r5, #3
 8001a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a8e:	00e2      	lsls	r2, r4, #3
 8001a90:	4614      	mov	r4, r2
 8001a92:	461d      	mov	r5, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	18e3      	adds	r3, r4, r3
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	eb45 0303 	adc.w	r3, r5, r3
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aae:	4629      	mov	r1, r5
 8001ab0:	028b      	lsls	r3, r1, #10
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab8:	4621      	mov	r1, r4
 8001aba:	028a      	lsls	r2, r1, #10
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ac8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001aca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ace:	f7fe fbf7 	bl	80002c0 <__aeabi_uldivmod>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	0f1b      	lsrs	r3, r3, #28
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001afa:	e003      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	37b8      	adds	r7, #184	; 0xb8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400

08001b1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e28d      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8083 	beq.w	8001c42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b3c:	4b94      	ldr	r3, [pc, #592]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d019      	beq.n	8001b7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b48:	4b91      	ldr	r3, [pc, #580]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b54:	4b8e      	ldr	r3, [pc, #568]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b60:	d00c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d112      	bne.n	8001b94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b7a:	d10b      	bne.n	8001b94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d05b      	beq.n	8001c40 <HAL_RCC_OscConfig+0x124>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d157      	bne.n	8001c40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e25a      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9c:	d106      	bne.n	8001bac <HAL_RCC_OscConfig+0x90>
 8001b9e:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7b      	ldr	r2, [pc, #492]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e01d      	b.n	8001be8 <HAL_RCC_OscConfig+0xcc>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xb4>
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a75      	ldr	r2, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a72      	ldr	r2, [pc, #456]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0xcc>
 8001bd0:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d013      	beq.n	8001c18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f8ba 	bl	8000d68 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f8b6 	bl	8000d68 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e21f      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xdc>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff f8a6 	bl	8000d68 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff f8a2 	bl	8000d68 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e20b      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	4b57      	ldr	r3, [pc, #348]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x104>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d06f      	beq.n	8001d2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c4e:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d017      	beq.n	8001c8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c5a:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b44      	ldr	r3, [pc, #272]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x186>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e1d3      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4937      	ldr	r1, [pc, #220]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e03a      	b.n	8001d2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_RCC_OscConfig+0x278>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f84f 	bl	8000d68 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff f84b 	bl	8000d68 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e1b4      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4925      	ldr	r1, [pc, #148]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_RCC_OscConfig+0x278>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f82e 	bl	8000d68 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff f82a 	bl	8000d68 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e193      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d036      	beq.n	8001da8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d016      	beq.n	8001d70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7ff f80e 	bl	8000d68 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff f80a 	bl	8000d68 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e173      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_OscConfig+0x274>)
 8001d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x234>
 8001d6e:	e01b      	b.n	8001da8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7fe fff7 	bl	8000d68 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	e00e      	b.n	8001d9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7e:	f7fe fff3 	bl	8000d68 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d907      	bls.n	8001d9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e15c      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
 8001d90:	40023800 	.word	0x40023800
 8001d94:	42470000 	.word	0x42470000
 8001d98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9c:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1ea      	bne.n	8001d7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 8097 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db6:	2300      	movs	r3, #0
 8001db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dba:	4b83      	ldr	r3, [pc, #524]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a7e      	ldr	r2, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b7c      	ldr	r3, [pc, #496]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b79      	ldr	r3, [pc, #484]	; (8001fcc <HAL_RCC_OscConfig+0x4b0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d118      	bne.n	8001e24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x4b0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x4b0>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe ffb3 	bl	8000d68 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7fe ffaf 	bl	8000d68 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e118      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b6c      	ldr	r3, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x4b0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x31e>
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	4a65      	ldr	r2, [pc, #404]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6713      	str	r3, [r2, #112]	; 0x70
 8001e38:	e01c      	b.n	8001e74 <HAL_RCC_OscConfig+0x358>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x340>
 8001e42:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	4a60      	ldr	r2, [pc, #384]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4e:	4b5e      	ldr	r3, [pc, #376]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	4a5d      	ldr	r2, [pc, #372]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0x358>
 8001e5c:	4b5a      	ldr	r3, [pc, #360]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	4a59      	ldr	r2, [pc, #356]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e62:	f023 0301 	bic.w	r3, r3, #1
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	4a56      	ldr	r2, [pc, #344]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	f023 0304 	bic.w	r3, r3, #4
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d015      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7fe ff74 	bl	8000d68 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7fe ff70 	bl	8000d68 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0d7      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	4b4b      	ldr	r3, [pc, #300]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0ee      	beq.n	8001e84 <HAL_RCC_OscConfig+0x368>
 8001ea6:	e014      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7fe ff5e 	bl	8000d68 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7fe ff5a 	bl	8000d68 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e0c1      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec6:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ee      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b3b      	ldr	r3, [pc, #236]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	4a3a      	ldr	r2, [pc, #232]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 80ad 	beq.w	8002048 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d060      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d145      	bne.n	8001f8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_RCC_OscConfig+0x4b4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe ff2e 	bl	8000d68 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7fe ff2a 	bl	8000d68 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e093      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69da      	ldr	r2, [r3, #28]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	3b01      	subs	r3, #1
 8001f48:	041b      	lsls	r3, r3, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	071b      	lsls	r3, r3, #28
 8001f5a:	491b      	ldr	r1, [pc, #108]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_OscConfig+0x4b4>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7fe feff 	bl	8000d68 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe fefb 	bl	8000d68 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e064      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x452>
 8001f8c:	e05c      	b.n	8002048 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_RCC_OscConfig+0x4b4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe fee8 	bl	8000d68 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7fe fee4 	bl	8000d68 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e04d      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_RCC_OscConfig+0x4ac>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x480>
 8001fba:	e045      	b.n	8002048 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e040      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <HAL_RCC_OscConfig+0x538>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d030      	beq.n	8002044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d129      	bne.n	8002044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d122      	bne.n	8002044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002004:	4013      	ands	r3, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800200a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800200c:	4293      	cmp	r3, r2
 800200e:	d119      	bne.n	8002044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	3b01      	subs	r3, #1
 800201e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d10f      	bne.n	8002044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e041      	b.n	80020ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f839 	bl	80020f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2202      	movs	r2, #2
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3304      	adds	r3, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4610      	mov	r0, r2
 8002098:	f000 f9d8 	bl	800244c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
	...

0800210c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d001      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e04e      	b.n	80021c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d022      	beq.n	800218c <HAL_TIM_Base_Start_IT+0x80>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214e:	d01d      	beq.n	800218c <HAL_TIM_Base_Start_IT+0x80>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d018      	beq.n	800218c <HAL_TIM_Base_Start_IT+0x80>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <HAL_TIM_Base_Start_IT+0x80>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_TIM_Base_Start_IT+0xd0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00e      	beq.n	800218c <HAL_TIM_Base_Start_IT+0x80>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_TIM_Base_Start_IT+0x80>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d004      	beq.n	800218c <HAL_TIM_Base_Start_IT+0x80>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d111      	bne.n	80021b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b06      	cmp	r3, #6
 800219c:	d010      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0201 	orr.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ae:	e007      	b.n	80021c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800
 80021dc:	40000c00 	.word	0x40000c00
 80021e0:	40010400 	.word	0x40010400
 80021e4:	40014000 	.word	0x40014000
 80021e8:	40001800 	.word	0x40001800

080021ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d122      	bne.n	8002248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b02      	cmp	r3, #2
 800220e:	d11b      	bne.n	8002248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0202 	mvn.w	r2, #2
 8002218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f8ee 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8e0 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f8f1 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b04      	cmp	r3, #4
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b04      	cmp	r3, #4
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0204 	mvn.w	r2, #4
 800226c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8c4 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8b6 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f8c7 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d122      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d11b      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0208 	mvn.w	r2, #8
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2204      	movs	r2, #4
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f89a 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f88c 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f89d 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d122      	bne.n	8002344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b10      	cmp	r3, #16
 800230a:	d11b      	bne.n	8002344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0210 	mvn.w	r2, #16
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2208      	movs	r2, #8
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f870 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f862 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f873 	bl	8002424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0201 	mvn.w	r2, #1
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fa8c 	bl	8000888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b80      	cmp	r3, #128	; 0x80
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b80      	cmp	r3, #128	; 0x80
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f902 	bl	80025a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f838 	bl	8002438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0220 	mvn.w	r2, #32
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8cc 	bl	800258c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a40      	ldr	r2, [pc, #256]	; (8002560 <TIM_Base_SetConfig+0x114>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d013      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246a:	d00f      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a3d      	ldr	r2, [pc, #244]	; (8002564 <TIM_Base_SetConfig+0x118>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00b      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3c      	ldr	r2, [pc, #240]	; (8002568 <TIM_Base_SetConfig+0x11c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3b      	ldr	r2, [pc, #236]	; (800256c <TIM_Base_SetConfig+0x120>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d003      	beq.n	800248c <TIM_Base_SetConfig+0x40>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3a      	ldr	r2, [pc, #232]	; (8002570 <TIM_Base_SetConfig+0x124>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d108      	bne.n	800249e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a2f      	ldr	r2, [pc, #188]	; (8002560 <TIM_Base_SetConfig+0x114>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d02b      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ac:	d027      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a2c      	ldr	r2, [pc, #176]	; (8002564 <TIM_Base_SetConfig+0x118>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d023      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a2b      	ldr	r2, [pc, #172]	; (8002568 <TIM_Base_SetConfig+0x11c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d01f      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2a      	ldr	r2, [pc, #168]	; (800256c <TIM_Base_SetConfig+0x120>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01b      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a29      	ldr	r2, [pc, #164]	; (8002570 <TIM_Base_SetConfig+0x124>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d017      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a28      	ldr	r2, [pc, #160]	; (8002574 <TIM_Base_SetConfig+0x128>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a27      	ldr	r2, [pc, #156]	; (8002578 <TIM_Base_SetConfig+0x12c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00f      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a26      	ldr	r2, [pc, #152]	; (800257c <TIM_Base_SetConfig+0x130>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00b      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <TIM_Base_SetConfig+0x134>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a24      	ldr	r2, [pc, #144]	; (8002584 <TIM_Base_SetConfig+0x138>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d003      	beq.n	80024fe <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <TIM_Base_SetConfig+0x13c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d108      	bne.n	8002510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <TIM_Base_SetConfig+0x114>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d003      	beq.n	8002544 <TIM_Base_SetConfig+0xf8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <TIM_Base_SetConfig+0x124>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d103      	bne.n	800254c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	615a      	str	r2, [r3, #20]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40010000 	.word	0x40010000
 8002564:	40000400 	.word	0x40000400
 8002568:	40000800 	.word	0x40000800
 800256c:	40000c00 	.word	0x40000c00
 8002570:	40010400 	.word	0x40010400
 8002574:	40014000 	.word	0x40014000
 8002578:	40014400 	.word	0x40014400
 800257c:	40014800 	.word	0x40014800
 8002580:	40001800 	.word	0x40001800
 8002584:	40001c00 	.word	0x40001c00
 8002588:	40002000 	.word	0x40002000

0800258c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e03f      	b.n	8002646 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe f998 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fd43 	bl	8003084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800260c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800261c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800262c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	4613      	mov	r3, r2
 800265a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b20      	cmp	r3, #32
 8002666:	d130      	bne.n	80026ca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_UART_Transmit_IT+0x26>
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e029      	b.n	80026cc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_UART_Transmit_IT+0x38>
 8002682:	2302      	movs	r3, #2
 8002684:	e022      	b.n	80026cc <HAL_UART_Transmit_IT+0x7e>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2221      	movs	r2, #33	; 0x21
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
  }
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08c      	sub	sp, #48	; 0x30
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d152      	bne.n	8002798 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e04b      	b.n	800279a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800270c:	2302      	movs	r3, #2
 800270e:	e044      	b.n	800279a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	461a      	mov	r2, r3
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fad5 	bl	8002cd4 <UART_Start_Receive_IT>
 800272a:	4603      	mov	r3, r0
 800272c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002734:	2b00      	cmp	r3, #0
 8002736:	d12c      	bne.n	8002792 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	2b01      	cmp	r3, #1
 800273e:	d125      	bne.n	800278c <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	e853 3f00 	ldrex	r3, [r3]
 8002764:	617b      	str	r3, [r7, #20]
   return(result);
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f043 0310 	orr.w	r3, r3, #16
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002776:	627a      	str	r2, [r7, #36]	; 0x24
 8002778:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277a:	6a39      	ldr	r1, [r7, #32]
 800277c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800277e:	e841 2300 	strex	r3, r2, [r1]
 8002782:	61fb      	str	r3, [r7, #28]
   return(result);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e5      	bne.n	8002756 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 800278a:	e002      	b.n	8002792 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002796:	e000      	b.n	800279a <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002798:	2302      	movs	r3, #2
  }
}
 800279a:	4618      	mov	r0, r3
 800279c:	3730      	adds	r7, #48	; 0x30
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b0ba      	sub	sp, #232	; 0xe8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80027d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80027e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10f      	bne.n	800280a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <HAL_UART_IRQHandler+0x66>
 80027f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fb83 	bl	8002f0e <UART_Receive_IT>
      return;
 8002808:	e256      	b.n	8002cb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800280a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 80de 	beq.w	80029d0 <HAL_UART_IRQHandler+0x22c>
 8002814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002824:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80d1 	beq.w	80029d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800282e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_UART_IRQHandler+0xae>
 800283a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800283e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_UART_IRQHandler+0xd2>
 800285e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f043 0202 	orr.w	r2, r3, #2
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00b      	beq.n	800289a <HAL_UART_IRQHandler+0xf6>
 8002882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f043 0204 	orr.w	r2, r3, #4
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800289a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d011      	beq.n	80028ca <HAL_UART_IRQHandler+0x126>
 80028a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d105      	bne.n	80028be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f043 0208 	orr.w	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 81ed 	beq.w	8002cae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_UART_IRQHandler+0x14e>
 80028e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fb0e 	bl	8002f0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <HAL_UART_IRQHandler+0x17a>
 8002916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d04f      	beq.n	80029be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa16 	bl	8002d50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d141      	bne.n	80029b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3314      	adds	r3, #20
 8002938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002940:	e853 3f00 	ldrex	r3, [r3]
 8002944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002948:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800294c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002950:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3314      	adds	r3, #20
 800295a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800295e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800296a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1d9      	bne.n	8002932 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002982:	2b00      	cmp	r3, #0
 8002984:	d013      	beq.n	80029ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298a:	4a7d      	ldr	r2, [pc, #500]	; (8002b80 <HAL_UART_IRQHandler+0x3dc>)
 800298c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fb46 	bl	8001024 <HAL_DMA_Abort_IT>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029a8:	4610      	mov	r0, r2
 80029aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ac:	e00e      	b.n	80029cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f002 fe32 	bl	8005618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b4:	e00a      	b.n	80029cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f002 fe2e 	bl	8005618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029bc:	e006      	b.n	80029cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f002 fe2a 	bl	8005618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80029ca:	e170      	b.n	8002cae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029cc:	bf00      	nop
    return;
 80029ce:	e16e      	b.n	8002cae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	f040 814a 	bne.w	8002c6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80029da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8143 	beq.w	8002c6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80029e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 813c 	beq.w	8002c6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60bb      	str	r3, [r7, #8]
 8002a0a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	f040 80b4 	bne.w	8002b84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8140 	beq.w	8002cb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	f080 8139 	bcs.w	8002cb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a46:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a52:	f000 8088 	beq.w	8002b66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a64:	e853 3f00 	ldrex	r3, [r3]
 8002a68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1d9      	bne.n	8002a56 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aac:	e853 3f00 	ldrex	r3, [r3]
 8002ab0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ac6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002aca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002acc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ace:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ad2:	e841 2300 	strex	r3, r2, [r1]
 8002ad6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1e1      	bne.n	8002aa2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
 8002aec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3314      	adds	r3, #20
 8002afe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e3      	bne.n	8002ade <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b2e:	e853 3f00 	ldrex	r3, [r3]
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b36:	f023 0310 	bic.w	r3, r3, #16
 8002b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	330c      	adds	r3, #12
 8002b44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b48:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b50:	e841 2300 	strex	r3, r2, [r1]
 8002b54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1e3      	bne.n	8002b24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fe f9ef 	bl	8000f44 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f002 fd59 	bl	800562e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b7c:	e099      	b.n	8002cb2 <HAL_UART_IRQHandler+0x50e>
 8002b7e:	bf00      	nop
 8002b80:	08002e17 	.word	0x08002e17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 808b 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8086 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002bce:	647a      	str	r2, [r7, #68]	; 0x44
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bd6:	e841 2300 	strex	r3, r2, [r1]
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1e3      	bne.n	8002baa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	3314      	adds	r3, #20
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	f023 0301 	bic.w	r3, r3, #1
 8002bf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3314      	adds	r3, #20
 8002c02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c06:	633a      	str	r2, [r7, #48]	; 0x30
 8002c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e3      	bne.n	8002be2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	e853 3f00 	ldrex	r3, [r3]
 8002c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0310 	bic.w	r3, r3, #16
 8002c3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	330c      	adds	r3, #12
 8002c48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002c4c:	61fa      	str	r2, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	69b9      	ldr	r1, [r7, #24]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	617b      	str	r3, [r7, #20]
   return(result);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e3      	bne.n	8002c28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c64:	4619      	mov	r1, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f002 fce1 	bl	800562e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c6c:	e023      	b.n	8002cb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_UART_IRQHandler+0x4ea>
 8002c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8d9 	bl	8002e3e <UART_Transmit_IT>
    return;
 8002c8c:	e014      	b.n	8002cb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x514>
 8002c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d008      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f919 	bl	8002ede <UART_EndTransmit_IT>
    return;
 8002cac:	e004      	b.n	8002cb8 <HAL_UART_IRQHandler+0x514>
    return;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <HAL_UART_IRQHandler+0x514>
      return;
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <HAL_UART_IRQHandler+0x514>
      return;
 8002cb6:	bf00      	nop
  }
}
 8002cb8:	37e8      	adds	r7, #232	; 0xe8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop

08002cc0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	88fa      	ldrh	r2, [r7, #6]
 8002cec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2222      	movs	r2, #34	; 0x22
 8002cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d20:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0220 	orr.w	r2, r2, #32
 8002d40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b095      	sub	sp, #84	; 0x54
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	330c      	adds	r3, #12
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d62:	e853 3f00 	ldrex	r3, [r3]
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	330c      	adds	r3, #12
 8002d76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d78:	643a      	str	r2, [r7, #64]	; 0x40
 8002d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e5      	bne.n	8002d58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3314      	adds	r3, #20
 8002d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3314      	adds	r3, #20
 8002daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002db2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db4:	e841 2300 	strex	r3, r2, [r1]
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e5      	bne.n	8002d8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d119      	bne.n	8002dfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f023 0310 	bic.w	r3, r3, #16
 8002dde:	647b      	str	r3, [r7, #68]	; 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002de8:	61ba      	str	r2, [r7, #24]
 8002dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6979      	ldr	r1, [r7, #20]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	613b      	str	r3, [r7, #16]
   return(result);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e5      	bne.n	8002dc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e0a:	bf00      	nop
 8002e0c:	3754      	adds	r7, #84	; 0x54
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f002 fbf1 	bl	8005618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b21      	cmp	r3, #33	; 0x21
 8002e50:	d13e      	bne.n	8002ed0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	d114      	bne.n	8002e86 <UART_Transmit_IT+0x48>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d110      	bne.n	8002e86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	1c9a      	adds	r2, r3, #2
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	621a      	str	r2, [r3, #32]
 8002e84:	e008      	b.n	8002e98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6211      	str	r1, [r2, #32]
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10f      	bne.n	8002ecc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e000      	b.n	8002ed2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
  }
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f002 fba4 	bl	800564c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b08c      	sub	sp, #48	; 0x30
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b22      	cmp	r3, #34	; 0x22
 8002f20:	f040 80ab 	bne.w	800307a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2c:	d117      	bne.n	8002f5e <UART_Receive_IT+0x50>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d113      	bne.n	8002f5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	1c9a      	adds	r2, r3, #2
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f5c:	e026      	b.n	8002fac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d007      	beq.n	8002f82 <UART_Receive_IT+0x74>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <UART_Receive_IT+0x82>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d106      	bne.n	8002f90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e008      	b.n	8002fa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d15a      	bne.n	8003076 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0220 	bic.w	r2, r2, #32
 8002fce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d135      	bne.n	800306c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	330c      	adds	r3, #12
 800300c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	e853 3f00 	ldrex	r3, [r3]
 8003014:	613b      	str	r3, [r7, #16]
   return(result);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f023 0310 	bic.w	r3, r3, #16
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003026:	623a      	str	r2, [r7, #32]
 8003028:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	69f9      	ldr	r1, [r7, #28]
 800302c:	6a3a      	ldr	r2, [r7, #32]
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	61bb      	str	r3, [r7, #24]
   return(result);
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e5      	bne.n	8003006 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b10      	cmp	r3, #16
 8003046:	d10a      	bne.n	800305e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f002 fae2 	bl	800562e <HAL_UARTEx_RxEventCallback>
 800306a:	e002      	b.n	8003072 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff fe27 	bl	8002cc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e002      	b.n	800307c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3730      	adds	r7, #48	; 0x30
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003088:	b0c0      	sub	sp, #256	; 0x100
 800308a:	af00      	add	r7, sp, #0
 800308c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	68d9      	ldr	r1, [r3, #12]
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	ea40 0301 	orr.w	r3, r0, r1
 80030ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030dc:	f021 010c 	bic.w	r1, r1, #12
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030ea:	430b      	orrs	r3, r1
 80030ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80030fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fe:	6999      	ldr	r1, [r3, #24]
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	ea40 0301 	orr.w	r3, r0, r1
 800310a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b8f      	ldr	r3, [pc, #572]	; (8003350 <UART_SetConfig+0x2cc>)
 8003114:	429a      	cmp	r2, r3
 8003116:	d005      	beq.n	8003124 <UART_SetConfig+0xa0>
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b8d      	ldr	r3, [pc, #564]	; (8003354 <UART_SetConfig+0x2d0>)
 8003120:	429a      	cmp	r2, r3
 8003122:	d104      	bne.n	800312e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003124:	f7fe fa84 	bl	8001630 <HAL_RCC_GetPCLK2Freq>
 8003128:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800312c:	e003      	b.n	8003136 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800312e:	f7fe fa6b 	bl	8001608 <HAL_RCC_GetPCLK1Freq>
 8003132:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003140:	f040 810c 	bne.w	800335c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003148:	2200      	movs	r2, #0
 800314a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800314e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003152:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003156:	4622      	mov	r2, r4
 8003158:	462b      	mov	r3, r5
 800315a:	1891      	adds	r1, r2, r2
 800315c:	65b9      	str	r1, [r7, #88]	; 0x58
 800315e:	415b      	adcs	r3, r3
 8003160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003162:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003166:	4621      	mov	r1, r4
 8003168:	eb12 0801 	adds.w	r8, r2, r1
 800316c:	4629      	mov	r1, r5
 800316e:	eb43 0901 	adc.w	r9, r3, r1
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800317e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003182:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003186:	4690      	mov	r8, r2
 8003188:	4699      	mov	r9, r3
 800318a:	4623      	mov	r3, r4
 800318c:	eb18 0303 	adds.w	r3, r8, r3
 8003190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003194:	462b      	mov	r3, r5
 8003196:	eb49 0303 	adc.w	r3, r9, r3
 800319a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031b2:	460b      	mov	r3, r1
 80031b4:	18db      	adds	r3, r3, r3
 80031b6:	653b      	str	r3, [r7, #80]	; 0x50
 80031b8:	4613      	mov	r3, r2
 80031ba:	eb42 0303 	adc.w	r3, r2, r3
 80031be:	657b      	str	r3, [r7, #84]	; 0x54
 80031c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031c8:	f7fd f87a 	bl	80002c0 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4b61      	ldr	r3, [pc, #388]	; (8003358 <UART_SetConfig+0x2d4>)
 80031d2:	fba3 2302 	umull	r2, r3, r3, r2
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	011c      	lsls	r4, r3, #4
 80031da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031ec:	4642      	mov	r2, r8
 80031ee:	464b      	mov	r3, r9
 80031f0:	1891      	adds	r1, r2, r2
 80031f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80031f4:	415b      	adcs	r3, r3
 80031f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80031fc:	4641      	mov	r1, r8
 80031fe:	eb12 0a01 	adds.w	sl, r2, r1
 8003202:	4649      	mov	r1, r9
 8003204:	eb43 0b01 	adc.w	fp, r3, r1
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003214:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800321c:	4692      	mov	sl, r2
 800321e:	469b      	mov	fp, r3
 8003220:	4643      	mov	r3, r8
 8003222:	eb1a 0303 	adds.w	r3, sl, r3
 8003226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800322a:	464b      	mov	r3, r9
 800322c:	eb4b 0303 	adc.w	r3, fp, r3
 8003230:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003240:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003244:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003248:	460b      	mov	r3, r1
 800324a:	18db      	adds	r3, r3, r3
 800324c:	643b      	str	r3, [r7, #64]	; 0x40
 800324e:	4613      	mov	r3, r2
 8003250:	eb42 0303 	adc.w	r3, r2, r3
 8003254:	647b      	str	r3, [r7, #68]	; 0x44
 8003256:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800325a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800325e:	f7fd f82f 	bl	80002c0 <__aeabi_uldivmod>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4611      	mov	r1, r2
 8003268:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <UART_SetConfig+0x2d4>)
 800326a:	fba3 2301 	umull	r2, r3, r3, r1
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2264      	movs	r2, #100	; 0x64
 8003272:	fb02 f303 	mul.w	r3, r2, r3
 8003276:	1acb      	subs	r3, r1, r3
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <UART_SetConfig+0x2d4>)
 8003280:	fba3 2302 	umull	r2, r3, r3, r2
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800328c:	441c      	add	r4, r3
 800328e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003298:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800329c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032a0:	4642      	mov	r2, r8
 80032a2:	464b      	mov	r3, r9
 80032a4:	1891      	adds	r1, r2, r2
 80032a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80032a8:	415b      	adcs	r3, r3
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032b0:	4641      	mov	r1, r8
 80032b2:	1851      	adds	r1, r2, r1
 80032b4:	6339      	str	r1, [r7, #48]	; 0x30
 80032b6:	4649      	mov	r1, r9
 80032b8:	414b      	adcs	r3, r1
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032c8:	4659      	mov	r1, fp
 80032ca:	00cb      	lsls	r3, r1, #3
 80032cc:	4651      	mov	r1, sl
 80032ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032d2:	4651      	mov	r1, sl
 80032d4:	00ca      	lsls	r2, r1, #3
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	4642      	mov	r2, r8
 80032de:	189b      	adds	r3, r3, r2
 80032e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e4:	464b      	mov	r3, r9
 80032e6:	460a      	mov	r2, r1
 80032e8:	eb42 0303 	adc.w	r3, r2, r3
 80032ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003304:	460b      	mov	r3, r1
 8003306:	18db      	adds	r3, r3, r3
 8003308:	62bb      	str	r3, [r7, #40]	; 0x28
 800330a:	4613      	mov	r3, r2
 800330c:	eb42 0303 	adc.w	r3, r2, r3
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003312:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003316:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800331a:	f7fc ffd1 	bl	80002c0 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <UART_SetConfig+0x2d4>)
 8003324:	fba3 1302 	umull	r1, r3, r3, r2
 8003328:	095b      	lsrs	r3, r3, #5
 800332a:	2164      	movs	r1, #100	; 0x64
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	3332      	adds	r3, #50	; 0x32
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <UART_SetConfig+0x2d4>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	f003 0207 	and.w	r2, r3, #7
 8003342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4422      	add	r2, r4
 800334a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800334c:	e106      	b.n	800355c <UART_SetConfig+0x4d8>
 800334e:	bf00      	nop
 8003350:	40011000 	.word	0x40011000
 8003354:	40011400 	.word	0x40011400
 8003358:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800335c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003360:	2200      	movs	r2, #0
 8003362:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003366:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800336a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800336e:	4642      	mov	r2, r8
 8003370:	464b      	mov	r3, r9
 8003372:	1891      	adds	r1, r2, r2
 8003374:	6239      	str	r1, [r7, #32]
 8003376:	415b      	adcs	r3, r3
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800337e:	4641      	mov	r1, r8
 8003380:	1854      	adds	r4, r2, r1
 8003382:	4649      	mov	r1, r9
 8003384:	eb43 0501 	adc.w	r5, r3, r1
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	00eb      	lsls	r3, r5, #3
 8003392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003396:	00e2      	lsls	r2, r4, #3
 8003398:	4614      	mov	r4, r2
 800339a:	461d      	mov	r5, r3
 800339c:	4643      	mov	r3, r8
 800339e:	18e3      	adds	r3, r4, r3
 80033a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033a4:	464b      	mov	r3, r9
 80033a6:	eb45 0303 	adc.w	r3, r5, r3
 80033aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033ca:	4629      	mov	r1, r5
 80033cc:	008b      	lsls	r3, r1, #2
 80033ce:	4621      	mov	r1, r4
 80033d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033d4:	4621      	mov	r1, r4
 80033d6:	008a      	lsls	r2, r1, #2
 80033d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033dc:	f7fc ff70 	bl	80002c0 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4b60      	ldr	r3, [pc, #384]	; (8003568 <UART_SetConfig+0x4e4>)
 80033e6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	011c      	lsls	r4, r3, #4
 80033ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80033fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003400:	4642      	mov	r2, r8
 8003402:	464b      	mov	r3, r9
 8003404:	1891      	adds	r1, r2, r2
 8003406:	61b9      	str	r1, [r7, #24]
 8003408:	415b      	adcs	r3, r3
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003410:	4641      	mov	r1, r8
 8003412:	1851      	adds	r1, r2, r1
 8003414:	6139      	str	r1, [r7, #16]
 8003416:	4649      	mov	r1, r9
 8003418:	414b      	adcs	r3, r1
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003428:	4659      	mov	r1, fp
 800342a:	00cb      	lsls	r3, r1, #3
 800342c:	4651      	mov	r1, sl
 800342e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003432:	4651      	mov	r1, sl
 8003434:	00ca      	lsls	r2, r1, #3
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	4603      	mov	r3, r0
 800343c:	4642      	mov	r2, r8
 800343e:	189b      	adds	r3, r3, r2
 8003440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003444:	464b      	mov	r3, r9
 8003446:	460a      	mov	r2, r1
 8003448:	eb42 0303 	adc.w	r3, r2, r3
 800344c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	67bb      	str	r3, [r7, #120]	; 0x78
 800345a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003468:	4649      	mov	r1, r9
 800346a:	008b      	lsls	r3, r1, #2
 800346c:	4641      	mov	r1, r8
 800346e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003472:	4641      	mov	r1, r8
 8003474:	008a      	lsls	r2, r1, #2
 8003476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800347a:	f7fc ff21 	bl	80002c0 <__aeabi_uldivmod>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4611      	mov	r1, r2
 8003484:	4b38      	ldr	r3, [pc, #224]	; (8003568 <UART_SetConfig+0x4e4>)
 8003486:	fba3 2301 	umull	r2, r3, r3, r1
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2264      	movs	r2, #100	; 0x64
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	1acb      	subs	r3, r1, r3
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	3332      	adds	r3, #50	; 0x32
 8003498:	4a33      	ldr	r2, [pc, #204]	; (8003568 <UART_SetConfig+0x4e4>)
 800349a:	fba2 2303 	umull	r2, r3, r2, r3
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a4:	441c      	add	r4, r3
 80034a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034aa:	2200      	movs	r2, #0
 80034ac:	673b      	str	r3, [r7, #112]	; 0x70
 80034ae:	677a      	str	r2, [r7, #116]	; 0x74
 80034b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034b4:	4642      	mov	r2, r8
 80034b6:	464b      	mov	r3, r9
 80034b8:	1891      	adds	r1, r2, r2
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	415b      	adcs	r3, r3
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034c4:	4641      	mov	r1, r8
 80034c6:	1851      	adds	r1, r2, r1
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	4649      	mov	r1, r9
 80034cc:	414b      	adcs	r3, r1
 80034ce:	607b      	str	r3, [r7, #4]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034dc:	4659      	mov	r1, fp
 80034de:	00cb      	lsls	r3, r1, #3
 80034e0:	4651      	mov	r1, sl
 80034e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034e6:	4651      	mov	r1, sl
 80034e8:	00ca      	lsls	r2, r1, #3
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	4642      	mov	r2, r8
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80034f6:	464b      	mov	r3, r9
 80034f8:	460a      	mov	r2, r1
 80034fa:	eb42 0303 	adc.w	r3, r2, r3
 80034fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	663b      	str	r3, [r7, #96]	; 0x60
 800350a:	667a      	str	r2, [r7, #100]	; 0x64
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003518:	4649      	mov	r1, r9
 800351a:	008b      	lsls	r3, r1, #2
 800351c:	4641      	mov	r1, r8
 800351e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003522:	4641      	mov	r1, r8
 8003524:	008a      	lsls	r2, r1, #2
 8003526:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800352a:	f7fc fec9 	bl	80002c0 <__aeabi_uldivmod>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <UART_SetConfig+0x4e4>)
 8003534:	fba3 1302 	umull	r1, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	3332      	adds	r3, #50	; 0x32
 8003546:	4a08      	ldr	r2, [pc, #32]	; (8003568 <UART_SetConfig+0x4e4>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	f003 020f 	and.w	r2, r3, #15
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4422      	add	r2, r4
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003562:	46bd      	mov	sp, r7
 8003564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003568:	51eb851f 	.word	0x51eb851f

0800356c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800357a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800357e:	2b84      	cmp	r3, #132	; 0x84
 8003580:	d005      	beq.n	800358e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003582:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	3303      	adds	r3, #3
 800358c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800358e:	68fb      	ldr	r3, [r7, #12]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80035a0:	f000 fea6 	bl	80042f0 <vTaskStartScheduler>
  
  return osOK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	bd80      	pop	{r7, pc}

080035aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80035aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ac:	b089      	sub	sp, #36	; 0x24
 80035ae:	af04      	add	r7, sp, #16
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d020      	beq.n	80035fe <osThreadCreate+0x54>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01c      	beq.n	80035fe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685c      	ldr	r4, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691e      	ldr	r6, [r3, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7ff ffc8 	bl	800356c <makeFreeRtosPriority>
 80035dc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035e6:	9202      	str	r2, [sp, #8]
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	9100      	str	r1, [sp, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4632      	mov	r2, r6
 80035f0:	4629      	mov	r1, r5
 80035f2:	4620      	mov	r0, r4
 80035f4:	f000 fc9e 	bl	8003f34 <xTaskCreateStatic>
 80035f8:	4603      	mov	r3, r0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e01c      	b.n	8003638 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685c      	ldr	r4, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800360a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ffaa 	bl	800356c <makeFreeRtosPriority>
 8003618:	4602      	mov	r2, r0
 800361a:	f107 030c 	add.w	r3, r7, #12
 800361e:	9301      	str	r3, [sp, #4]
 8003620:	9200      	str	r2, [sp, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	4632      	mov	r2, r6
 8003626:	4629      	mov	r1, r5
 8003628:	4620      	mov	r0, r4
 800362a:	f000 fce0 	bl	8003fee <xTaskCreate>
 800362e:	4603      	mov	r3, r0
 8003630:	2b01      	cmp	r3, #1
 8003632:	d001      	beq.n	8003638 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003638:	68fb      	ldr	r3, [r7, #12]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003642 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <osDelay+0x16>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	e000      	b.n	800365a <osDelay+0x18>
 8003658:	2301      	movs	r3, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fe14 	bl	8004288 <vTaskDelay>
  
  return osOK;
 8003660:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f103 0208 	add.w	r2, r3, #8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f04f 32ff 	mov.w	r2, #4294967295
 8003682:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f103 0208 	add.w	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f103 0208 	add.w	r2, r3, #8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d103      	bne.n	800372c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e00c      	b.n	8003746 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3308      	adds	r3, #8
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e002      	b.n	800373a <vListInsert+0x2e>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d2f6      	bcs.n	8003734 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	601a      	str	r2, [r3, #0]
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6892      	ldr	r2, [r2, #8]
 8003794:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6852      	ldr	r2, [r2, #4]
 800379e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d103      	bne.n	80037b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	1e5a      	subs	r2, r3, #1
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
	...

080037d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80037fa:	bf00      	nop
 80037fc:	e7fe      	b.n	80037fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80037fe:	f001 fbd1 	bl	8004fa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	68f9      	ldr	r1, [r7, #12]
 800380c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	441a      	add	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382e:	3b01      	subs	r3, #1
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	441a      	add	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	22ff      	movs	r2, #255	; 0xff
 8003842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d114      	bne.n	800387e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01a      	beq.n	8003892 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3310      	adds	r3, #16
 8003860:	4618      	mov	r0, r3
 8003862:	f000 ffa7 	bl	80047b4 <xTaskRemoveFromEventList>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <xQueueGenericReset+0xcc>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	e009      	b.n	8003892 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3310      	adds	r3, #16
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fef1 	bl	800366a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3324      	adds	r3, #36	; 0x24
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff feec 	bl	800366a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003892:	f001 fbb7 	bl	8005004 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	e000ed04 	.word	0xe000ed04

080038a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af02      	add	r7, sp, #8
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	613b      	str	r3, [r7, #16]
}
 80038ca:	bf00      	nop
 80038cc:	e7fe      	b.n	80038cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3348      	adds	r3, #72	; 0x48
 80038dc:	4618      	mov	r0, r3
 80038de:	f001 fc43 	bl	8005168 <pvPortMalloc>
 80038e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d011      	beq.n	800390e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3348      	adds	r3, #72	; 0x48
 80038f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038fc:	79fa      	ldrb	r2, [r7, #7]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f805 	bl	8003918 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800390e:	69bb      	ldr	r3, [r7, #24]
	}
 8003910:	4618      	mov	r0, r3
 8003912:	3720      	adds	r7, #32
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	e002      	b.n	800393a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003946:	2101      	movs	r1, #1
 8003948:	69b8      	ldr	r0, [r7, #24]
 800394a:	f7ff ff43 	bl	80037d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08e      	sub	sp, #56	; 0x38
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003966:	2300      	movs	r3, #0
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <xQueueGenericSend+0x32>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003986:	bf00      	nop
 8003988:	e7fe      	b.n	8003988 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <xQueueGenericSend+0x40>
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <xQueueGenericSend+0x44>
 8003998:	2301      	movs	r3, #1
 800399a:	e000      	b.n	800399e <xQueueGenericSend+0x46>
 800399c:	2300      	movs	r3, #0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <xQueueGenericSend+0x60>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d103      	bne.n	80039c6 <xQueueGenericSend+0x6e>
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <xQueueGenericSend+0x72>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <xQueueGenericSend+0x74>
 80039ca:	2300      	movs	r3, #0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10a      	bne.n	80039e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	623b      	str	r3, [r7, #32]
}
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039e6:	f001 f8a5 	bl	8004b34 <xTaskGetSchedulerState>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <xQueueGenericSend+0x9e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <xQueueGenericSend+0xa2>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <xQueueGenericSend+0xa4>
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <xQueueGenericSend+0xbe>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	61fb      	str	r3, [r7, #28]
}
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a16:	f001 fac5 	bl	8004fa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d302      	bcc.n	8003a2c <xQueueGenericSend+0xd4>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d129      	bne.n	8003a80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a32:	f000 f96f 	bl	8003d14 <prvCopyDataToQueue>
 8003a36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d010      	beq.n	8003a62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	3324      	adds	r3, #36	; 0x24
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 feb5 	bl	80047b4 <xTaskRemoveFromEventList>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a50:	4b3f      	ldr	r3, [pc, #252]	; (8003b50 <xQueueGenericSend+0x1f8>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	e00a      	b.n	8003a78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a68:	4b39      	ldr	r3, [pc, #228]	; (8003b50 <xQueueGenericSend+0x1f8>)
 8003a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a78:	f001 fac4 	bl	8005004 <vPortExitCritical>
				return pdPASS;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e063      	b.n	8003b48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d103      	bne.n	8003a8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a86:	f001 fabd 	bl	8005004 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e05c      	b.n	8003b48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a94:	f107 0314 	add.w	r3, r7, #20
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 feed 	bl	8004878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aa2:	f001 faaf 	bl	8005004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aa6:	f000 fc8d 	bl	80043c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aaa:	f001 fa7b 	bl	8004fa4 <vPortEnterCritical>
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab4:	b25b      	sxtb	r3, r3
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d103      	bne.n	8003ac4 <xQueueGenericSend+0x16c>
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aca:	b25b      	sxtb	r3, r3
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d103      	bne.n	8003ada <xQueueGenericSend+0x182>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ada:	f001 fa93 	bl	8005004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ade:	1d3a      	adds	r2, r7, #4
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fedc 	bl	80048a4 <xTaskCheckForTimeOut>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d124      	bne.n	8003b3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003af4:	f000 fa06 	bl	8003f04 <prvIsQueueFull>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d018      	beq.n	8003b30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	3310      	adds	r3, #16
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fe30 	bl	800476c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0e:	f000 f991 	bl	8003e34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b12:	f000 fc65 	bl	80043e0 <xTaskResumeAll>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f47f af7c 	bne.w	8003a16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <xQueueGenericSend+0x1f8>)
 8003b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	e772      	b.n	8003a16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b32:	f000 f97f 	bl	8003e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b36:	f000 fc53 	bl	80043e0 <xTaskResumeAll>
 8003b3a:	e76c      	b.n	8003a16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b3e:	f000 f979 	bl	8003e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b42:	f000 fc4d 	bl	80043e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3738      	adds	r7, #56	; 0x38
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <xQueueReceive+0x30>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	623b      	str	r3, [r7, #32]
}
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <xQueueReceive+0x3e>
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <xQueueReceive+0x42>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <xQueueReceive+0x44>
 8003b96:	2300      	movs	r3, #0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10a      	bne.n	8003bb2 <xQueueReceive+0x5e>
	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	61fb      	str	r3, [r7, #28]
}
 8003bae:	bf00      	nop
 8003bb0:	e7fe      	b.n	8003bb0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bb2:	f000 ffbf 	bl	8004b34 <xTaskGetSchedulerState>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d102      	bne.n	8003bc2 <xQueueReceive+0x6e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <xQueueReceive+0x72>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <xQueueReceive+0x74>
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10a      	bne.n	8003be2 <xQueueReceive+0x8e>
	__asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	61bb      	str	r3, [r7, #24]
}
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003be2:	f001 f9df 	bl	8004fa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d01f      	beq.n	8003c32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bf6:	f000 f8f7 	bl	8003de8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	1e5a      	subs	r2, r3, #1
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00f      	beq.n	8003c2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	3310      	adds	r3, #16
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fdd0 	bl	80047b4 <xTaskRemoveFromEventList>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c1a:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <xQueueReceive+0x1bc>)
 8003c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c2a:	f001 f9eb 	bl	8005004 <vPortExitCritical>
				return pdPASS;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e069      	b.n	8003d06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c38:	f001 f9e4 	bl	8005004 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e062      	b.n	8003d06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c46:	f107 0310 	add.w	r3, r7, #16
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fe14 	bl	8004878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c50:	2301      	movs	r3, #1
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c54:	f001 f9d6 	bl	8005004 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c58:	f000 fbb4 	bl	80043c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c5c:	f001 f9a2 	bl	8004fa4 <vPortEnterCritical>
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d103      	bne.n	8003c76 <xQueueReceive+0x122>
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c82:	d103      	bne.n	8003c8c <xQueueReceive+0x138>
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c8c:	f001 f9ba 	bl	8005004 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c90:	1d3a      	adds	r2, r7, #4
 8003c92:	f107 0310 	add.w	r3, r7, #16
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fe03 	bl	80048a4 <xTaskCheckForTimeOut>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d123      	bne.n	8003cec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca6:	f000 f917 	bl	8003ed8 <prvIsQueueEmpty>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d017      	beq.n	8003ce0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	3324      	adds	r3, #36	; 0x24
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd57 	bl	800476c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cc0:	f000 f8b8 	bl	8003e34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cc4:	f000 fb8c 	bl	80043e0 <xTaskResumeAll>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d189      	bne.n	8003be2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003cce:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <xQueueReceive+0x1bc>)
 8003cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	e780      	b.n	8003be2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ce2:	f000 f8a7 	bl	8003e34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ce6:	f000 fb7b 	bl	80043e0 <xTaskResumeAll>
 8003cea:	e77a      	b.n	8003be2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cee:	f000 f8a1 	bl	8003e34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cf2:	f000 fb75 	bl	80043e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf8:	f000 f8ee 	bl	8003ed8 <prvIsQueueEmpty>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f43f af6f 	beq.w	8003be2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3730      	adds	r7, #48	; 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	e000ed04 	.word	0xe000ed04

08003d14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10d      	bne.n	8003d4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d14d      	bne.n	8003dd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 ff16 	bl	8004b70 <xTaskPriorityDisinherit>
 8003d44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	e043      	b.n	8003dd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d119      	bne.n	8003d88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6858      	ldr	r0, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	f002 fb98 	bl	8006494 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	441a      	add	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d32b      	bcc.n	8003dd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	e026      	b.n	8003dd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68d8      	ldr	r0, [r3, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	461a      	mov	r2, r3
 8003d92:	68b9      	ldr	r1, [r7, #8]
 8003d94:	f002 fb7e 	bl	8006494 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	425b      	negs	r3, r3
 8003da2:	441a      	add	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d207      	bcs.n	8003dc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	425b      	negs	r3, r3
 8003dbe:	441a      	add	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d105      	bne.n	8003dd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003dde:	697b      	ldr	r3, [r7, #20]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d018      	beq.n	8003e2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	441a      	add	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d303      	bcc.n	8003e1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68d9      	ldr	r1, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	461a      	mov	r2, r3
 8003e26:	6838      	ldr	r0, [r7, #0]
 8003e28:	f002 fb34 	bl	8006494 <memcpy>
	}
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e3c:	f001 f8b2 	bl	8004fa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e48:	e011      	b.n	8003e6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d012      	beq.n	8003e78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3324      	adds	r3, #36	; 0x24
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fcac 	bl	80047b4 <xTaskRemoveFromEventList>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e62:	f000 fd81 	bl	8004968 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	dce9      	bgt.n	8003e4a <prvUnlockQueue+0x16>
 8003e76:	e000      	b.n	8003e7a <prvUnlockQueue+0x46>
					break;
 8003e78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	22ff      	movs	r2, #255	; 0xff
 8003e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e82:	f001 f8bf 	bl	8005004 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e86:	f001 f88d 	bl	8004fa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e92:	e011      	b.n	8003eb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fc87 	bl	80047b4 <xTaskRemoveFromEventList>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003eac:	f000 fd5c 	bl	8004968 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003eb0:	7bbb      	ldrb	r3, [r7, #14]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	dce9      	bgt.n	8003e94 <prvUnlockQueue+0x60>
 8003ec0:	e000      	b.n	8003ec4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ec2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	22ff      	movs	r2, #255	; 0xff
 8003ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ecc:	f001 f89a 	bl	8005004 <vPortExitCritical>
}
 8003ed0:	bf00      	nop
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ee0:	f001 f860 	bl	8004fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e001      	b.n	8003ef6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ef6:	f001 f885 	bl	8005004 <vPortExitCritical>

	return xReturn;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f0c:	f001 f84a 	bl	8004fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d102      	bne.n	8003f22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e001      	b.n	8003f26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f26:	f001 f86d 	bl	8005004 <vPortExitCritical>

	return xReturn;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08e      	sub	sp, #56	; 0x38
 8003f38:	af04      	add	r7, sp, #16
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	623b      	str	r3, [r7, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xTaskCreateStatic+0x46>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	61fb      	str	r3, [r7, #28]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f7a:	23a0      	movs	r3, #160	; 0xa0
 8003f7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2ba0      	cmp	r3, #160	; 0xa0
 8003f82:	d00a      	beq.n	8003f9a <xTaskCreateStatic+0x66>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	61bb      	str	r3, [r7, #24]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01e      	beq.n	8003fe0 <xTaskCreateStatic+0xac>
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fba:	2300      	movs	r3, #0
 8003fbc:	9303      	str	r3, [sp, #12]
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	9302      	str	r3, [sp, #8]
 8003fc2:	f107 0314 	add.w	r3, r7, #20
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f850 	bl	8004078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fda:	f000 f8eb 	bl	80041b4 <prvAddNewTaskToReadyList>
 8003fde:	e001      	b.n	8003fe4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003fe4:	697b      	ldr	r3, [r7, #20]
	}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3728      	adds	r7, #40	; 0x28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b08c      	sub	sp, #48	; 0x30
 8003ff2:	af04      	add	r7, sp, #16
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4618      	mov	r0, r3
 8004004:	f001 f8b0 	bl	8005168 <pvPortMalloc>
 8004008:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00e      	beq.n	800402e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004010:	20a0      	movs	r0, #160	; 0xa0
 8004012:	f001 f8a9 	bl	8005168 <pvPortMalloc>
 8004016:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
 8004024:	e005      	b.n	8004032 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004026:	6978      	ldr	r0, [r7, #20]
 8004028:	f001 f96a 	bl	8005300 <vPortFree>
 800402c:	e001      	b.n	8004032 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d017      	beq.n	8004068 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	2300      	movs	r3, #0
 8004044:	9303      	str	r3, [sp, #12]
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	9302      	str	r3, [sp, #8]
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 f80e 	bl	8004078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800405c:	69f8      	ldr	r0, [r7, #28]
 800405e:	f000 f8a9 	bl	80041b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004062:	2301      	movs	r3, #1
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e002      	b.n	800406e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295
 800406c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800406e:	69bb      	ldr	r3, [r7, #24]
	}
 8004070:	4618      	mov	r0, r3
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004090:	3b01      	subs	r3, #1
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f023 0307 	bic.w	r3, r3, #7
 800409e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	617b      	str	r3, [r7, #20]
}
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01f      	beq.n	8004106 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
 80040ca:	e012      	b.n	80040f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	4413      	add	r3, r2
 80040d2:	7819      	ldrb	r1, [r3, #0]
 80040d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	4413      	add	r3, r2
 80040da:	3334      	adds	r3, #52	; 0x34
 80040dc:	460a      	mov	r2, r1
 80040de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	4413      	add	r3, r2
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d006      	beq.n	80040fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	3301      	adds	r3, #1
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b0f      	cmp	r3, #15
 80040f6:	d9e9      	bls.n	80040cc <prvInitialiseNewTask+0x54>
 80040f8:	e000      	b.n	80040fc <prvInitialiseNewTask+0x84>
			{
				break;
 80040fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004104:	e003      	b.n	800410e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004110:	2b06      	cmp	r3, #6
 8004112:	d901      	bls.n	8004118 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004114:	2306      	movs	r3, #6
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004122:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	2200      	movs	r2, #0
 8004128:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412c:	3304      	adds	r3, #4
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff fabb 	bl	80036aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004136:	3318      	adds	r3, #24
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fab6 	bl	80036aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004142:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	f1c3 0207 	rsb	r2, r3, #7
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004152:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	2200      	movs	r2, #0
 8004158:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	2200      	movs	r2, #0
 8004160:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	334c      	adds	r3, #76	; 0x4c
 8004168:	224c      	movs	r2, #76	; 0x4c
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f002 f8c0 	bl	80062f2 <memset>
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <prvInitialiseNewTask+0x130>)
 8004176:	651a      	str	r2, [r3, #80]	; 0x50
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	4a0c      	ldr	r2, [pc, #48]	; (80041ac <prvInitialiseNewTask+0x134>)
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	4a0b      	ldr	r2, [pc, #44]	; (80041b0 <prvInitialiseNewTask+0x138>)
 8004182:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	68f9      	ldr	r1, [r7, #12]
 8004188:	69b8      	ldr	r0, [r7, #24]
 800418a:	f000 fddd 	bl	8004d48 <pxPortInitialiseStack>
 800418e:	4602      	mov	r2, r0
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800419e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041a0:	bf00      	nop
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	200047fc 	.word	0x200047fc
 80041ac:	20004864 	.word	0x20004864
 80041b0:	200048cc 	.word	0x200048cc

080041b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041bc:	f000 fef2 	bl	8004fa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041c0:	4b2a      	ldr	r3, [pc, #168]	; (800426c <prvAddNewTaskToReadyList+0xb8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	4a29      	ldr	r2, [pc, #164]	; (800426c <prvAddNewTaskToReadyList+0xb8>)
 80041c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <prvAddNewTaskToReadyList+0xbc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041d2:	4a27      	ldr	r2, [pc, #156]	; (8004270 <prvAddNewTaskToReadyList+0xbc>)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041d8:	4b24      	ldr	r3, [pc, #144]	; (800426c <prvAddNewTaskToReadyList+0xb8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d110      	bne.n	8004202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80041e0:	f000 fbe6 	bl	80049b0 <prvInitialiseTaskLists>
 80041e4:	e00d      	b.n	8004202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80041e6:	4b23      	ldr	r3, [pc, #140]	; (8004274 <prvAddNewTaskToReadyList+0xc0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <prvAddNewTaskToReadyList+0xbc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d802      	bhi.n	8004202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80041fc:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <prvAddNewTaskToReadyList+0xbc>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <prvAddNewTaskToReadyList+0xc4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3301      	adds	r3, #1
 8004208:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <prvAddNewTaskToReadyList+0xc4>)
 800420a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	4b19      	ldr	r3, [pc, #100]	; (800427c <prvAddNewTaskToReadyList+0xc8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4313      	orrs	r3, r2
 800421a:	4a18      	ldr	r2, [pc, #96]	; (800427c <prvAddNewTaskToReadyList+0xc8>)
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4a15      	ldr	r2, [pc, #84]	; (8004280 <prvAddNewTaskToReadyList+0xcc>)
 800422c:	441a      	add	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7ff fa45 	bl	80036c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800423a:	f000 fee3 	bl	8005004 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800423e:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <prvAddNewTaskToReadyList+0xc0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00e      	beq.n	8004264 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004246:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <prvAddNewTaskToReadyList+0xbc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	429a      	cmp	r2, r3
 8004252:	d207      	bcs.n	8004264 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <prvAddNewTaskToReadyList+0xd0>)
 8004256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000514 	.word	0x20000514
 8004270:	20000414 	.word	0x20000414
 8004274:	20000520 	.word	0x20000520
 8004278:	20000530 	.word	0x20000530
 800427c:	2000051c 	.word	0x2000051c
 8004280:	20000418 	.word	0x20000418
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d017      	beq.n	80042ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800429a:	4b13      	ldr	r3, [pc, #76]	; (80042e8 <vTaskDelay+0x60>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <vTaskDelay+0x30>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	60bb      	str	r3, [r7, #8]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042b8:	f000 f884 	bl	80043c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042bc:	2100      	movs	r1, #0
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fcdc 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042c4:	f000 f88c 	bl	80043e0 <xTaskResumeAll>
 80042c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <vTaskDelay+0x64>)
 80042d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	2000053c 	.word	0x2000053c
 80042ec:	e000ed04 	.word	0xe000ed04

080042f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80042fe:	463a      	mov	r2, r7
 8004300:	1d39      	adds	r1, r7, #4
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc f958 	bl	80005bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	9202      	str	r2, [sp, #8]
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	2300      	movs	r3, #0
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	2300      	movs	r3, #0
 800431c:	460a      	mov	r2, r1
 800431e:	4921      	ldr	r1, [pc, #132]	; (80043a4 <vTaskStartScheduler+0xb4>)
 8004320:	4821      	ldr	r0, [pc, #132]	; (80043a8 <vTaskStartScheduler+0xb8>)
 8004322:	f7ff fe07 	bl	8003f34 <xTaskCreateStatic>
 8004326:	4603      	mov	r3, r0
 8004328:	4a20      	ldr	r2, [pc, #128]	; (80043ac <vTaskStartScheduler+0xbc>)
 800432a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800432c:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <vTaskStartScheduler+0xbc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004334:	2301      	movs	r3, #1
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e001      	b.n	800433e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d11b      	bne.n	800437c <vTaskStartScheduler+0x8c>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	613b      	str	r3, [r7, #16]
}
 8004356:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004358:	4b15      	ldr	r3, [pc, #84]	; (80043b0 <vTaskStartScheduler+0xc0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	334c      	adds	r3, #76	; 0x4c
 800435e:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <vTaskStartScheduler+0xc4>)
 8004360:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <vTaskStartScheduler+0xc8>)
 8004364:	f04f 32ff 	mov.w	r2, #4294967295
 8004368:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <vTaskStartScheduler+0xcc>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <vTaskStartScheduler+0xd0>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004376:	f000 fd73 	bl	8004e60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800437a:	e00e      	b.n	800439a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004382:	d10a      	bne.n	800439a <vTaskStartScheduler+0xaa>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <vTaskStartScheduler+0xa8>
}
 800439a:	bf00      	nop
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	08007424 	.word	0x08007424
 80043a8:	08004981 	.word	0x08004981
 80043ac:	20000538 	.word	0x20000538
 80043b0:	20000414 	.word	0x20000414
 80043b4:	200000bc 	.word	0x200000bc
 80043b8:	20000534 	.word	0x20000534
 80043bc:	20000520 	.word	0x20000520
 80043c0:	20000518 	.word	0x20000518

080043c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <vTaskSuspendAll+0x18>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	4a03      	ldr	r2, [pc, #12]	; (80043dc <vTaskSuspendAll+0x18>)
 80043d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	2000053c 	.word	0x2000053c

080043e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043ee:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <xTaskResumeAll+0x114>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <xTaskResumeAll+0x2c>
	__asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	603b      	str	r3, [r7, #0]
}
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800440c:	f000 fdca 	bl	8004fa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004410:	4b38      	ldr	r3, [pc, #224]	; (80044f4 <xTaskResumeAll+0x114>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3b01      	subs	r3, #1
 8004416:	4a37      	ldr	r2, [pc, #220]	; (80044f4 <xTaskResumeAll+0x114>)
 8004418:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800441a:	4b36      	ldr	r3, [pc, #216]	; (80044f4 <xTaskResumeAll+0x114>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d161      	bne.n	80044e6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004422:	4b35      	ldr	r3, [pc, #212]	; (80044f8 <xTaskResumeAll+0x118>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d05d      	beq.n	80044e6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800442a:	e02e      	b.n	800448a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800442c:	4b33      	ldr	r3, [pc, #204]	; (80044fc <xTaskResumeAll+0x11c>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3318      	adds	r3, #24
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff f9a0 	bl	800377e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3304      	adds	r3, #4
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff f99b 	bl	800377e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	2201      	movs	r2, #1
 800444e:	409a      	lsls	r2, r3
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <xTaskResumeAll+0x120>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4313      	orrs	r3, r2
 8004456:	4a2a      	ldr	r2, [pc, #168]	; (8004500 <xTaskResumeAll+0x120>)
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a27      	ldr	r2, [pc, #156]	; (8004504 <xTaskResumeAll+0x124>)
 8004468:	441a      	add	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7ff f927 	bl	80036c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <xTaskResumeAll+0x128>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	429a      	cmp	r2, r3
 8004482:	d302      	bcc.n	800448a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004484:	4b21      	ldr	r3, [pc, #132]	; (800450c <xTaskResumeAll+0x12c>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800448a:	4b1c      	ldr	r3, [pc, #112]	; (80044fc <xTaskResumeAll+0x11c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1cc      	bne.n	800442c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d001      	beq.n	800449c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004498:	f000 fb2c 	bl	8004af4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800449c:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <xTaskResumeAll+0x130>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d010      	beq.n	80044ca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044a8:	f000 f846 	bl	8004538 <xTaskIncrementTick>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044b2:	4b16      	ldr	r3, [pc, #88]	; (800450c <xTaskResumeAll+0x12c>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f1      	bne.n	80044a8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80044c4:	4b12      	ldr	r3, [pc, #72]	; (8004510 <xTaskResumeAll+0x130>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <xTaskResumeAll+0x12c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044d2:	2301      	movs	r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <xTaskResumeAll+0x134>)
 80044d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044e6:	f000 fd8d 	bl	8005004 <vPortExitCritical>

	return xAlreadyYielded;
 80044ea:	68bb      	ldr	r3, [r7, #8]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	2000053c 	.word	0x2000053c
 80044f8:	20000514 	.word	0x20000514
 80044fc:	200004d4 	.word	0x200004d4
 8004500:	2000051c 	.word	0x2000051c
 8004504:	20000418 	.word	0x20000418
 8004508:	20000414 	.word	0x20000414
 800450c:	20000528 	.word	0x20000528
 8004510:	20000524 	.word	0x20000524
 8004514:	e000ed04 	.word	0xe000ed04

08004518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <xTaskGetTickCount+0x1c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004524:	687b      	ldr	r3, [r7, #4]
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20000518 	.word	0x20000518

08004538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004542:	4b4e      	ldr	r3, [pc, #312]	; (800467c <xTaskIncrementTick+0x144>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 808e 	bne.w	8004668 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800454c:	4b4c      	ldr	r3, [pc, #304]	; (8004680 <xTaskIncrementTick+0x148>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004554:	4a4a      	ldr	r2, [pc, #296]	; (8004680 <xTaskIncrementTick+0x148>)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d120      	bne.n	80045a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004560:	4b48      	ldr	r3, [pc, #288]	; (8004684 <xTaskIncrementTick+0x14c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <xTaskIncrementTick+0x48>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	603b      	str	r3, [r7, #0]
}
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <xTaskIncrementTick+0x46>
 8004580:	4b40      	ldr	r3, [pc, #256]	; (8004684 <xTaskIncrementTick+0x14c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	4b40      	ldr	r3, [pc, #256]	; (8004688 <xTaskIncrementTick+0x150>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a3e      	ldr	r2, [pc, #248]	; (8004684 <xTaskIncrementTick+0x14c>)
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	4a3e      	ldr	r2, [pc, #248]	; (8004688 <xTaskIncrementTick+0x150>)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b3d      	ldr	r3, [pc, #244]	; (800468c <xTaskIncrementTick+0x154>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	4a3c      	ldr	r2, [pc, #240]	; (800468c <xTaskIncrementTick+0x154>)
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	f000 faa9 	bl	8004af4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045a2:	4b3b      	ldr	r3, [pc, #236]	; (8004690 <xTaskIncrementTick+0x158>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d348      	bcc.n	800463e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <xTaskIncrementTick+0x14c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045b6:	4b36      	ldr	r3, [pc, #216]	; (8004690 <xTaskIncrementTick+0x158>)
 80045b8:	f04f 32ff 	mov.w	r2, #4294967295
 80045bc:	601a      	str	r2, [r3, #0]
					break;
 80045be:	e03e      	b.n	800463e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045c0:	4b30      	ldr	r3, [pc, #192]	; (8004684 <xTaskIncrementTick+0x14c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d203      	bcs.n	80045e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045d8:	4a2d      	ldr	r2, [pc, #180]	; (8004690 <xTaskIncrementTick+0x158>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045de:	e02e      	b.n	800463e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff f8ca 	bl	800377e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d004      	beq.n	80045fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	3318      	adds	r3, #24
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff f8c1 	bl	800377e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	2201      	movs	r2, #1
 8004602:	409a      	lsls	r2, r3
 8004604:	4b23      	ldr	r3, [pc, #140]	; (8004694 <xTaskIncrementTick+0x15c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4313      	orrs	r3, r2
 800460a:	4a22      	ldr	r2, [pc, #136]	; (8004694 <xTaskIncrementTick+0x15c>)
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4a1f      	ldr	r2, [pc, #124]	; (8004698 <xTaskIncrementTick+0x160>)
 800461c:	441a      	add	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	3304      	adds	r3, #4
 8004622:	4619      	mov	r1, r3
 8004624:	4610      	mov	r0, r2
 8004626:	f7ff f84d 	bl	80036c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	4b1b      	ldr	r3, [pc, #108]	; (800469c <xTaskIncrementTick+0x164>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	429a      	cmp	r2, r3
 8004636:	d3b9      	bcc.n	80045ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004638:	2301      	movs	r3, #1
 800463a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800463c:	e7b6      	b.n	80045ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800463e:	4b17      	ldr	r3, [pc, #92]	; (800469c <xTaskIncrementTick+0x164>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4914      	ldr	r1, [pc, #80]	; (8004698 <xTaskIncrementTick+0x160>)
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d901      	bls.n	800465a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <xTaskIncrementTick+0x168>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e004      	b.n	8004672 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004668:	4b0e      	ldr	r3, [pc, #56]	; (80046a4 <xTaskIncrementTick+0x16c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <xTaskIncrementTick+0x16c>)
 8004670:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004672:	697b      	ldr	r3, [r7, #20]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	2000053c 	.word	0x2000053c
 8004680:	20000518 	.word	0x20000518
 8004684:	200004cc 	.word	0x200004cc
 8004688:	200004d0 	.word	0x200004d0
 800468c:	2000052c 	.word	0x2000052c
 8004690:	20000534 	.word	0x20000534
 8004694:	2000051c 	.word	0x2000051c
 8004698:	20000418 	.word	0x20000418
 800469c:	20000414 	.word	0x20000414
 80046a0:	20000528 	.word	0x20000528
 80046a4:	20000524 	.word	0x20000524

080046a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046ae:	4b29      	ldr	r3, [pc, #164]	; (8004754 <vTaskSwitchContext+0xac>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046b6:	4b28      	ldr	r3, [pc, #160]	; (8004758 <vTaskSwitchContext+0xb0>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046bc:	e044      	b.n	8004748 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <vTaskSwitchContext+0xb0>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <vTaskSwitchContext+0xb4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046d2:	7afb      	ldrb	r3, [r7, #11]
 80046d4:	f1c3 031f 	rsb	r3, r3, #31
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	4921      	ldr	r1, [pc, #132]	; (8004760 <vTaskSwitchContext+0xb8>)
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <vTaskSwitchContext+0x5c>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	607b      	str	r3, [r7, #4]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <vTaskSwitchContext+0x5a>
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4a14      	ldr	r2, [pc, #80]	; (8004760 <vTaskSwitchContext+0xb8>)
 8004710:	4413      	add	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3308      	adds	r3, #8
 8004726:	429a      	cmp	r2, r3
 8004728:	d104      	bne.n	8004734 <vTaskSwitchContext+0x8c>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	4a0a      	ldr	r2, [pc, #40]	; (8004764 <vTaskSwitchContext+0xbc>)
 800473c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <vTaskSwitchContext+0xbc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	334c      	adds	r3, #76	; 0x4c
 8004744:	4a08      	ldr	r2, [pc, #32]	; (8004768 <vTaskSwitchContext+0xc0>)
 8004746:	6013      	str	r3, [r2, #0]
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	2000053c 	.word	0x2000053c
 8004758:	20000528 	.word	0x20000528
 800475c:	2000051c 	.word	0x2000051c
 8004760:	20000418 	.word	0x20000418
 8004764:	20000414 	.word	0x20000414
 8004768:	200000bc 	.word	0x200000bc

0800476c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	60fb      	str	r3, [r7, #12]
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <vTaskPlaceOnEventList+0x44>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3318      	adds	r3, #24
 8004798:	4619      	mov	r1, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fe ffb6 	bl	800370c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047a0:	2101      	movs	r1, #1
 80047a2:	6838      	ldr	r0, [r7, #0]
 80047a4:	f000 fa6a 	bl	8004c7c <prvAddCurrentTaskToDelayedList>
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000414 	.word	0x20000414

080047b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	60fb      	str	r3, [r7, #12]
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	3318      	adds	r3, #24
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe ffca 	bl	800377e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <xTaskRemoveFromEventList+0xac>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d11c      	bne.n	800482c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3304      	adds	r3, #4
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe ffc1 	bl	800377e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	2201      	movs	r2, #1
 8004802:	409a      	lsls	r2, r3
 8004804:	4b17      	ldr	r3, [pc, #92]	; (8004864 <xTaskRemoveFromEventList+0xb0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4313      	orrs	r3, r2
 800480a:	4a16      	ldr	r2, [pc, #88]	; (8004864 <xTaskRemoveFromEventList+0xb0>)
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4a13      	ldr	r2, [pc, #76]	; (8004868 <xTaskRemoveFromEventList+0xb4>)
 800481c:	441a      	add	r2, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3304      	adds	r3, #4
 8004822:	4619      	mov	r1, r3
 8004824:	4610      	mov	r0, r2
 8004826:	f7fe ff4d 	bl	80036c4 <vListInsertEnd>
 800482a:	e005      	b.n	8004838 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3318      	adds	r3, #24
 8004830:	4619      	mov	r1, r3
 8004832:	480e      	ldr	r0, [pc, #56]	; (800486c <xTaskRemoveFromEventList+0xb8>)
 8004834:	f7fe ff46 	bl	80036c4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <xTaskRemoveFromEventList+0xbc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	429a      	cmp	r2, r3
 8004844:	d905      	bls.n	8004852 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004846:	2301      	movs	r3, #1
 8004848:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800484a:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <xTaskRemoveFromEventList+0xc0>)
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	e001      	b.n	8004856 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004856:	697b      	ldr	r3, [r7, #20]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	2000053c 	.word	0x2000053c
 8004864:	2000051c 	.word	0x2000051c
 8004868:	20000418 	.word	0x20000418
 800486c:	200004d4 	.word	0x200004d4
 8004870:	20000414 	.word	0x20000414
 8004874:	20000528 	.word	0x20000528

08004878 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <vTaskInternalSetTimeOutState+0x24>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <vTaskInternalSetTimeOutState+0x28>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	605a      	str	r2, [r3, #4]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	2000052c 	.word	0x2000052c
 80048a0:	20000518 	.word	0x20000518

080048a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	613b      	str	r3, [r7, #16]
}
 80048c6:	bf00      	nop
 80048c8:	e7fe      	b.n	80048c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	60fb      	str	r3, [r7, #12]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80048e6:	f000 fb5d 	bl	8004fa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048ea:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <xTaskCheckForTimeOut+0xbc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d102      	bne.n	800490a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	e023      	b.n	8004952 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <xTaskCheckForTimeOut+0xc0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d007      	beq.n	8004926 <xTaskCheckForTimeOut+0x82>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	d302      	bcc.n	8004926 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e015      	b.n	8004952 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	429a      	cmp	r2, r3
 800492e:	d20b      	bcs.n	8004948 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1ad2      	subs	r2, r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ff9b 	bl	8004878 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
 8004946:	e004      	b.n	8004952 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800494e:	2301      	movs	r3, #1
 8004950:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004952:	f000 fb57 	bl	8005004 <vPortExitCritical>

	return xReturn;
 8004956:	69fb      	ldr	r3, [r7, #28]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000518 	.word	0x20000518
 8004964:	2000052c 	.word	0x2000052c

08004968 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800496c:	4b03      	ldr	r3, [pc, #12]	; (800497c <vTaskMissedYield+0x14>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000528 	.word	0x20000528

08004980 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004988:	f000 f852 	bl	8004a30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <prvIdleTask+0x28>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d9f9      	bls.n	8004988 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <prvIdleTask+0x2c>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80049a4:	e7f0      	b.n	8004988 <prvIdleTask+0x8>
 80049a6:	bf00      	nop
 80049a8:	20000418 	.word	0x20000418
 80049ac:	e000ed04 	.word	0xe000ed04

080049b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	e00c      	b.n	80049d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <prvInitialiseTaskLists+0x60>)
 80049c8:	4413      	add	r3, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fe fe4d 	bl	800366a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3301      	adds	r3, #1
 80049d4:	607b      	str	r3, [r7, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b06      	cmp	r3, #6
 80049da:	d9ef      	bls.n	80049bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049dc:	480d      	ldr	r0, [pc, #52]	; (8004a14 <prvInitialiseTaskLists+0x64>)
 80049de:	f7fe fe44 	bl	800366a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049e2:	480d      	ldr	r0, [pc, #52]	; (8004a18 <prvInitialiseTaskLists+0x68>)
 80049e4:	f7fe fe41 	bl	800366a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049e8:	480c      	ldr	r0, [pc, #48]	; (8004a1c <prvInitialiseTaskLists+0x6c>)
 80049ea:	f7fe fe3e 	bl	800366a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049ee:	480c      	ldr	r0, [pc, #48]	; (8004a20 <prvInitialiseTaskLists+0x70>)
 80049f0:	f7fe fe3b 	bl	800366a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049f4:	480b      	ldr	r0, [pc, #44]	; (8004a24 <prvInitialiseTaskLists+0x74>)
 80049f6:	f7fe fe38 	bl	800366a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <prvInitialiseTaskLists+0x78>)
 80049fc:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <prvInitialiseTaskLists+0x64>)
 80049fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <prvInitialiseTaskLists+0x7c>)
 8004a02:	4a05      	ldr	r2, [pc, #20]	; (8004a18 <prvInitialiseTaskLists+0x68>)
 8004a04:	601a      	str	r2, [r3, #0]
}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000418 	.word	0x20000418
 8004a14:	200004a4 	.word	0x200004a4
 8004a18:	200004b8 	.word	0x200004b8
 8004a1c:	200004d4 	.word	0x200004d4
 8004a20:	200004e8 	.word	0x200004e8
 8004a24:	20000500 	.word	0x20000500
 8004a28:	200004cc 	.word	0x200004cc
 8004a2c:	200004d0 	.word	0x200004d0

08004a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a36:	e019      	b.n	8004a6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a38:	f000 fab4 	bl	8004fa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a3c:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <prvCheckTasksWaitingTermination+0x50>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fe fe98 	bl	800377e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <prvCheckTasksWaitingTermination+0x54>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <prvCheckTasksWaitingTermination+0x54>)
 8004a56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <prvCheckTasksWaitingTermination+0x58>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <prvCheckTasksWaitingTermination+0x58>)
 8004a60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a62:	f000 facf 	bl	8005004 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f810 	bl	8004a8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <prvCheckTasksWaitingTermination+0x58>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e1      	bne.n	8004a38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200004e8 	.word	0x200004e8
 8004a84:	20000514 	.word	0x20000514
 8004a88:	200004fc 	.word	0x200004fc

08004a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	334c      	adds	r3, #76	; 0x4c
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f001 fc43 	bl	8006324 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d108      	bne.n	8004aba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fc27 	bl	8005300 <vPortFree>
				vPortFree( pxTCB );
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fc24 	bl	8005300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ab8:	e018      	b.n	8004aec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d103      	bne.n	8004acc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fc1b 	bl	8005300 <vPortFree>
	}
 8004aca:	e00f      	b.n	8004aec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d00a      	beq.n	8004aec <prvDeleteTCB+0x60>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60fb      	str	r3, [r7, #12]
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <prvDeleteTCB+0x5e>
	}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004afa:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <prvResetNextTaskUnblockTime+0x38>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b04:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <prvResetNextTaskUnblockTime+0x3c>)
 8004b06:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b0c:	e008      	b.n	8004b20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <prvResetNextTaskUnblockTime+0x38>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <prvResetNextTaskUnblockTime+0x3c>)
 8004b1e:	6013      	str	r3, [r2, #0]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	200004cc 	.word	0x200004cc
 8004b30:	20000534 	.word	0x20000534

08004b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <xTaskGetSchedulerState+0x34>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b42:	2301      	movs	r3, #1
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	e008      	b.n	8004b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b48:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <xTaskGetSchedulerState+0x38>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d102      	bne.n	8004b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b50:	2302      	movs	r3, #2
 8004b52:	607b      	str	r3, [r7, #4]
 8004b54:	e001      	b.n	8004b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b5a:	687b      	ldr	r3, [r7, #4]
	}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	20000520 	.word	0x20000520
 8004b6c:	2000053c 	.word	0x2000053c

08004b70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d06e      	beq.n	8004c64 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b86:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <xTaskPriorityDisinherit+0x100>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d00a      	beq.n	8004ba6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	60fb      	str	r3, [r7, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	60bb      	str	r3, [r7, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc8:	1e5a      	subs	r2, r3, #1
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d044      	beq.n	8004c64 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d140      	bne.n	8004c64 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe fdc9 	bl	800377e <uxListRemove>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d115      	bne.n	8004c1e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf6:	491f      	ldr	r1, [pc, #124]	; (8004c74 <xTaskPriorityDisinherit+0x104>)
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xTaskPriorityDisinherit+0xae>
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43da      	mvns	r2, r3
 8004c14:	4b18      	ldr	r3, [pc, #96]	; (8004c78 <xTaskPriorityDisinherit+0x108>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	4a17      	ldr	r2, [pc, #92]	; (8004c78 <xTaskPriorityDisinherit+0x108>)
 8004c1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f1c3 0207 	rsb	r2, r3, #7
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	2201      	movs	r2, #1
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <xTaskPriorityDisinherit+0x108>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <xTaskPriorityDisinherit+0x108>)
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <xTaskPriorityDisinherit+0x104>)
 8004c52:	441a      	add	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	3304      	adds	r3, #4
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f7fe fd32 	bl	80036c4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c64:	697b      	ldr	r3, [r7, #20]
	}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000414 	.word	0x20000414
 8004c74:	20000418 	.word	0x20000418
 8004c78:	2000051c 	.word	0x2000051c

08004c7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c86:	4b29      	ldr	r3, [pc, #164]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c8c:	4b28      	ldr	r3, [pc, #160]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3304      	adds	r3, #4
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fd73 	bl	800377e <uxListRemove>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10b      	bne.n	8004cb6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8004caa:	43da      	mvns	r2, r3
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cb4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d10a      	bne.n	8004cd4 <prvAddCurrentTaskToDelayedList+0x58>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc4:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	481a      	ldr	r0, [pc, #104]	; (8004d38 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cce:	f7fe fcf9 	bl	80036c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cd2:	e026      	b.n	8004d22 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d209      	bcs.n	8004d00 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7fe fd07 	bl	800370c <vListInsert>
}
 8004cfe:	e010      	b.n	8004d22 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7fe fcfd 	bl	800370c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d202      	bcs.n	8004d22 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	6013      	str	r3, [r2, #0]
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000518 	.word	0x20000518
 8004d30:	20000414 	.word	0x20000414
 8004d34:	2000051c 	.word	0x2000051c
 8004d38:	20000500 	.word	0x20000500
 8004d3c:	200004d0 	.word	0x200004d0
 8004d40:	200004cc 	.word	0x200004cc
 8004d44:	20000534 	.word	0x20000534

08004d48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	3b04      	subs	r3, #4
 8004d58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f023 0201 	bic.w	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3b04      	subs	r3, #4
 8004d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d78:	4a0c      	ldr	r2, [pc, #48]	; (8004dac <pxPortInitialiseStack+0x64>)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	3b14      	subs	r3, #20
 8004d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3b04      	subs	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f06f 0202 	mvn.w	r2, #2
 8004d96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3b20      	subs	r3, #32
 8004d9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	08004db1 	.word	0x08004db1

08004db0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <prvTaskExitError+0x54>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d00a      	beq.n	8004dda <prvTaskExitError+0x2a>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	60fb      	str	r3, [r7, #12]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <prvTaskExitError+0x28>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	60bb      	str	r3, [r7, #8]
}
 8004dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dee:	bf00      	nop
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0fc      	beq.n	8004df0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	2000000c 	.word	0x2000000c
	...

08004e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <pxCurrentTCBConst2>)
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	6808      	ldr	r0, [r1, #0]
 8004e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1a:	f380 8809 	msr	PSP, r0
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8811 	msr	BASEPRI, r0
 8004e2a:	4770      	bx	lr
 8004e2c:	f3af 8000 	nop.w

08004e30 <pxCurrentTCBConst2>:
 8004e30:	20000414 	.word	0x20000414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop

08004e38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e38:	4808      	ldr	r0, [pc, #32]	; (8004e5c <prvPortStartFirstTask+0x24>)
 8004e3a:	6800      	ldr	r0, [r0, #0]
 8004e3c:	6800      	ldr	r0, [r0, #0]
 8004e3e:	f380 8808 	msr	MSP, r0
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f380 8814 	msr	CONTROL, r0
 8004e4a:	b662      	cpsie	i
 8004e4c:	b661      	cpsie	f
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	df00      	svc	0
 8004e58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e5a:	bf00      	nop
 8004e5c:	e000ed08 	.word	0xe000ed08

08004e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e66:	4b46      	ldr	r3, [pc, #280]	; (8004f80 <xPortStartScheduler+0x120>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a46      	ldr	r2, [pc, #280]	; (8004f84 <xPortStartScheduler+0x124>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10a      	bne.n	8004e86 <xPortStartScheduler+0x26>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	613b      	str	r3, [r7, #16]
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e86:	4b3e      	ldr	r3, [pc, #248]	; (8004f80 <xPortStartScheduler+0x120>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <xPortStartScheduler+0x128>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10a      	bne.n	8004ea6 <xPortStartScheduler+0x46>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ea6:	4b39      	ldr	r3, [pc, #228]	; (8004f8c <xPortStartScheduler+0x12c>)
 8004ea8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	22ff      	movs	r2, #255	; 0xff
 8004eb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <xPortStartScheduler+0x130>)
 8004ecc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ece:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <xPortStartScheduler+0x134>)
 8004ed0:	2207      	movs	r2, #7
 8004ed2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ed4:	e009      	b.n	8004eea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	; (8004f94 <xPortStartScheduler+0x134>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	4a2d      	ldr	r2, [pc, #180]	; (8004f94 <xPortStartScheduler+0x134>)
 8004ede:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b80      	cmp	r3, #128	; 0x80
 8004ef4:	d0ef      	beq.n	8004ed6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ef6:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <xPortStartScheduler+0x134>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1c3 0307 	rsb	r3, r3, #7
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d00a      	beq.n	8004f18 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	60bb      	str	r3, [r7, #8]
}
 8004f14:	bf00      	nop
 8004f16:	e7fe      	b.n	8004f16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <xPortStartScheduler+0x134>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <xPortStartScheduler+0x134>)
 8004f20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f22:	4b1c      	ldr	r3, [pc, #112]	; (8004f94 <xPortStartScheduler+0x134>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f2a:	4a1a      	ldr	r2, [pc, #104]	; (8004f94 <xPortStartScheduler+0x134>)
 8004f2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f36:	4b18      	ldr	r3, [pc, #96]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a14      	ldr	r2, [pc, #80]	; (8004f98 <xPortStartScheduler+0x138>)
 8004f48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f4e:	f000 f8dd 	bl	800510c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <xPortStartScheduler+0x13c>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f58:	f000 f8fc 	bl	8005154 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f5c:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <xPortStartScheduler+0x140>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0f      	ldr	r2, [pc, #60]	; (8004fa0 <xPortStartScheduler+0x140>)
 8004f62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f68:	f7ff ff66 	bl	8004e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f6c:	f7ff fb9c 	bl	80046a8 <vTaskSwitchContext>
	prvTaskExitError();
 8004f70:	f7ff ff1e 	bl	8004db0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	e000ed00 	.word	0xe000ed00
 8004f84:	410fc271 	.word	0x410fc271
 8004f88:	410fc270 	.word	0x410fc270
 8004f8c:	e000e400 	.word	0xe000e400
 8004f90:	20000540 	.word	0x20000540
 8004f94:	20000544 	.word	0x20000544
 8004f98:	e000ed20 	.word	0xe000ed20
 8004f9c:	2000000c 	.word	0x2000000c
 8004fa0:	e000ef34 	.word	0xe000ef34

08004fa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	607b      	str	r3, [r7, #4]
}
 8004fbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fbe:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <vPortEnterCritical+0x58>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	4a0d      	ldr	r2, [pc, #52]	; (8004ffc <vPortEnterCritical+0x58>)
 8004fc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <vPortEnterCritical+0x58>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d10f      	bne.n	8004ff0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	; (8005000 <vPortEnterCritical+0x5c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	603b      	str	r3, [r7, #0]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <vPortEnterCritical+0x4a>
	}
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	2000000c 	.word	0x2000000c
 8005000:	e000ed04 	.word	0xe000ed04

08005004 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <vPortExitCritical+0x50>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <vPortExitCritical+0x24>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	607b      	str	r3, [r7, #4]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <vPortExitCritical+0x50>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3b01      	subs	r3, #1
 800502e:	4a09      	ldr	r2, [pc, #36]	; (8005054 <vPortExitCritical+0x50>)
 8005030:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005032:	4b08      	ldr	r3, [pc, #32]	; (8005054 <vPortExitCritical+0x50>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <vPortExitCritical+0x42>
 800503a:	2300      	movs	r3, #0
 800503c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005044:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	2000000c 	.word	0x2000000c
	...

08005060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005060:	f3ef 8009 	mrs	r0, PSP
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <pxCurrentTCBConst>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	f01e 0f10 	tst.w	lr, #16
 8005070:	bf08      	it	eq
 8005072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507a:	6010      	str	r0, [r2, #0]
 800507c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005084:	f380 8811 	msr	BASEPRI, r0
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f7ff fb0a 	bl	80046a8 <vTaskSwitchContext>
 8005094:	f04f 0000 	mov.w	r0, #0
 8005098:	f380 8811 	msr	BASEPRI, r0
 800509c:	bc09      	pop	{r0, r3}
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	6808      	ldr	r0, [r1, #0]
 80050a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a6:	f01e 0f10 	tst.w	lr, #16
 80050aa:	bf08      	it	eq
 80050ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050b0:	f380 8809 	msr	PSP, r0
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	f3af 8000 	nop.w

080050c0 <pxCurrentTCBConst>:
 80050c0:	20000414 	.word	0x20000414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop

080050c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	607b      	str	r3, [r7, #4]
}
 80050e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050e2:	f7ff fa29 	bl	8004538 <xTaskIncrementTick>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <SysTick_Handler+0x40>)
 80050ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	2300      	movs	r3, #0
 80050f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f383 8811 	msr	BASEPRI, r3
}
 80050fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	e000ed04 	.word	0xe000ed04

0800510c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005110:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <vPortSetupTimerInterrupt+0x34>)
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005116:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <vPortSetupTimerInterrupt+0x38>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <vPortSetupTimerInterrupt+0x3c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a0a      	ldr	r2, [pc, #40]	; (800514c <vPortSetupTimerInterrupt+0x40>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	4a09      	ldr	r2, [pc, #36]	; (8005150 <vPortSetupTimerInterrupt+0x44>)
 800512a:	3b01      	subs	r3, #1
 800512c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800512e:	4b04      	ldr	r3, [pc, #16]	; (8005140 <vPortSetupTimerInterrupt+0x34>)
 8005130:	2207      	movs	r2, #7
 8005132:	601a      	str	r2, [r3, #0]
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	e000e010 	.word	0xe000e010
 8005144:	e000e018 	.word	0xe000e018
 8005148:	20000000 	.word	0x20000000
 800514c:	10624dd3 	.word	0x10624dd3
 8005150:	e000e014 	.word	0xe000e014

08005154 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005154:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005164 <vPortEnableVFP+0x10>
 8005158:	6801      	ldr	r1, [r0, #0]
 800515a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800515e:	6001      	str	r1, [r0, #0]
 8005160:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005162:	bf00      	nop
 8005164:	e000ed88 	.word	0xe000ed88

08005168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005174:	f7ff f926 	bl	80043c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005178:	4b5b      	ldr	r3, [pc, #364]	; (80052e8 <pvPortMalloc+0x180>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005180:	f000 f920 	bl	80053c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005184:	4b59      	ldr	r3, [pc, #356]	; (80052ec <pvPortMalloc+0x184>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	f040 8093 	bne.w	80052b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01d      	beq.n	80051d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005198:	2208      	movs	r2, #8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d014      	beq.n	80051d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f023 0307 	bic.w	r3, r3, #7
 80051b0:	3308      	adds	r3, #8
 80051b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <pvPortMalloc+0x6c>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	617b      	str	r3, [r7, #20]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d06e      	beq.n	80052b8 <pvPortMalloc+0x150>
 80051da:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <pvPortMalloc+0x188>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d869      	bhi.n	80052b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051e4:	4b43      	ldr	r3, [pc, #268]	; (80052f4 <pvPortMalloc+0x18c>)
 80051e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051e8:	4b42      	ldr	r3, [pc, #264]	; (80052f4 <pvPortMalloc+0x18c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ee:	e004      	b.n	80051fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d903      	bls.n	800520c <pvPortMalloc+0xa4>
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f1      	bne.n	80051f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <pvPortMalloc+0x180>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	429a      	cmp	r2, r3
 8005214:	d050      	beq.n	80052b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2208      	movs	r2, #8
 800521c:	4413      	add	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	2308      	movs	r3, #8
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	429a      	cmp	r2, r3
 8005236:	d91f      	bls.n	8005278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <pvPortMalloc+0xf8>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	613b      	str	r3, [r7, #16]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005272:	69b8      	ldr	r0, [r7, #24]
 8005274:	f000 f908 	bl	8005488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <pvPortMalloc+0x188>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <pvPortMalloc+0x188>)
 8005284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <pvPortMalloc+0x188>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <pvPortMalloc+0x190>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d203      	bcs.n	800529a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <pvPortMalloc+0x188>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <pvPortMalloc+0x190>)
 8005298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <pvPortMalloc+0x184>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <pvPortMalloc+0x194>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <pvPortMalloc+0x194>)
 80052b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052b8:	f7ff f892 	bl	80043e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <pvPortMalloc+0x174>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <pvPortMalloc+0x172>
	return pvReturn;
 80052dc:	69fb      	ldr	r3, [r7, #28]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3728      	adds	r7, #40	; 0x28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20004150 	.word	0x20004150
 80052ec:	20004164 	.word	0x20004164
 80052f0:	20004154 	.word	0x20004154
 80052f4:	20004148 	.word	0x20004148
 80052f8:	20004158 	.word	0x20004158
 80052fc:	2000415c 	.word	0x2000415c

08005300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d04d      	beq.n	80053ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005312:	2308      	movs	r3, #8
 8005314:	425b      	negs	r3, r3
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <vPortFree+0xb8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <vPortFree+0x44>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60fb      	str	r3, [r7, #12]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <vPortFree+0x62>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	60bb      	str	r3, [r7, #8]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <vPortFree+0xb8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01e      	beq.n	80053ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11a      	bne.n	80053ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <vPortFree+0xb8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	43db      	mvns	r3, r3
 8005382:	401a      	ands	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005388:	f7ff f81c 	bl	80043c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <vPortFree+0xbc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4413      	add	r3, r2
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <vPortFree+0xbc>)
 8005398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800539a:	6938      	ldr	r0, [r7, #16]
 800539c:	f000 f874 	bl	8005488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <vPortFree+0xc0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	4a06      	ldr	r2, [pc, #24]	; (80053c0 <vPortFree+0xc0>)
 80053a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053aa:	f7ff f819 	bl	80043e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20004164 	.word	0x20004164
 80053bc:	20004154 	.word	0x20004154
 80053c0:	20004160 	.word	0x20004160

080053c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053d0:	4b27      	ldr	r3, [pc, #156]	; (8005470 <prvHeapInit+0xac>)
 80053d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00c      	beq.n	80053f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3307      	adds	r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <prvHeapInit+0xac>)
 80053f4:	4413      	add	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <prvHeapInit+0xb0>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <prvHeapInit+0xb0>)
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4413      	add	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005410:	2208      	movs	r2, #8
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a15      	ldr	r2, [pc, #84]	; (8005478 <prvHeapInit+0xb4>)
 8005424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <prvHeapInit+0xb4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <prvHeapInit+0xb4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <prvHeapInit+0xb4>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <prvHeapInit+0xb8>)
 8005452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <prvHeapInit+0xbc>)
 800545a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <prvHeapInit+0xc0>)
 800545e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000548 	.word	0x20000548
 8005474:	20004148 	.word	0x20004148
 8005478:	20004150 	.word	0x20004150
 800547c:	20004158 	.word	0x20004158
 8005480:	20004154 	.word	0x20004154
 8005484:	20004164 	.word	0x20004164

08005488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <prvInsertBlockIntoFreeList+0xac>)
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e002      	b.n	800549c <prvInsertBlockIntoFreeList+0x14>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d8f7      	bhi.n	8005496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4413      	add	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d108      	bne.n	80054ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	441a      	add	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d118      	bne.n	8005510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d00d      	beq.n	8005506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	441a      	add	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e008      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e003      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d002      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20004148 	.word	0x20004148
 8005538:	20004150 	.word	0x20004150

0800553c <app_init>:
/********************** external functions definition ************************/



void app_init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af02      	add	r7, sp, #8
  // drivers
  {
    eboard_init();
 8005542:	f000 f9e3 	bl	800590c <eboard_init>
  }

  QueueBtnStatus = xQueueCreate(10,sizeof(l_evento));
 8005546:	2200      	movs	r2, #0
 8005548:	2101      	movs	r1, #1
 800554a:	200a      	movs	r0, #10
 800554c:	f7fe f9aa 	bl	80038a4 <xQueueGenericCreate>
 8005550:	4603      	mov	r3, r0
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <app_init+0x84>)
 8005554:	6013      	str	r3, [r2, #0]
  configASSERT( QueueBtnStatus != NULL );
 8005556:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <app_init+0x84>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <app_init+0x38>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	603b      	str	r3, [r7, #0]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <app_init+0x36>


  // tasks
  {
    BaseType_t status;
    status = xTaskCreate(task_button, "task_button", (2 * configMINIMAL_STACK_SIZE), NULL,(tskIDLE_PRIORITY + 2UL), NULL);
 8005574:	2300      	movs	r3, #0
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	2302      	movs	r3, #2
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005582:	4910      	ldr	r1, [pc, #64]	; (80055c4 <app_init+0x88>)
 8005584:	4810      	ldr	r0, [pc, #64]	; (80055c8 <app_init+0x8c>)
 8005586:	f7fe fd32 	bl	8003fee <xTaskCreate>
 800558a:	6078      	str	r0, [r7, #4]
    while (pdPASS != status)
 800558c:	bf00      	nop
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b01      	cmp	r3, #1
 8005592:	d1fc      	bne.n	800558e <app_init+0x52>
    {
      // error
    }
    status = xTaskCreate(task_led, "task_led", (2 * configMINIMAL_STACK_SIZE), NULL,(tskIDLE_PRIORITY + 2UL), NULL);
 8005594:	2300      	movs	r3, #0
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	2302      	movs	r3, #2
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055a2:	490a      	ldr	r1, [pc, #40]	; (80055cc <app_init+0x90>)
 80055a4:	480a      	ldr	r0, [pc, #40]	; (80055d0 <app_init+0x94>)
 80055a6:	f7fe fd22 	bl	8003fee <xTaskCreate>
 80055aa:	6078      	str	r0, [r7, #4]
    while (pdPASS != status)
 80055ac:	bf00      	nop
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d1fc      	bne.n	80055ae <app_init+0x72>
    {
    	// error
	}

  }
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	2000471c 	.word	0x2000471c
 80055c4:	0800742c 	.word	0x0800742c
 80055c8:	08005d3d 	.word	0x08005d3d
 80055cc:	08007438 	.word	0x08007438
 80055d0:	08005ea9 	.word	0x08005ea9

080055d4 <euart_hal_receive>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void euart_hal_receive(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  HAL_UARTEx_ReceiveToIdle_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7fd f875 	bl	80026d8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80055ee:	bf00      	nop
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <euart_hal_send>:

void euart_hal_send(void *phardware_handle, uint8_t *pbuffer, size_t size)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_IT((UART_HandleTypeDef*)phardware_handle, pbuffer, size);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	b29b      	uxth	r3, r3
 8005606:	461a      	mov	r2, r3
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7fd f81f 	bl	800264e <HAL_UART_Transmit_IT>
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_error((void*)huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f947 	bl	80058b4 <eboard_hal_port_uart_error>
  // TODO: ¿?
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	460b      	mov	r3, r1
 8005638:	807b      	strh	r3, [r7, #2]
  eboard_hal_port_uart_rx_irq((void*)huart, size);
 800563a:	887b      	ldrh	r3, [r7, #2]
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f942 	bl	80058c8 <eboard_hal_port_uart_rx_irq>
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  eboard_hal_port_uart_tx_irq((void*)huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f949 	bl	80058ec <eboard_hal_port_uart_tx_irq>
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <eboard_hal_port_gpio_write>:

void eboard_hal_port_gpio_write(void *handle, bool value)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	460b      	mov	r3, r1
 800566c:	70fb      	strb	r3, [r7, #3]
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin(hgpio->GPIOx, hgpio->GPIO_Pin, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6858      	ldr	r0, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	891b      	ldrh	r3, [r3, #8]
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	4619      	mov	r1, r3
 800567e:	f7fb fe9f 	bl	80013c0 <HAL_GPIO_WritePin>
}
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <eboard_hal_port_gpio_read>:

bool eboard_hal_port_gpio_read(void *handle)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  driver_gpio_descriptor_t_ *hgpio = (driver_gpio_descriptor_t_*)handle;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60fb      	str	r3, [r7, #12]
  GPIO_PinState state = HAL_GPIO_ReadPin(hgpio->GPIOx, hgpio->GPIO_Pin);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	891b      	ldrh	r3, [r3, #8]
 800569e:	4619      	mov	r1, r3
 80056a0:	4610      	mov	r0, r2
 80056a2:	f7fb fe75 	bl	8001390 <HAL_GPIO_ReadPin>
 80056a6:	4603      	mov	r3, r0
 80056a8:	72fb      	strb	r3, [r7, #11]
  return (GPIO_PIN_SET == state);
 80056aa:	7afb      	ldrb	r3, [r7, #11]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	bf0c      	ite	eq
 80056b0:	2301      	moveq	r3, #1
 80056b2:	2300      	movne	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <eboard_osal_port_get_time>:

uint32_t eboard_osal_port_get_time(void)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	af00      	add	r7, sp, #0
  return (uint32_t)xTaskGetTickCount();
 80056c2:	f7fe ff29 	bl	8004518 <xTaskGetTickCount>
 80056c6:	4603      	mov	r3, r0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}

080056cc <eboard_uart_init>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void eboard_uart_init(void* phuart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	6078      	str	r0, [r7, #4]
  euart_init(pheuart_, phuart, tx_buffer_, RB_TX_BUFFER_SIZE_, rx_buffer_, RB_RX_BUFFER_SIZE_);
 80056d4:	4807      	ldr	r0, [pc, #28]	; (80056f4 <eboard_uart_init+0x28>)
 80056d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <eboard_uart_init+0x2c>)
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e4:	4a05      	ldr	r2, [pc, #20]	; (80056fc <eboard_uart_init+0x30>)
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	f000 fa84 	bl	8005bf4 <euart_init>
}
 80056ec:	bf00      	nop
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20004668 	.word	0x20004668
 80056f8:	20004568 	.word	0x20004568
 80056fc:	20004168 	.word	0x20004168

08005700 <eboard_gpio_init>:

void eboard_gpio_init(eboard_gpio_idx_t idx, void* hgpio)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	6039      	str	r1, [r7, #0]
 800570a:	71fb      	strb	r3, [r7, #7]
	gpios_[idx].hgpio = hgpio;
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	4905      	ldr	r1, [pc, #20]	; (8005724 <eboard_gpio_init+0x24>)
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000044 	.word	0x20000044

08005728 <eboard_gpio_write>:

void eboard_gpio_write(eboard_gpio_idx_t idx, bool value)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	460a      	mov	r2, r1
 8005732:	71fb      	strb	r3, [r7, #7]
 8005734:	4613      	mov	r3, r2
 8005736:	71bb      	strb	r3, [r7, #6]
  if(EBOARD_GPIO__CNT <= idx)
 8005738:	79fb      	ldrb	r3, [r7, #7]
 800573a:	2b03      	cmp	r3, #3
 800573c:	d810      	bhi.n	8005760 <eboard_gpio_write+0x38>
  {
    return;
  }

  eboard_gpio_descriptor_t_* hgpio = gpios_ + idx;
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4a0a      	ldr	r2, [pc, #40]	; (800576c <eboard_gpio_write+0x44>)
 8005744:	4413      	add	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
  if(hgpio->input)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	791b      	ldrb	r3, [r3, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <eboard_gpio_write+0x3c>
  {
    return;
  }

  eboard_hal_port_gpio_write((void*)hgpio->hgpio, value);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	79ba      	ldrb	r2, [r7, #6]
 8005756:	4611      	mov	r1, r2
 8005758:	4618      	mov	r0, r3
 800575a:	f7ff ff82 	bl	8005662 <eboard_hal_port_gpio_write>
 800575e:	e002      	b.n	8005766 <eboard_gpio_write+0x3e>
    return;
 8005760:	bf00      	nop
 8005762:	e000      	b.n	8005766 <eboard_gpio_write+0x3e>
    return;
 8005764:	bf00      	nop
}
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000044 	.word	0x20000044

08005770 <eboard_gpio_read>:

bool eboard_gpio_read(eboard_gpio_idx_t idx)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	71fb      	strb	r3, [r7, #7]
  if(EBOARD_GPIO__CNT <= idx)
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d901      	bls.n	8005784 <eboard_gpio_read+0x14>
  {
    return false;
 8005780:	2300      	movs	r3, #0
 8005782:	e00a      	b.n	800579a <eboard_gpio_read+0x2a>
  }

  eboard_gpio_descriptor_t_* hgpio = gpios_ + idx;
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4a06      	ldr	r2, [pc, #24]	; (80057a4 <eboard_gpio_read+0x34>)
 800578a:	4413      	add	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  return eboard_hal_port_gpio_read((void*)hgpio->hgpio);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff ff79 	bl	800568a <eboard_hal_port_gpio_read>
 8005798:	4603      	mov	r3, r0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000044 	.word	0x20000044

080057a8 <eboard_led_red>:

void eboard_led_red(bool value)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
  eboard_gpio_write(EBOARD_GPIO_LEDR, value);
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	4619      	mov	r1, r3
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7ff ffb6 	bl	8005728 <eboard_gpio_write>
}
 80057bc:	bf00      	nop
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <eboard_led_green>:

void eboard_led_green(bool value)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	71fb      	strb	r3, [r7, #7]
  eboard_gpio_write(EBOARD_GPIO_LEDG, value);
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	4619      	mov	r1, r3
 80057d2:	2001      	movs	r0, #1
 80057d4:	f7ff ffa8 	bl	8005728 <eboard_gpio_write>
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <eboard_uart_write>:
{
  return euart_write_buffer_len(pheuart_);
}

size_t eboard_uart_write(const uint8_t *buffer, size_t size)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  return euart_write(pheuart_, buffer, size);
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <eboard_uart_write+0x20>)
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fa21 	bl	8005c38 <euart_write>
 80057f6:	4603      	mov	r3, r0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20004668 	.word	0x20004668

08005804 <eboard_uart_swrite>:
{
  return eboard_uart_write(&byte, 1);
}

size_t eboard_uart_swrite(const char *str)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  size_t len = strlen(str);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7fa fcff 	bl	8000210 <strlen>
 8005812:	60f8      	str	r0, [r7, #12]
  if (0 == len)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <eboard_uart_swrite+0x1a>
  {
    return 0;
 800581a:	2300      	movs	r3, #0
 800581c:	e006      	b.n	800582c <eboard_uart_swrite+0x28>
  }
  return eboard_uart_write((const uint8_t*)str, len + 1);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3301      	adds	r3, #1
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff ffdb 	bl	80057e0 <eboard_uart_write>
 800582a:	4603      	mov	r3, r0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <eboard_uart_swrite_line>:

size_t eboard_uart_swrite_line(const char *str)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  size_t ret = eboard_uart_swrite(str);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7ff ffe1 	bl	8005804 <eboard_uart_swrite>
 8005842:	60f8      	str	r0, [r7, #12]
  ret += eboard_uart_swrite(NEW_LINE_);
 8005844:	4805      	ldr	r0, [pc, #20]	; (800585c <eboard_uart_swrite_line+0x28>)
 8005846:	f7ff ffdd 	bl	8005804 <eboard_uart_swrite>
 800584a:	4602      	mov	r2, r0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  return ret;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	08007444 	.word	0x08007444

08005860 <eboard_log>:
  str[ret] = '\0';
  return ret;
}

void eboard_log(const char* str)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  sprintf(elog_buffer_, "[%lu] ", eboard_osal_port_get_time());\
 8005868:	f7ff ff29 	bl	80056be <eboard_osal_port_get_time>
 800586c:	4603      	mov	r3, r0
 800586e:	461a      	mov	r2, r3
 8005870:	490b      	ldr	r1, [pc, #44]	; (80058a0 <eboard_log+0x40>)
 8005872:	480c      	ldr	r0, [pc, #48]	; (80058a4 <eboard_log+0x44>)
 8005874:	f000 fcda 	bl	800622c <siprintf>
  eboard_uart_swrite(elog_buffer_);
 8005878:	480a      	ldr	r0, [pc, #40]	; (80058a4 <eboard_log+0x44>)
 800587a:	f7ff ffc3 	bl	8005804 <eboard_uart_swrite>
  eboard_uart_swrite(str);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff ffc0 	bl	8005804 <eboard_uart_swrite>
  eboard_uart_swrite_line((elog_msg_len < (ELOG_MAXLEN - 1)) ? "" : " ...");
 8005884:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <eboard_log+0x48>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b3e      	cmp	r3, #62	; 0x3e
 800588a:	dc01      	bgt.n	8005890 <eboard_log+0x30>
 800588c:	4b07      	ldr	r3, [pc, #28]	; (80058ac <eboard_log+0x4c>)
 800588e:	e000      	b.n	8005892 <eboard_log+0x32>
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <eboard_log+0x50>)
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff ffce 	bl	8005834 <eboard_uart_swrite_line>
}
 8005898:	bf00      	nop
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	08007448 	.word	0x08007448
 80058a4:	200046b8 	.word	0x200046b8
 80058a8:	20004718 	.word	0x20004718
 80058ac:	08007450 	.word	0x08007450
 80058b0:	08007454 	.word	0x08007454

080058b4 <eboard_hal_port_uart_error>:

// port uart
void eboard_hal_port_uart_error(void* huart)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  // TODO: ¿?
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <eboard_hal_port_uart_rx_irq>:

void eboard_hal_port_uart_rx_irq(void* huart, uint16_t size)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
  euart_rx_irq(pheuart_, huart, size);
 80058d4:	4804      	ldr	r0, [pc, #16]	; (80058e8 <eboard_hal_port_uart_rx_irq+0x20>)
 80058d6:	887b      	ldrh	r3, [r7, #2]
 80058d8:	461a      	mov	r2, r3
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	f000 f9c6 	bl	8005c6c <euart_rx_irq>
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20004668 	.word	0x20004668

080058ec <eboard_hal_port_uart_tx_irq>:

void eboard_hal_port_uart_tx_irq(void* huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  euart_tx_irq(pheuart_, (void*)huart);
 80058f4:	4b04      	ldr	r3, [pc, #16]	; (8005908 <eboard_hal_port_uart_tx_irq+0x1c>)
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 f9d6 	bl	8005caa <euart_tx_irq>
}
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20004668 	.word	0x20004668

0800590c <eboard_init>:

void eboard_init(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
  eboard_uart_init((void*)p_huart_selected_);
 8005912:	4b10      	ldr	r3, [pc, #64]	; (8005954 <eboard_init+0x48>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7ff fed8 	bl	80056cc <eboard_uart_init>

  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 800591c:	2300      	movs	r3, #0
 800591e:	71fb      	strb	r3, [r7, #7]
 8005920:	e00f      	b.n	8005942 <eboard_init+0x36>
  {
    eboard_gpio_init(idx, (void*)(driver_gpios_ + idx));
 8005922:	79fa      	ldrb	r2, [r7, #7]
 8005924:	4613      	mov	r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	461a      	mov	r2, r3
 800592e:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <eboard_init+0x4c>)
 8005930:	441a      	add	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	4611      	mov	r1, r2
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fee2 	bl	8005700 <eboard_gpio_init>
  for (eboard_gpio_idx_t idx = 0; idx < EBOARD_GPIO__CNT; ++idx)
 800593c:	79fb      	ldrb	r3, [r7, #7]
 800593e:	3301      	adds	r3, #1
 8005940:	71fb      	strb	r3, [r7, #7]
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b03      	cmp	r3, #3
 8005946:	d9ec      	bls.n	8005922 <eboard_init+0x16>
  }
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000040 	.word	0x20000040
 8005958:	20000010 	.word	0x20000010

0800595c <inc_idex_>:
 */

#include "eringbuffer.h"

inline static void inc_idex_(size_t *index, size_t size)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  *index += 1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	601a      	str	r2, [r3, #0]
  if(size <= *index)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d802      	bhi.n	8005980 <inc_idex_+0x24>
  {
    *index = 0;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]
  }
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <write_byte_>:

inline static void write_byte_(eringbuffer_t *rb, uint8_t byte)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  rb->buffer[rb->w] = byte;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	78fa      	ldrb	r2, [r7, #3]
 80059a4:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->w), rb->size);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f103 020c 	add.w	r2, r3, #12
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	4619      	mov	r1, r3
 80059b2:	4610      	mov	r0, r2
 80059b4:	f7ff ffd2 	bl	800595c <inc_idex_>
  rb->len++;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	609a      	str	r2, [r3, #8]
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <read_byte_>:

inline static void read_byte_(eringbuffer_t *rb, uint8_t *byte)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  *byte = rb->buffer[rb->r];
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	781a      	ldrb	r2, [r3, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	701a      	strb	r2, [r3, #0]
  inc_idex_(&(rb->r), rb->size);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f103 0210 	add.w	r2, r3, #16
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4619      	mov	r1, r3
 80059f0:	4610      	mov	r0, r2
 80059f2:	f7ff ffb3 	bl	800595c <inc_idex_>
  rb->len--;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	1e5a      	subs	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	609a      	str	r2, [r3, #8]
}
 8005a00:	bf00      	nop
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <eringbuffer_init>:

void eringbuffer_init(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  rb->buffer = buffer;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	601a      	str	r2, [r3, #0]
  rb->size = size;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	605a      	str	r2, [r3, #4]
  rb->len = 0;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	609a      	str	r2, [r3, #8]
  rb->w = 0;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	60da      	str	r2, [r3, #12]
  rb->r = 0;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <eringbuffer_len>:
{
  return rb->size;
}

size_t eringbuffer_len(const eringbuffer_t *rb)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  return rb->len;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <eringbuffer_free>:

size_t eringbuffer_free(const eringbuffer_t *rb)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  return rb->size - rb->len;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	1ad3      	subs	r3, r2, r3
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <eringbuffer_is_full>:

bool eringbuffer_is_full(const eringbuffer_t *rb)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_free(rb));
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ffea 	bl	8005a56 <eringbuffer_free>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bf0c      	ite	eq
 8005a88:	2301      	moveq	r3, #1
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <eringbuffer_is_empty>:

bool eringbuffer_is_empty(const eringbuffer_t *rb)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  return (0 == eringbuffer_len(rb));
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7ff ffcd 	bl	8005a3e <eringbuffer_len>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bf0c      	ite	eq
 8005aaa:	2301      	moveq	r3, #1
 8005aac:	2300      	movne	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <eringbuffer_write_byte>:

size_t eringbuffer_write_byte(eringbuffer_t *rb, uint8_t byte)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	70fb      	strb	r3, [r7, #3]
  if(eringbuffer_is_full(rb))
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff ffd5 	bl	8005a74 <eringbuffer_is_full>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <eringbuffer_write_byte+0x1c>
  {
    return 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e005      	b.n	8005ae0 <eringbuffer_write_byte+0x28>
  }
  write_byte_(rb, byte);
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff ff57 	bl	800598c <write_byte_>
  return 1;
 8005ade:	2301      	movs	r3, #1
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <eringbuffer_write>:

size_t eringbuffer_write(eringbuffer_t *rb, const uint8_t *buffer, size_t size)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e00d      	b.n	8005b16 <eringbuffer_write+0x2e>
  {
    if(0 == eringbuffer_write_byte(rb, buffer[i]))
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	4619      	mov	r1, r3
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff ffd7 	bl	8005ab8 <eringbuffer_write_byte>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <eringbuffer_write+0x38>
  for(i = 0; i < size; ++i)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	3301      	adds	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d3ed      	bcc.n	8005afa <eringbuffer_write+0x12>
 8005b1e:	e000      	b.n	8005b22 <eringbuffer_write+0x3a>
    {
      break;
 8005b20:	bf00      	nop
    }
  }
  return i;
 8005b22:	697b      	ldr	r3, [r7, #20]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <eringbuffer_read_byte>:

size_t eringbuffer_read_byte(eringbuffer_t *rb, uint8_t *byte)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  if(eringbuffer_is_empty(rb))
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff ffad 	bl	8005a96 <eringbuffer_is_empty>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <eringbuffer_read_byte+0x1a>
  {
    return 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	e004      	b.n	8005b50 <eringbuffer_read_byte+0x24>
  }
  read_byte_(rb, byte);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff ff3e 	bl	80059ca <read_byte_>
  return 1;
 8005b4e:	2301      	movs	r3, #1
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <eringbuffer_read>:

size_t eringbuffer_read(eringbuffer_t *rb, uint8_t *buffer, size_t size)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  size_t i;
  for(i = 0; i < size; ++i)
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	e00c      	b.n	8005b84 <eringbuffer_read+0x2c>
  {
    if(0 == eringbuffer_read_byte(rb, buffer + i))
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	4413      	add	r3, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff ffda 	bl	8005b2c <eringbuffer_read_byte>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <eringbuffer_read+0x36>
  for(i = 0; i < size; ++i)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	3301      	adds	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d3ee      	bcc.n	8005b6a <eringbuffer_read+0x12>
 8005b8c:	e000      	b.n	8005b90 <eringbuffer_read+0x38>
    {
      break;
 8005b8e:	bf00      	nop
    }
  }
  return i;
 8005b90:	697b      	ldr	r3, [r7, #20]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <hal_receive_>:
#define pTX_BUFFER      (phandle->tx.pbuffer)
#define pRX_RB          (&(phandle->rx.rb))
#define pRX_BUFFER      (phandle->rx.pbuffer)

void hal_receive_(euart_t *phandle)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  euart_hal_receive(phandle->phardware_handle, pRX_BUFFER, EUART_HAL_BUFFER_SIZE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3340      	adds	r3, #64	; 0x40
 8005baa:	2210      	movs	r2, #16
 8005bac:	4619      	mov	r1, r3
 8005bae:	f7ff fd11 	bl	80055d4 <euart_hal_receive>
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <hal_send_>:

void hal_send_(euart_t *phandle)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  size_t tx_len = eringbuffer_read(pTX_RB, pTX_BUFFER, EUART_HAL_BUFFER_SIZE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f103 0008 	add.w	r0, r3, #8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	331c      	adds	r3, #28
 8005bcc:	2210      	movs	r2, #16
 8005bce:	4619      	mov	r1, r3
 8005bd0:	f7ff ffc2 	bl	8005b58 <eringbuffer_read>
 8005bd4:	60f8      	str	r0, [r7, #12]
  euart_hal_send(phandle->phardware_handle, pTX_BUFFER, tx_len);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	331c      	adds	r3, #28
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4619      	mov	r1, r3
 8005be2:	f7ff fd08 	bl	80055f6 <euart_hal_send>
  phandle->tx_free = false;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	711a      	strb	r2, [r3, #4]
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <euart_init>:

void euart_init(euart_t *phandle, void* phardware_handle, uint8_t* ptx_buffer, size_t tx_buffer_size, uint8_t* prx_buffer, size_t rx_buffer_size)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
  phandle->phardware_handle = phardware_handle;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	601a      	str	r2, [r3, #0]
  eringbuffer_init(pTX_RB, ptx_buffer, tx_buffer_size);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff fef9 	bl	8005a08 <eringbuffer_init>
  eringbuffer_init(pRX_RB, prx_buffer, rx_buffer_size);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	332c      	adds	r3, #44	; 0x2c
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	69b9      	ldr	r1, [r7, #24]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff fef2 	bl	8005a08 <eringbuffer_init>
  phandle->tx_free = true;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	711a      	strb	r2, [r3, #4]

  hal_receive_(phandle);
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff ffb5 	bl	8005b9a <hal_receive_>
}
 8005c30:	bf00      	nop
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <euart_write>:
{
  return eringbuffer_len(pTX_RB);
}

size_t euart_write(euart_t *phandle, const uint8_t *buffer, size_t size)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  size_t ret =  eringbuffer_write(pTX_RB, buffer, size);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3308      	adds	r3, #8
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff ff4b 	bl	8005ae8 <eringbuffer_write>
 8005c52:	6178      	str	r0, [r7, #20]
  if(phandle->tx_free)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	791b      	ldrb	r3, [r3, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <euart_write+0x2a>
  {
    hal_send_(phandle);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff ffac 	bl	8005bba <hal_send_>
  }
  return ret;
 8005c62:	697b      	ldr	r3, [r7, #20]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <euart_rx_irq>:
{
  return eringbuffer_read(pRX_RB, buffer, size);
}

void euart_rx_irq(euart_t *phandle, void *phardware_handle, size_t size)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  if(phandle->phardware_handle != phardware_handle)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d10f      	bne.n	8005ca2 <euart_rx_irq+0x36>
  {
    return;
  }

  if(0 < size)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <euart_rx_irq+0x2e>
  {
    eringbuffer_write(pRX_RB, pRX_BUFFER, size);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3340      	adds	r3, #64	; 0x40
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4619      	mov	r1, r3
 8005c96:	f7ff ff27 	bl	8005ae8 <eringbuffer_write>
  }
  hal_receive_(phandle);
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ff7d 	bl	8005b9a <hal_receive_>
 8005ca0:	e000      	b.n	8005ca4 <euart_rx_irq+0x38>
    return;
 8005ca2:	bf00      	nop
}
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <euart_tx_irq>:

void euart_tx_irq(euart_t *phandle, void *phardware_handle)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	6039      	str	r1, [r7, #0]
  phandle->tx_free = true;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	711a      	strb	r2, [r3, #4]
  if(phandle->phardware_handle != phardware_handle)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d10e      	bne.n	8005ce2 <euart_tx_irq+0x38>
  {
    return;
  }

  if(!eringbuffer_is_empty(pTX_RB))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7ff fee4 	bl	8005a96 <eringbuffer_is_empty>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f083 0301 	eor.w	r3, r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <euart_tx_irq+0x3a>
  {
    hal_send_(phandle);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff ff6d 	bl	8005bba <hal_send_>
 8005ce0:	e000      	b.n	8005ce4 <euart_tx_irq+0x3a>
    return;
 8005ce2:	bf00      	nop
  }
}
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <HAL_GPIO_EXTI_Callback>:
void procces_button(led_event_t *evento);



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	80fb      	strh	r3, [r7, #6]
	if(eboard_gpio_read(EBOARD_GPIO_SW)== false)
 8005cf6:	2003      	movs	r0, #3
 8005cf8:	f7ff fd3a 	bl	8005770 <eboard_gpio_read>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f083 0301 	eor.w	r3, r3, #1
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <HAL_GPIO_EXTI_Callback+0x28>
	{
		pressed_start= xTaskGetTickCount();
 8005d08:	f7fe fc06 	bl	8004518 <xTaskGetTickCount>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	4a09      	ldr	r2, [pc, #36]	; (8005d34 <HAL_GPIO_EXTI_Callback+0x48>)
 8005d10:	6013      	str	r3, [r2, #0]
	{
		pressed_time= xTaskGetTickCount()-pressed_start;
		pressed_start=0;

	}
}
 8005d12:	e00a      	b.n	8005d2a <HAL_GPIO_EXTI_Callback+0x3e>
		pressed_time= xTaskGetTickCount()-pressed_start;
 8005d14:	f7fe fc00 	bl	8004518 <xTaskGetTickCount>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	4b06      	ldr	r3, [pc, #24]	; (8005d34 <HAL_GPIO_EXTI_Callback+0x48>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	4a05      	ldr	r2, [pc, #20]	; (8005d38 <HAL_GPIO_EXTI_Callback+0x4c>)
 8005d22:	6013      	str	r3, [r2, #0]
		pressed_start=0;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <HAL_GPIO_EXTI_Callback+0x48>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20004724 	.word	0x20004724
 8005d38:	20004728 	.word	0x20004728

08005d3c <task_button>:



void task_button(void* argument)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	while(1)
	{
		ELOG("--------- TASK BUTTON------- \r\n");
 8005d44:	f7ff f92e 	bl	8004fa4 <vPortEnterCritical>
 8005d48:	4b30      	ldr	r3, [pc, #192]	; (8005e0c <task_button+0xd0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a30      	ldr	r2, [pc, #192]	; (8005e10 <task_button+0xd4>)
 8005d4e:	213f      	movs	r1, #63	; 0x3f
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fa37 	bl	80061c4 <sniprintf>
 8005d56:	4603      	mov	r3, r0
 8005d58:	4a2e      	ldr	r2, [pc, #184]	; (8005e14 <task_button+0xd8>)
 8005d5a:	6013      	str	r3, [r2, #0]
 8005d5c:	4b2b      	ldr	r3, [pc, #172]	; (8005e0c <task_button+0xd0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff fd7d 	bl	8005860 <eboard_log>
 8005d66:	f7ff f94d 	bl	8005004 <vPortExitCritical>
		sprintf((char *)buffer,"Tiempo presionado: %lu\r\n" ,pressed_time);
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <task_button+0xdc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	492a      	ldr	r1, [pc, #168]	; (8005e1c <task_button+0xe0>)
 8005d72:	482b      	ldr	r0, [pc, #172]	; (8005e20 <task_button+0xe4>)
 8005d74:	f000 fa5a 	bl	800622c <siprintf>
		ELOG(buffer);
 8005d78:	f7ff f914 	bl	8004fa4 <vPortEnterCritical>
 8005d7c:	4b23      	ldr	r3, [pc, #140]	; (8005e0c <task_button+0xd0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a27      	ldr	r2, [pc, #156]	; (8005e20 <task_button+0xe4>)
 8005d82:	213f      	movs	r1, #63	; 0x3f
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fa1d 	bl	80061c4 <sniprintf>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4a21      	ldr	r2, [pc, #132]	; (8005e14 <task_button+0xd8>)
 8005d8e:	6013      	str	r3, [r2, #0]
 8005d90:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <task_button+0xd0>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff fd63 	bl	8005860 <eboard_log>
 8005d9a:	f7ff f933 	bl	8005004 <vPortExitCritical>
		procces_button(&l_evento);
 8005d9e:	4821      	ldr	r0, [pc, #132]	; (8005e24 <task_button+0xe8>)
 8005da0:	f000 f84e 	bl	8005e40 <procces_button>
		sprintf((char *)buffer,"Proccess button: %u \r\n",l_evento);
 8005da4:	4b1f      	ldr	r3, [pc, #124]	; (8005e24 <task_button+0xe8>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	491f      	ldr	r1, [pc, #124]	; (8005e28 <task_button+0xec>)
 8005dac:	481c      	ldr	r0, [pc, #112]	; (8005e20 <task_button+0xe4>)
 8005dae:	f000 fa3d 	bl	800622c <siprintf>
		ELOG(buffer);
 8005db2:	f7ff f8f7 	bl	8004fa4 <vPortEnterCritical>
 8005db6:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <task_button+0xd0>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a19      	ldr	r2, [pc, #100]	; (8005e20 <task_button+0xe4>)
 8005dbc:	213f      	movs	r1, #63	; 0x3f
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fa00 	bl	80061c4 <sniprintf>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <task_button+0xd8>)
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <task_button+0xd0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fd46 	bl	8005860 <eboard_log>
 8005dd4:	f7ff f916 	bl	8005004 <vPortExitCritical>
		//ao_led_send(l_evento);
		sd = xQueueSend(QueueBtnStatus, &l_evento, portMAX_DELAY);
 8005dd8:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <task_button+0xf0>)
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f04f 32ff 	mov.w	r2, #4294967295
 8005de2:	4910      	ldr	r1, [pc, #64]	; (8005e24 <task_button+0xe8>)
 8005de4:	f7fd fdb8 	bl	8003958 <xQueueGenericSend>
 8005de8:	4603      	mov	r3, r0
 8005dea:	4a11      	ldr	r2, [pc, #68]	; (8005e30 <task_button+0xf4>)
 8005dec:	6013      	str	r3, [r2, #0]
		//Revisar que el mensaje se halla encolado correctamente.
		assert(sd != 0);
 8005dee:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <task_button+0xf4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d105      	bne.n	8005e02 <task_button+0xc6>
 8005df6:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <task_button+0xf8>)
 8005df8:	4a0f      	ldr	r2, [pc, #60]	; (8005e38 <task_button+0xfc>)
 8005dfa:	213f      	movs	r1, #63	; 0x3f
 8005dfc:	480f      	ldr	r0, [pc, #60]	; (8005e3c <task_button+0x100>)
 8005dfe:	f000 f901 	bl	8006004 <__assert_func>
		vTaskDelay(100);
 8005e02:	2064      	movs	r0, #100	; 0x64
 8005e04:	f7fe fa40 	bl	8004288 <vTaskDelay>
		ELOG("--------- TASK BUTTON------- \r\n");
 8005e08:	e79c      	b.n	8005d44 <task_button+0x8>
 8005e0a:	bf00      	nop
 8005e0c:	0800752c 	.word	0x0800752c
 8005e10:	0800745c 	.word	0x0800745c
 8005e14:	20004718 	.word	0x20004718
 8005e18:	20004728 	.word	0x20004728
 8005e1c:	0800747c 	.word	0x0800747c
 8005e20:	2000472c 	.word	0x2000472c
 8005e24:	20004790 	.word	0x20004790
 8005e28:	08007498 	.word	0x08007498
 8005e2c:	2000471c 	.word	0x2000471c
 8005e30:	20004720 	.word	0x20004720
 8005e34:	080074b0 	.word	0x080074b0
 8005e38:	08007530 	.word	0x08007530
 8005e3c:	080074b8 	.word	0x080074b8

08005e40 <procces_button>:

}


void procces_button(led_event_t *evento)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	if ( (t_corto <= pressed_time) && (pressed_time < t_largo))
 8005e48:	4b16      	ldr	r3, [pc, #88]	; (8005ea4 <procces_button+0x64>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b63      	cmp	r3, #99	; 0x63
 8005e4e:	d908      	bls.n	8005e62 <procces_button+0x22>
 8005e50:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <procces_button+0x64>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e58:	d203      	bcs.n	8005e62 <procces_button+0x22>
	{
		*evento= corto;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	e01a      	b.n	8005e98 <procces_button+0x58>

	}
	else if((t_largo <= pressed_time) && (pressed_time < t_trabado))
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <procces_button+0x64>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005e6a:	d308      	bcc.n	8005e7e <procces_button+0x3e>
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <procces_button+0x64>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005e74:	d203      	bcs.n	8005e7e <procces_button+0x3e>
	{
		*evento= largo;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e00c      	b.n	8005e98 <procces_button+0x58>
	}
	else if(pressed_time > t_trabado)
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <procces_button+0x64>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005e86:	d903      	bls.n	8005e90 <procces_button+0x50>
	{
		*evento= trabado;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2203      	movs	r2, #3
 8005e8c:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		*evento= inicial;
	}
}
 8005e8e:	e003      	b.n	8005e98 <procces_button+0x58>
		*evento= inicial;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
}
 8005e96:	e7ff      	b.n	8005e98 <procces_button+0x58>
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	20004728 	.word	0x20004728

08005ea8 <task_led>:
const TickType_t xDelay10000ms = pdMS_TO_TICKS(10000UL); //xTicksToWait de la cola
uint8_t buffer2[100];
void proccess_ao_evento(led_event_t *evento_t);

void task_led(void* argument)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		ELOG("--------- TASK LED------- \r\n");
 8005eb0:	f7ff f878 	bl	8004fa4 <vPortEnterCritical>
 8005eb4:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <task_led+0x88>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1e      	ldr	r2, [pc, #120]	; (8005f34 <task_led+0x8c>)
 8005eba:	213f      	movs	r1, #63	; 0x3f
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 f981 	bl	80061c4 <sniprintf>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	; (8005f38 <task_led+0x90>)
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	4b19      	ldr	r3, [pc, #100]	; (8005f30 <task_led+0x88>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff fcc7 	bl	8005860 <eboard_log>
 8005ed2:	f7ff f897 	bl	8005004 <vPortExitCritical>
		rv = xQueueReceive(QueueBtnStatus, &ao_evento, xDelay10000ms);
 8005ed6:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <task_led+0x94>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ede:	4918      	ldr	r1, [pc, #96]	; (8005f40 <task_led+0x98>)
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fd fe37 	bl	8003b54 <xQueueReceive>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4a16      	ldr	r2, [pc, #88]	; (8005f44 <task_led+0x9c>)
 8005eea:	6013      	str	r3, [r2, #0]
		//Revisar que el mensaje se halla encolado correctamente.
		configASSERT(&rv != NULL);
		sprintf((char *)buffer2,"Proccess button led: %u \r\n",ao_evento);
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <task_led+0x98>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4915      	ldr	r1, [pc, #84]	; (8005f48 <task_led+0xa0>)
 8005ef4:	4815      	ldr	r0, [pc, #84]	; (8005f4c <task_led+0xa4>)
 8005ef6:	f000 f999 	bl	800622c <siprintf>
		ELOG(buffer2);
 8005efa:	f7ff f853 	bl	8004fa4 <vPortEnterCritical>
 8005efe:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <task_led+0x88>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a12      	ldr	r2, [pc, #72]	; (8005f4c <task_led+0xa4>)
 8005f04:	213f      	movs	r1, #63	; 0x3f
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f95c 	bl	80061c4 <sniprintf>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <task_led+0x90>)
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <task_led+0x88>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fca2 	bl	8005860 <eboard_log>
 8005f1c:	f7ff f872 	bl	8005004 <vPortExitCritical>
		proccess_ao_evento(&ao_evento);
 8005f20:	4807      	ldr	r0, [pc, #28]	; (8005f40 <task_led+0x98>)
 8005f22:	f000 f815 	bl	8005f50 <proccess_ao_evento>
		vTaskDelay(100);
 8005f26:	2064      	movs	r0, #100	; 0x64
 8005f28:	f7fe f9ae 	bl	8004288 <vTaskDelay>
		ELOG("--------- TASK LED------- \r\n");
 8005f2c:	e7c0      	b.n	8005eb0 <task_led+0x8>
 8005f2e:	bf00      	nop
 8005f30:	0800752c 	.word	0x0800752c
 8005f34:	080074d8 	.word	0x080074d8
 8005f38:	20004718 	.word	0x20004718
 8005f3c:	2000471c 	.word	0x2000471c
 8005f40:	20004791 	.word	0x20004791
 8005f44:	20004794 	.word	0x20004794
 8005f48:	080074f8 	.word	0x080074f8
 8005f4c:	20004798 	.word	0x20004798

08005f50 <proccess_ao_evento>:
	}
}

void proccess_ao_evento(led_event_t *evento_t)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	switch (*evento_t) {
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d845      	bhi.n	8005fec <proccess_ao_evento+0x9c>
 8005f60:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <proccess_ao_evento+0x18>)
 8005f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f66:	bf00      	nop
 8005f68:	08005f79 	.word	0x08005f79
 8005f6c:	08005f87 	.word	0x08005f87
 8005f70:	08005fb3 	.word	0x08005fb3
 8005f74:	08005fdf 	.word	0x08005fdf
		case inicial:
			eboard_led_green(false);
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f7ff fc23 	bl	80057c4 <eboard_led_green>
			eboard_led_red(false);
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f7ff fc12 	bl	80057a8 <eboard_led_red>

			break;
 8005f84:	e039      	b.n	8005ffa <proccess_ao_evento+0xaa>
		case corto:
			eboard_led_green(!eboard_gpio_read(EBOARD_GPIO_LEDG));
 8005f86:	2001      	movs	r0, #1
 8005f88:	f7ff fbf2 	bl	8005770 <eboard_gpio_read>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bf14      	ite	ne
 8005f92:	2301      	movne	r3, #1
 8005f94:	2300      	moveq	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	f083 0301 	eor.w	r3, r3, #1
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7ff fc0d 	bl	80057c4 <eboard_led_green>
			eboard_led_red(false);
 8005faa:	2000      	movs	r0, #0
 8005fac:	f7ff fbfc 	bl	80057a8 <eboard_led_red>
			break;
 8005fb0:	e023      	b.n	8005ffa <proccess_ao_evento+0xaa>
		case largo:
			eboard_led_red(!eboard_gpio_read(EBOARD_GPIO_LEDR));
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	f7ff fbdc 	bl	8005770 <eboard_gpio_read>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bf14      	ite	ne
 8005fbe:	2301      	movne	r3, #1
 8005fc0:	2300      	moveq	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f083 0301 	eor.w	r3, r3, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fbe9 	bl	80057a8 <eboard_led_red>
			eboard_led_green(false);
 8005fd6:	2000      	movs	r0, #0
 8005fd8:	f7ff fbf4 	bl	80057c4 <eboard_led_green>
			break;
 8005fdc:	e00d      	b.n	8005ffa <proccess_ao_evento+0xaa>
		case trabado:
			eboard_led_green(true);
 8005fde:	2001      	movs	r0, #1
 8005fe0:	f7ff fbf0 	bl	80057c4 <eboard_led_green>
			eboard_led_red(true);
 8005fe4:	2001      	movs	r0, #1
 8005fe6:	f7ff fbdf 	bl	80057a8 <eboard_led_red>
			break;
 8005fea:	e006      	b.n	8005ffa <proccess_ao_evento+0xaa>
		default:
			eboard_led_green(false);
 8005fec:	2000      	movs	r0, #0
 8005fee:	f7ff fbe9 	bl	80057c4 <eboard_led_green>
			eboard_led_red(false);
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f7ff fbd8 	bl	80057a8 <eboard_led_red>
			break;
 8005ff8:	bf00      	nop
	}
}
 8005ffa:	bf00      	nop
 8005ffc:	3708      	adds	r7, #8
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop

08006004 <__assert_func>:
 8006004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006006:	4614      	mov	r4, r2
 8006008:	461a      	mov	r2, r3
 800600a:	4b09      	ldr	r3, [pc, #36]	; (8006030 <__assert_func+0x2c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4605      	mov	r5, r0
 8006010:	68d8      	ldr	r0, [r3, #12]
 8006012:	b14c      	cbz	r4, 8006028 <__assert_func+0x24>
 8006014:	4b07      	ldr	r3, [pc, #28]	; (8006034 <__assert_func+0x30>)
 8006016:	9100      	str	r1, [sp, #0]
 8006018:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800601c:	4906      	ldr	r1, [pc, #24]	; (8006038 <__assert_func+0x34>)
 800601e:	462b      	mov	r3, r5
 8006020:	f000 f8a0 	bl	8006164 <fiprintf>
 8006024:	f000 fa44 	bl	80064b0 <abort>
 8006028:	4b04      	ldr	r3, [pc, #16]	; (800603c <__assert_func+0x38>)
 800602a:	461c      	mov	r4, r3
 800602c:	e7f3      	b.n	8006016 <__assert_func+0x12>
 800602e:	bf00      	nop
 8006030:	200000bc 	.word	0x200000bc
 8006034:	0800753c 	.word	0x0800753c
 8006038:	08007549 	.word	0x08007549
 800603c:	08007577 	.word	0x08007577

08006040 <std>:
 8006040:	2300      	movs	r3, #0
 8006042:	b510      	push	{r4, lr}
 8006044:	4604      	mov	r4, r0
 8006046:	e9c0 3300 	strd	r3, r3, [r0]
 800604a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800604e:	6083      	str	r3, [r0, #8]
 8006050:	8181      	strh	r1, [r0, #12]
 8006052:	6643      	str	r3, [r0, #100]	; 0x64
 8006054:	81c2      	strh	r2, [r0, #14]
 8006056:	6183      	str	r3, [r0, #24]
 8006058:	4619      	mov	r1, r3
 800605a:	2208      	movs	r2, #8
 800605c:	305c      	adds	r0, #92	; 0x5c
 800605e:	f000 f948 	bl	80062f2 <memset>
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <std+0x38>)
 8006064:	6263      	str	r3, [r4, #36]	; 0x24
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <std+0x3c>)
 8006068:	62a3      	str	r3, [r4, #40]	; 0x28
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <std+0x40>)
 800606c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800606e:	4b05      	ldr	r3, [pc, #20]	; (8006084 <std+0x44>)
 8006070:	6224      	str	r4, [r4, #32]
 8006072:	6323      	str	r3, [r4, #48]	; 0x30
 8006074:	bd10      	pop	{r4, pc}
 8006076:	bf00      	nop
 8006078:	0800626d 	.word	0x0800626d
 800607c:	0800628f 	.word	0x0800628f
 8006080:	080062c7 	.word	0x080062c7
 8006084:	080062eb 	.word	0x080062eb

08006088 <stdio_exit_handler>:
 8006088:	4a02      	ldr	r2, [pc, #8]	; (8006094 <stdio_exit_handler+0xc>)
 800608a:	4903      	ldr	r1, [pc, #12]	; (8006098 <stdio_exit_handler+0x10>)
 800608c:	4803      	ldr	r0, [pc, #12]	; (800609c <stdio_exit_handler+0x14>)
 800608e:	f000 b87b 	b.w	8006188 <_fwalk_sglue>
 8006092:	bf00      	nop
 8006094:	20000064 	.word	0x20000064
 8006098:	08007015 	.word	0x08007015
 800609c:	20000070 	.word	0x20000070

080060a0 <cleanup_stdio>:
 80060a0:	6841      	ldr	r1, [r0, #4]
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <cleanup_stdio+0x34>)
 80060a4:	4299      	cmp	r1, r3
 80060a6:	b510      	push	{r4, lr}
 80060a8:	4604      	mov	r4, r0
 80060aa:	d001      	beq.n	80060b0 <cleanup_stdio+0x10>
 80060ac:	f000 ffb2 	bl	8007014 <_fflush_r>
 80060b0:	68a1      	ldr	r1, [r4, #8]
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <cleanup_stdio+0x38>)
 80060b4:	4299      	cmp	r1, r3
 80060b6:	d002      	beq.n	80060be <cleanup_stdio+0x1e>
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 ffab 	bl	8007014 <_fflush_r>
 80060be:	68e1      	ldr	r1, [r4, #12]
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <cleanup_stdio+0x3c>)
 80060c2:	4299      	cmp	r1, r3
 80060c4:	d004      	beq.n	80060d0 <cleanup_stdio+0x30>
 80060c6:	4620      	mov	r0, r4
 80060c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060cc:	f000 bfa2 	b.w	8007014 <_fflush_r>
 80060d0:	bd10      	pop	{r4, pc}
 80060d2:	bf00      	nop
 80060d4:	200047fc 	.word	0x200047fc
 80060d8:	20004864 	.word	0x20004864
 80060dc:	200048cc 	.word	0x200048cc

080060e0 <global_stdio_init.part.0>:
 80060e0:	b510      	push	{r4, lr}
 80060e2:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <global_stdio_init.part.0+0x30>)
 80060e4:	4c0b      	ldr	r4, [pc, #44]	; (8006114 <global_stdio_init.part.0+0x34>)
 80060e6:	4a0c      	ldr	r2, [pc, #48]	; (8006118 <global_stdio_init.part.0+0x38>)
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	4620      	mov	r0, r4
 80060ec:	2200      	movs	r2, #0
 80060ee:	2104      	movs	r1, #4
 80060f0:	f7ff ffa6 	bl	8006040 <std>
 80060f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80060f8:	2201      	movs	r2, #1
 80060fa:	2109      	movs	r1, #9
 80060fc:	f7ff ffa0 	bl	8006040 <std>
 8006100:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006104:	2202      	movs	r2, #2
 8006106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800610a:	2112      	movs	r1, #18
 800610c:	f7ff bf98 	b.w	8006040 <std>
 8006110:	20004934 	.word	0x20004934
 8006114:	200047fc 	.word	0x200047fc
 8006118:	08006089 	.word	0x08006089

0800611c <__sfp_lock_acquire>:
 800611c:	4801      	ldr	r0, [pc, #4]	; (8006124 <__sfp_lock_acquire+0x8>)
 800611e:	f000 b9b7 	b.w	8006490 <__retarget_lock_acquire_recursive>
 8006122:	bf00      	nop
 8006124:	2000493d 	.word	0x2000493d

08006128 <__sfp_lock_release>:
 8006128:	4801      	ldr	r0, [pc, #4]	; (8006130 <__sfp_lock_release+0x8>)
 800612a:	f000 b9b2 	b.w	8006492 <__retarget_lock_release_recursive>
 800612e:	bf00      	nop
 8006130:	2000493d 	.word	0x2000493d

08006134 <__sinit>:
 8006134:	b510      	push	{r4, lr}
 8006136:	4604      	mov	r4, r0
 8006138:	f7ff fff0 	bl	800611c <__sfp_lock_acquire>
 800613c:	6a23      	ldr	r3, [r4, #32]
 800613e:	b11b      	cbz	r3, 8006148 <__sinit+0x14>
 8006140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006144:	f7ff bff0 	b.w	8006128 <__sfp_lock_release>
 8006148:	4b04      	ldr	r3, [pc, #16]	; (800615c <__sinit+0x28>)
 800614a:	6223      	str	r3, [r4, #32]
 800614c:	4b04      	ldr	r3, [pc, #16]	; (8006160 <__sinit+0x2c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1f5      	bne.n	8006140 <__sinit+0xc>
 8006154:	f7ff ffc4 	bl	80060e0 <global_stdio_init.part.0>
 8006158:	e7f2      	b.n	8006140 <__sinit+0xc>
 800615a:	bf00      	nop
 800615c:	080060a1 	.word	0x080060a1
 8006160:	20004934 	.word	0x20004934

08006164 <fiprintf>:
 8006164:	b40e      	push	{r1, r2, r3}
 8006166:	b503      	push	{r0, r1, lr}
 8006168:	4601      	mov	r1, r0
 800616a:	ab03      	add	r3, sp, #12
 800616c:	4805      	ldr	r0, [pc, #20]	; (8006184 <fiprintf+0x20>)
 800616e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006172:	6800      	ldr	r0, [r0, #0]
 8006174:	9301      	str	r3, [sp, #4]
 8006176:	f000 fc1d 	bl	80069b4 <_vfiprintf_r>
 800617a:	b002      	add	sp, #8
 800617c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006180:	b003      	add	sp, #12
 8006182:	4770      	bx	lr
 8006184:	200000bc 	.word	0x200000bc

08006188 <_fwalk_sglue>:
 8006188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800618c:	4607      	mov	r7, r0
 800618e:	4688      	mov	r8, r1
 8006190:	4614      	mov	r4, r2
 8006192:	2600      	movs	r6, #0
 8006194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006198:	f1b9 0901 	subs.w	r9, r9, #1
 800619c:	d505      	bpl.n	80061aa <_fwalk_sglue+0x22>
 800619e:	6824      	ldr	r4, [r4, #0]
 80061a0:	2c00      	cmp	r4, #0
 80061a2:	d1f7      	bne.n	8006194 <_fwalk_sglue+0xc>
 80061a4:	4630      	mov	r0, r6
 80061a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061aa:	89ab      	ldrh	r3, [r5, #12]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d907      	bls.n	80061c0 <_fwalk_sglue+0x38>
 80061b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061b4:	3301      	adds	r3, #1
 80061b6:	d003      	beq.n	80061c0 <_fwalk_sglue+0x38>
 80061b8:	4629      	mov	r1, r5
 80061ba:	4638      	mov	r0, r7
 80061bc:	47c0      	blx	r8
 80061be:	4306      	orrs	r6, r0
 80061c0:	3568      	adds	r5, #104	; 0x68
 80061c2:	e7e9      	b.n	8006198 <_fwalk_sglue+0x10>

080061c4 <sniprintf>:
 80061c4:	b40c      	push	{r2, r3}
 80061c6:	b530      	push	{r4, r5, lr}
 80061c8:	4b17      	ldr	r3, [pc, #92]	; (8006228 <sniprintf+0x64>)
 80061ca:	1e0c      	subs	r4, r1, #0
 80061cc:	681d      	ldr	r5, [r3, #0]
 80061ce:	b09d      	sub	sp, #116	; 0x74
 80061d0:	da08      	bge.n	80061e4 <sniprintf+0x20>
 80061d2:	238b      	movs	r3, #139	; 0x8b
 80061d4:	602b      	str	r3, [r5, #0]
 80061d6:	f04f 30ff 	mov.w	r0, #4294967295
 80061da:	b01d      	add	sp, #116	; 0x74
 80061dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061e0:	b002      	add	sp, #8
 80061e2:	4770      	bx	lr
 80061e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061ec:	bf14      	ite	ne
 80061ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061f2:	4623      	moveq	r3, r4
 80061f4:	9304      	str	r3, [sp, #16]
 80061f6:	9307      	str	r3, [sp, #28]
 80061f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061fc:	9002      	str	r0, [sp, #8]
 80061fe:	9006      	str	r0, [sp, #24]
 8006200:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006204:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006206:	ab21      	add	r3, sp, #132	; 0x84
 8006208:	a902      	add	r1, sp, #8
 800620a:	4628      	mov	r0, r5
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	f000 faa9 	bl	8006764 <_svfiprintf_r>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	bfbc      	itt	lt
 8006216:	238b      	movlt	r3, #139	; 0x8b
 8006218:	602b      	strlt	r3, [r5, #0]
 800621a:	2c00      	cmp	r4, #0
 800621c:	d0dd      	beq.n	80061da <sniprintf+0x16>
 800621e:	9b02      	ldr	r3, [sp, #8]
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	e7d9      	b.n	80061da <sniprintf+0x16>
 8006226:	bf00      	nop
 8006228:	200000bc 	.word	0x200000bc

0800622c <siprintf>:
 800622c:	b40e      	push	{r1, r2, r3}
 800622e:	b500      	push	{lr}
 8006230:	b09c      	sub	sp, #112	; 0x70
 8006232:	ab1d      	add	r3, sp, #116	; 0x74
 8006234:	9002      	str	r0, [sp, #8]
 8006236:	9006      	str	r0, [sp, #24]
 8006238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800623c:	4809      	ldr	r0, [pc, #36]	; (8006264 <siprintf+0x38>)
 800623e:	9107      	str	r1, [sp, #28]
 8006240:	9104      	str	r1, [sp, #16]
 8006242:	4909      	ldr	r1, [pc, #36]	; (8006268 <siprintf+0x3c>)
 8006244:	f853 2b04 	ldr.w	r2, [r3], #4
 8006248:	9105      	str	r1, [sp, #20]
 800624a:	6800      	ldr	r0, [r0, #0]
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	a902      	add	r1, sp, #8
 8006250:	f000 fa88 	bl	8006764 <_svfiprintf_r>
 8006254:	9b02      	ldr	r3, [sp, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	b01c      	add	sp, #112	; 0x70
 800625c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006260:	b003      	add	sp, #12
 8006262:	4770      	bx	lr
 8006264:	200000bc 	.word	0x200000bc
 8006268:	ffff0208 	.word	0xffff0208

0800626c <__sread>:
 800626c:	b510      	push	{r4, lr}
 800626e:	460c      	mov	r4, r1
 8006270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006274:	f000 f8be 	bl	80063f4 <_read_r>
 8006278:	2800      	cmp	r0, #0
 800627a:	bfab      	itete	ge
 800627c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800627e:	89a3      	ldrhlt	r3, [r4, #12]
 8006280:	181b      	addge	r3, r3, r0
 8006282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006286:	bfac      	ite	ge
 8006288:	6563      	strge	r3, [r4, #84]	; 0x54
 800628a:	81a3      	strhlt	r3, [r4, #12]
 800628c:	bd10      	pop	{r4, pc}

0800628e <__swrite>:
 800628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006292:	461f      	mov	r7, r3
 8006294:	898b      	ldrh	r3, [r1, #12]
 8006296:	05db      	lsls	r3, r3, #23
 8006298:	4605      	mov	r5, r0
 800629a:	460c      	mov	r4, r1
 800629c:	4616      	mov	r6, r2
 800629e:	d505      	bpl.n	80062ac <__swrite+0x1e>
 80062a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a4:	2302      	movs	r3, #2
 80062a6:	2200      	movs	r2, #0
 80062a8:	f000 f892 	bl	80063d0 <_lseek_r>
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b6:	81a3      	strh	r3, [r4, #12]
 80062b8:	4632      	mov	r2, r6
 80062ba:	463b      	mov	r3, r7
 80062bc:	4628      	mov	r0, r5
 80062be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062c2:	f000 b8a9 	b.w	8006418 <_write_r>

080062c6 <__sseek>:
 80062c6:	b510      	push	{r4, lr}
 80062c8:	460c      	mov	r4, r1
 80062ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ce:	f000 f87f 	bl	80063d0 <_lseek_r>
 80062d2:	1c43      	adds	r3, r0, #1
 80062d4:	89a3      	ldrh	r3, [r4, #12]
 80062d6:	bf15      	itete	ne
 80062d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80062da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062e2:	81a3      	strheq	r3, [r4, #12]
 80062e4:	bf18      	it	ne
 80062e6:	81a3      	strhne	r3, [r4, #12]
 80062e8:	bd10      	pop	{r4, pc}

080062ea <__sclose>:
 80062ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ee:	f000 b809 	b.w	8006304 <_close_r>

080062f2 <memset>:
 80062f2:	4402      	add	r2, r0
 80062f4:	4603      	mov	r3, r0
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d100      	bne.n	80062fc <memset+0xa>
 80062fa:	4770      	bx	lr
 80062fc:	f803 1b01 	strb.w	r1, [r3], #1
 8006300:	e7f9      	b.n	80062f6 <memset+0x4>
	...

08006304 <_close_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d06      	ldr	r5, [pc, #24]	; (8006320 <_close_r+0x1c>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	f7fa fc4d 	bl	8000bae <_close>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_close_r+0x1a>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_close_r+0x1a>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20004938 	.word	0x20004938

08006324 <_reclaim_reent>:
 8006324:	4b29      	ldr	r3, [pc, #164]	; (80063cc <_reclaim_reent+0xa8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4283      	cmp	r3, r0
 800632a:	b570      	push	{r4, r5, r6, lr}
 800632c:	4604      	mov	r4, r0
 800632e:	d04b      	beq.n	80063c8 <_reclaim_reent+0xa4>
 8006330:	69c3      	ldr	r3, [r0, #28]
 8006332:	b143      	cbz	r3, 8006346 <_reclaim_reent+0x22>
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d144      	bne.n	80063c4 <_reclaim_reent+0xa0>
 800633a:	69e3      	ldr	r3, [r4, #28]
 800633c:	6819      	ldr	r1, [r3, #0]
 800633e:	b111      	cbz	r1, 8006346 <_reclaim_reent+0x22>
 8006340:	4620      	mov	r0, r4
 8006342:	f000 f8bd 	bl	80064c0 <_free_r>
 8006346:	6961      	ldr	r1, [r4, #20]
 8006348:	b111      	cbz	r1, 8006350 <_reclaim_reent+0x2c>
 800634a:	4620      	mov	r0, r4
 800634c:	f000 f8b8 	bl	80064c0 <_free_r>
 8006350:	69e1      	ldr	r1, [r4, #28]
 8006352:	b111      	cbz	r1, 800635a <_reclaim_reent+0x36>
 8006354:	4620      	mov	r0, r4
 8006356:	f000 f8b3 	bl	80064c0 <_free_r>
 800635a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800635c:	b111      	cbz	r1, 8006364 <_reclaim_reent+0x40>
 800635e:	4620      	mov	r0, r4
 8006360:	f000 f8ae 	bl	80064c0 <_free_r>
 8006364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006366:	b111      	cbz	r1, 800636e <_reclaim_reent+0x4a>
 8006368:	4620      	mov	r0, r4
 800636a:	f000 f8a9 	bl	80064c0 <_free_r>
 800636e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006370:	b111      	cbz	r1, 8006378 <_reclaim_reent+0x54>
 8006372:	4620      	mov	r0, r4
 8006374:	f000 f8a4 	bl	80064c0 <_free_r>
 8006378:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800637a:	b111      	cbz	r1, 8006382 <_reclaim_reent+0x5e>
 800637c:	4620      	mov	r0, r4
 800637e:	f000 f89f 	bl	80064c0 <_free_r>
 8006382:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006384:	b111      	cbz	r1, 800638c <_reclaim_reent+0x68>
 8006386:	4620      	mov	r0, r4
 8006388:	f000 f89a 	bl	80064c0 <_free_r>
 800638c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800638e:	b111      	cbz	r1, 8006396 <_reclaim_reent+0x72>
 8006390:	4620      	mov	r0, r4
 8006392:	f000 f895 	bl	80064c0 <_free_r>
 8006396:	6a23      	ldr	r3, [r4, #32]
 8006398:	b1b3      	cbz	r3, 80063c8 <_reclaim_reent+0xa4>
 800639a:	4620      	mov	r0, r4
 800639c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063a0:	4718      	bx	r3
 80063a2:	5949      	ldr	r1, [r1, r5]
 80063a4:	b941      	cbnz	r1, 80063b8 <_reclaim_reent+0x94>
 80063a6:	3504      	adds	r5, #4
 80063a8:	69e3      	ldr	r3, [r4, #28]
 80063aa:	2d80      	cmp	r5, #128	; 0x80
 80063ac:	68d9      	ldr	r1, [r3, #12]
 80063ae:	d1f8      	bne.n	80063a2 <_reclaim_reent+0x7e>
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 f885 	bl	80064c0 <_free_r>
 80063b6:	e7c0      	b.n	800633a <_reclaim_reent+0x16>
 80063b8:	680e      	ldr	r6, [r1, #0]
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 f880 	bl	80064c0 <_free_r>
 80063c0:	4631      	mov	r1, r6
 80063c2:	e7ef      	b.n	80063a4 <_reclaim_reent+0x80>
 80063c4:	2500      	movs	r5, #0
 80063c6:	e7ef      	b.n	80063a8 <_reclaim_reent+0x84>
 80063c8:	bd70      	pop	{r4, r5, r6, pc}
 80063ca:	bf00      	nop
 80063cc:	200000bc 	.word	0x200000bc

080063d0 <_lseek_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d07      	ldr	r5, [pc, #28]	; (80063f0 <_lseek_r+0x20>)
 80063d4:	4604      	mov	r4, r0
 80063d6:	4608      	mov	r0, r1
 80063d8:	4611      	mov	r1, r2
 80063da:	2200      	movs	r2, #0
 80063dc:	602a      	str	r2, [r5, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	f7fa fc0c 	bl	8000bfc <_lseek>
 80063e4:	1c43      	adds	r3, r0, #1
 80063e6:	d102      	bne.n	80063ee <_lseek_r+0x1e>
 80063e8:	682b      	ldr	r3, [r5, #0]
 80063ea:	b103      	cbz	r3, 80063ee <_lseek_r+0x1e>
 80063ec:	6023      	str	r3, [r4, #0]
 80063ee:	bd38      	pop	{r3, r4, r5, pc}
 80063f0:	20004938 	.word	0x20004938

080063f4 <_read_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	4d07      	ldr	r5, [pc, #28]	; (8006414 <_read_r+0x20>)
 80063f8:	4604      	mov	r4, r0
 80063fa:	4608      	mov	r0, r1
 80063fc:	4611      	mov	r1, r2
 80063fe:	2200      	movs	r2, #0
 8006400:	602a      	str	r2, [r5, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	f7fa fb9a 	bl	8000b3c <_read>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_read_r+0x1e>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_read_r+0x1e>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	20004938 	.word	0x20004938

08006418 <_write_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4d07      	ldr	r5, [pc, #28]	; (8006438 <_write_r+0x20>)
 800641c:	4604      	mov	r4, r0
 800641e:	4608      	mov	r0, r1
 8006420:	4611      	mov	r1, r2
 8006422:	2200      	movs	r2, #0
 8006424:	602a      	str	r2, [r5, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	f7fa fba5 	bl	8000b76 <_write>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_write_r+0x1e>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	b103      	cbz	r3, 8006436 <_write_r+0x1e>
 8006434:	6023      	str	r3, [r4, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	20004938 	.word	0x20004938

0800643c <__errno>:
 800643c:	4b01      	ldr	r3, [pc, #4]	; (8006444 <__errno+0x8>)
 800643e:	6818      	ldr	r0, [r3, #0]
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	200000bc 	.word	0x200000bc

08006448 <__libc_init_array>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	4d0d      	ldr	r5, [pc, #52]	; (8006480 <__libc_init_array+0x38>)
 800644c:	4c0d      	ldr	r4, [pc, #52]	; (8006484 <__libc_init_array+0x3c>)
 800644e:	1b64      	subs	r4, r4, r5
 8006450:	10a4      	asrs	r4, r4, #2
 8006452:	2600      	movs	r6, #0
 8006454:	42a6      	cmp	r6, r4
 8006456:	d109      	bne.n	800646c <__libc_init_array+0x24>
 8006458:	4d0b      	ldr	r5, [pc, #44]	; (8006488 <__libc_init_array+0x40>)
 800645a:	4c0c      	ldr	r4, [pc, #48]	; (800648c <__libc_init_array+0x44>)
 800645c:	f000 ffc2 	bl	80073e4 <_init>
 8006460:	1b64      	subs	r4, r4, r5
 8006462:	10a4      	asrs	r4, r4, #2
 8006464:	2600      	movs	r6, #0
 8006466:	42a6      	cmp	r6, r4
 8006468:	d105      	bne.n	8006476 <__libc_init_array+0x2e>
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006470:	4798      	blx	r3
 8006472:	3601      	adds	r6, #1
 8006474:	e7ee      	b.n	8006454 <__libc_init_array+0xc>
 8006476:	f855 3b04 	ldr.w	r3, [r5], #4
 800647a:	4798      	blx	r3
 800647c:	3601      	adds	r6, #1
 800647e:	e7f2      	b.n	8006466 <__libc_init_array+0x1e>
 8006480:	080075b4 	.word	0x080075b4
 8006484:	080075b4 	.word	0x080075b4
 8006488:	080075b4 	.word	0x080075b4
 800648c:	080075b8 	.word	0x080075b8

08006490 <__retarget_lock_acquire_recursive>:
 8006490:	4770      	bx	lr

08006492 <__retarget_lock_release_recursive>:
 8006492:	4770      	bx	lr

08006494 <memcpy>:
 8006494:	440a      	add	r2, r1
 8006496:	4291      	cmp	r1, r2
 8006498:	f100 33ff 	add.w	r3, r0, #4294967295
 800649c:	d100      	bne.n	80064a0 <memcpy+0xc>
 800649e:	4770      	bx	lr
 80064a0:	b510      	push	{r4, lr}
 80064a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064aa:	4291      	cmp	r1, r2
 80064ac:	d1f9      	bne.n	80064a2 <memcpy+0xe>
 80064ae:	bd10      	pop	{r4, pc}

080064b0 <abort>:
 80064b0:	b508      	push	{r3, lr}
 80064b2:	2006      	movs	r0, #6
 80064b4:	f000 feae 	bl	8007214 <raise>
 80064b8:	2001      	movs	r0, #1
 80064ba:	f7fa fb35 	bl	8000b28 <_exit>
	...

080064c0 <_free_r>:
 80064c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064c2:	2900      	cmp	r1, #0
 80064c4:	d044      	beq.n	8006550 <_free_r+0x90>
 80064c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064ca:	9001      	str	r0, [sp, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f1a1 0404 	sub.w	r4, r1, #4
 80064d2:	bfb8      	it	lt
 80064d4:	18e4      	addlt	r4, r4, r3
 80064d6:	f000 f8df 	bl	8006698 <__malloc_lock>
 80064da:	4a1e      	ldr	r2, [pc, #120]	; (8006554 <_free_r+0x94>)
 80064dc:	9801      	ldr	r0, [sp, #4]
 80064de:	6813      	ldr	r3, [r2, #0]
 80064e0:	b933      	cbnz	r3, 80064f0 <_free_r+0x30>
 80064e2:	6063      	str	r3, [r4, #4]
 80064e4:	6014      	str	r4, [r2, #0]
 80064e6:	b003      	add	sp, #12
 80064e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064ec:	f000 b8da 	b.w	80066a4 <__malloc_unlock>
 80064f0:	42a3      	cmp	r3, r4
 80064f2:	d908      	bls.n	8006506 <_free_r+0x46>
 80064f4:	6825      	ldr	r5, [r4, #0]
 80064f6:	1961      	adds	r1, r4, r5
 80064f8:	428b      	cmp	r3, r1
 80064fa:	bf01      	itttt	eq
 80064fc:	6819      	ldreq	r1, [r3, #0]
 80064fe:	685b      	ldreq	r3, [r3, #4]
 8006500:	1949      	addeq	r1, r1, r5
 8006502:	6021      	streq	r1, [r4, #0]
 8006504:	e7ed      	b.n	80064e2 <_free_r+0x22>
 8006506:	461a      	mov	r2, r3
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	b10b      	cbz	r3, 8006510 <_free_r+0x50>
 800650c:	42a3      	cmp	r3, r4
 800650e:	d9fa      	bls.n	8006506 <_free_r+0x46>
 8006510:	6811      	ldr	r1, [r2, #0]
 8006512:	1855      	adds	r5, r2, r1
 8006514:	42a5      	cmp	r5, r4
 8006516:	d10b      	bne.n	8006530 <_free_r+0x70>
 8006518:	6824      	ldr	r4, [r4, #0]
 800651a:	4421      	add	r1, r4
 800651c:	1854      	adds	r4, r2, r1
 800651e:	42a3      	cmp	r3, r4
 8006520:	6011      	str	r1, [r2, #0]
 8006522:	d1e0      	bne.n	80064e6 <_free_r+0x26>
 8006524:	681c      	ldr	r4, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	6053      	str	r3, [r2, #4]
 800652a:	440c      	add	r4, r1
 800652c:	6014      	str	r4, [r2, #0]
 800652e:	e7da      	b.n	80064e6 <_free_r+0x26>
 8006530:	d902      	bls.n	8006538 <_free_r+0x78>
 8006532:	230c      	movs	r3, #12
 8006534:	6003      	str	r3, [r0, #0]
 8006536:	e7d6      	b.n	80064e6 <_free_r+0x26>
 8006538:	6825      	ldr	r5, [r4, #0]
 800653a:	1961      	adds	r1, r4, r5
 800653c:	428b      	cmp	r3, r1
 800653e:	bf04      	itt	eq
 8006540:	6819      	ldreq	r1, [r3, #0]
 8006542:	685b      	ldreq	r3, [r3, #4]
 8006544:	6063      	str	r3, [r4, #4]
 8006546:	bf04      	itt	eq
 8006548:	1949      	addeq	r1, r1, r5
 800654a:	6021      	streq	r1, [r4, #0]
 800654c:	6054      	str	r4, [r2, #4]
 800654e:	e7ca      	b.n	80064e6 <_free_r+0x26>
 8006550:	b003      	add	sp, #12
 8006552:	bd30      	pop	{r4, r5, pc}
 8006554:	20004940 	.word	0x20004940

08006558 <sbrk_aligned>:
 8006558:	b570      	push	{r4, r5, r6, lr}
 800655a:	4e0e      	ldr	r6, [pc, #56]	; (8006594 <sbrk_aligned+0x3c>)
 800655c:	460c      	mov	r4, r1
 800655e:	6831      	ldr	r1, [r6, #0]
 8006560:	4605      	mov	r5, r0
 8006562:	b911      	cbnz	r1, 800656a <sbrk_aligned+0x12>
 8006564:	f000 fe72 	bl	800724c <_sbrk_r>
 8006568:	6030      	str	r0, [r6, #0]
 800656a:	4621      	mov	r1, r4
 800656c:	4628      	mov	r0, r5
 800656e:	f000 fe6d 	bl	800724c <_sbrk_r>
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	d00a      	beq.n	800658c <sbrk_aligned+0x34>
 8006576:	1cc4      	adds	r4, r0, #3
 8006578:	f024 0403 	bic.w	r4, r4, #3
 800657c:	42a0      	cmp	r0, r4
 800657e:	d007      	beq.n	8006590 <sbrk_aligned+0x38>
 8006580:	1a21      	subs	r1, r4, r0
 8006582:	4628      	mov	r0, r5
 8006584:	f000 fe62 	bl	800724c <_sbrk_r>
 8006588:	3001      	adds	r0, #1
 800658a:	d101      	bne.n	8006590 <sbrk_aligned+0x38>
 800658c:	f04f 34ff 	mov.w	r4, #4294967295
 8006590:	4620      	mov	r0, r4
 8006592:	bd70      	pop	{r4, r5, r6, pc}
 8006594:	20004944 	.word	0x20004944

08006598 <_malloc_r>:
 8006598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800659c:	1ccd      	adds	r5, r1, #3
 800659e:	f025 0503 	bic.w	r5, r5, #3
 80065a2:	3508      	adds	r5, #8
 80065a4:	2d0c      	cmp	r5, #12
 80065a6:	bf38      	it	cc
 80065a8:	250c      	movcc	r5, #12
 80065aa:	2d00      	cmp	r5, #0
 80065ac:	4607      	mov	r7, r0
 80065ae:	db01      	blt.n	80065b4 <_malloc_r+0x1c>
 80065b0:	42a9      	cmp	r1, r5
 80065b2:	d905      	bls.n	80065c0 <_malloc_r+0x28>
 80065b4:	230c      	movs	r3, #12
 80065b6:	603b      	str	r3, [r7, #0]
 80065b8:	2600      	movs	r6, #0
 80065ba:	4630      	mov	r0, r6
 80065bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006694 <_malloc_r+0xfc>
 80065c4:	f000 f868 	bl	8006698 <__malloc_lock>
 80065c8:	f8d8 3000 	ldr.w	r3, [r8]
 80065cc:	461c      	mov	r4, r3
 80065ce:	bb5c      	cbnz	r4, 8006628 <_malloc_r+0x90>
 80065d0:	4629      	mov	r1, r5
 80065d2:	4638      	mov	r0, r7
 80065d4:	f7ff ffc0 	bl	8006558 <sbrk_aligned>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	4604      	mov	r4, r0
 80065dc:	d155      	bne.n	800668a <_malloc_r+0xf2>
 80065de:	f8d8 4000 	ldr.w	r4, [r8]
 80065e2:	4626      	mov	r6, r4
 80065e4:	2e00      	cmp	r6, #0
 80065e6:	d145      	bne.n	8006674 <_malloc_r+0xdc>
 80065e8:	2c00      	cmp	r4, #0
 80065ea:	d048      	beq.n	800667e <_malloc_r+0xe6>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	4631      	mov	r1, r6
 80065f0:	4638      	mov	r0, r7
 80065f2:	eb04 0903 	add.w	r9, r4, r3
 80065f6:	f000 fe29 	bl	800724c <_sbrk_r>
 80065fa:	4581      	cmp	r9, r0
 80065fc:	d13f      	bne.n	800667e <_malloc_r+0xe6>
 80065fe:	6821      	ldr	r1, [r4, #0]
 8006600:	1a6d      	subs	r5, r5, r1
 8006602:	4629      	mov	r1, r5
 8006604:	4638      	mov	r0, r7
 8006606:	f7ff ffa7 	bl	8006558 <sbrk_aligned>
 800660a:	3001      	adds	r0, #1
 800660c:	d037      	beq.n	800667e <_malloc_r+0xe6>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	442b      	add	r3, r5
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	f8d8 3000 	ldr.w	r3, [r8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d038      	beq.n	800668e <_malloc_r+0xf6>
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	42a2      	cmp	r2, r4
 8006620:	d12b      	bne.n	800667a <_malloc_r+0xe2>
 8006622:	2200      	movs	r2, #0
 8006624:	605a      	str	r2, [r3, #4]
 8006626:	e00f      	b.n	8006648 <_malloc_r+0xb0>
 8006628:	6822      	ldr	r2, [r4, #0]
 800662a:	1b52      	subs	r2, r2, r5
 800662c:	d41f      	bmi.n	800666e <_malloc_r+0xd6>
 800662e:	2a0b      	cmp	r2, #11
 8006630:	d917      	bls.n	8006662 <_malloc_r+0xca>
 8006632:	1961      	adds	r1, r4, r5
 8006634:	42a3      	cmp	r3, r4
 8006636:	6025      	str	r5, [r4, #0]
 8006638:	bf18      	it	ne
 800663a:	6059      	strne	r1, [r3, #4]
 800663c:	6863      	ldr	r3, [r4, #4]
 800663e:	bf08      	it	eq
 8006640:	f8c8 1000 	streq.w	r1, [r8]
 8006644:	5162      	str	r2, [r4, r5]
 8006646:	604b      	str	r3, [r1, #4]
 8006648:	4638      	mov	r0, r7
 800664a:	f104 060b 	add.w	r6, r4, #11
 800664e:	f000 f829 	bl	80066a4 <__malloc_unlock>
 8006652:	f026 0607 	bic.w	r6, r6, #7
 8006656:	1d23      	adds	r3, r4, #4
 8006658:	1af2      	subs	r2, r6, r3
 800665a:	d0ae      	beq.n	80065ba <_malloc_r+0x22>
 800665c:	1b9b      	subs	r3, r3, r6
 800665e:	50a3      	str	r3, [r4, r2]
 8006660:	e7ab      	b.n	80065ba <_malloc_r+0x22>
 8006662:	42a3      	cmp	r3, r4
 8006664:	6862      	ldr	r2, [r4, #4]
 8006666:	d1dd      	bne.n	8006624 <_malloc_r+0x8c>
 8006668:	f8c8 2000 	str.w	r2, [r8]
 800666c:	e7ec      	b.n	8006648 <_malloc_r+0xb0>
 800666e:	4623      	mov	r3, r4
 8006670:	6864      	ldr	r4, [r4, #4]
 8006672:	e7ac      	b.n	80065ce <_malloc_r+0x36>
 8006674:	4634      	mov	r4, r6
 8006676:	6876      	ldr	r6, [r6, #4]
 8006678:	e7b4      	b.n	80065e4 <_malloc_r+0x4c>
 800667a:	4613      	mov	r3, r2
 800667c:	e7cc      	b.n	8006618 <_malloc_r+0x80>
 800667e:	230c      	movs	r3, #12
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	4638      	mov	r0, r7
 8006684:	f000 f80e 	bl	80066a4 <__malloc_unlock>
 8006688:	e797      	b.n	80065ba <_malloc_r+0x22>
 800668a:	6025      	str	r5, [r4, #0]
 800668c:	e7dc      	b.n	8006648 <_malloc_r+0xb0>
 800668e:	605b      	str	r3, [r3, #4]
 8006690:	deff      	udf	#255	; 0xff
 8006692:	bf00      	nop
 8006694:	20004940 	.word	0x20004940

08006698 <__malloc_lock>:
 8006698:	4801      	ldr	r0, [pc, #4]	; (80066a0 <__malloc_lock+0x8>)
 800669a:	f7ff bef9 	b.w	8006490 <__retarget_lock_acquire_recursive>
 800669e:	bf00      	nop
 80066a0:	2000493c 	.word	0x2000493c

080066a4 <__malloc_unlock>:
 80066a4:	4801      	ldr	r0, [pc, #4]	; (80066ac <__malloc_unlock+0x8>)
 80066a6:	f7ff bef4 	b.w	8006492 <__retarget_lock_release_recursive>
 80066aa:	bf00      	nop
 80066ac:	2000493c 	.word	0x2000493c

080066b0 <__ssputs_r>:
 80066b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	688e      	ldr	r6, [r1, #8]
 80066b6:	461f      	mov	r7, r3
 80066b8:	42be      	cmp	r6, r7
 80066ba:	680b      	ldr	r3, [r1, #0]
 80066bc:	4682      	mov	sl, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	4690      	mov	r8, r2
 80066c2:	d82c      	bhi.n	800671e <__ssputs_r+0x6e>
 80066c4:	898a      	ldrh	r2, [r1, #12]
 80066c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066ca:	d026      	beq.n	800671a <__ssputs_r+0x6a>
 80066cc:	6965      	ldr	r5, [r4, #20]
 80066ce:	6909      	ldr	r1, [r1, #16]
 80066d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066d4:	eba3 0901 	sub.w	r9, r3, r1
 80066d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066dc:	1c7b      	adds	r3, r7, #1
 80066de:	444b      	add	r3, r9
 80066e0:	106d      	asrs	r5, r5, #1
 80066e2:	429d      	cmp	r5, r3
 80066e4:	bf38      	it	cc
 80066e6:	461d      	movcc	r5, r3
 80066e8:	0553      	lsls	r3, r2, #21
 80066ea:	d527      	bpl.n	800673c <__ssputs_r+0x8c>
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7ff ff53 	bl	8006598 <_malloc_r>
 80066f2:	4606      	mov	r6, r0
 80066f4:	b360      	cbz	r0, 8006750 <__ssputs_r+0xa0>
 80066f6:	6921      	ldr	r1, [r4, #16]
 80066f8:	464a      	mov	r2, r9
 80066fa:	f7ff fecb 	bl	8006494 <memcpy>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	6126      	str	r6, [r4, #16]
 800670c:	6165      	str	r5, [r4, #20]
 800670e:	444e      	add	r6, r9
 8006710:	eba5 0509 	sub.w	r5, r5, r9
 8006714:	6026      	str	r6, [r4, #0]
 8006716:	60a5      	str	r5, [r4, #8]
 8006718:	463e      	mov	r6, r7
 800671a:	42be      	cmp	r6, r7
 800671c:	d900      	bls.n	8006720 <__ssputs_r+0x70>
 800671e:	463e      	mov	r6, r7
 8006720:	6820      	ldr	r0, [r4, #0]
 8006722:	4632      	mov	r2, r6
 8006724:	4641      	mov	r1, r8
 8006726:	f000 fd33 	bl	8007190 <memmove>
 800672a:	68a3      	ldr	r3, [r4, #8]
 800672c:	1b9b      	subs	r3, r3, r6
 800672e:	60a3      	str	r3, [r4, #8]
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	4433      	add	r3, r6
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	2000      	movs	r0, #0
 8006738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673c:	462a      	mov	r2, r5
 800673e:	f000 fd95 	bl	800726c <_realloc_r>
 8006742:	4606      	mov	r6, r0
 8006744:	2800      	cmp	r0, #0
 8006746:	d1e0      	bne.n	800670a <__ssputs_r+0x5a>
 8006748:	6921      	ldr	r1, [r4, #16]
 800674a:	4650      	mov	r0, sl
 800674c:	f7ff feb8 	bl	80064c0 <_free_r>
 8006750:	230c      	movs	r3, #12
 8006752:	f8ca 3000 	str.w	r3, [sl]
 8006756:	89a3      	ldrh	r3, [r4, #12]
 8006758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800675c:	81a3      	strh	r3, [r4, #12]
 800675e:	f04f 30ff 	mov.w	r0, #4294967295
 8006762:	e7e9      	b.n	8006738 <__ssputs_r+0x88>

08006764 <_svfiprintf_r>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	4698      	mov	r8, r3
 800676a:	898b      	ldrh	r3, [r1, #12]
 800676c:	061b      	lsls	r3, r3, #24
 800676e:	b09d      	sub	sp, #116	; 0x74
 8006770:	4607      	mov	r7, r0
 8006772:	460d      	mov	r5, r1
 8006774:	4614      	mov	r4, r2
 8006776:	d50e      	bpl.n	8006796 <_svfiprintf_r+0x32>
 8006778:	690b      	ldr	r3, [r1, #16]
 800677a:	b963      	cbnz	r3, 8006796 <_svfiprintf_r+0x32>
 800677c:	2140      	movs	r1, #64	; 0x40
 800677e:	f7ff ff0b 	bl	8006598 <_malloc_r>
 8006782:	6028      	str	r0, [r5, #0]
 8006784:	6128      	str	r0, [r5, #16]
 8006786:	b920      	cbnz	r0, 8006792 <_svfiprintf_r+0x2e>
 8006788:	230c      	movs	r3, #12
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	e0d0      	b.n	8006934 <_svfiprintf_r+0x1d0>
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	616b      	str	r3, [r5, #20]
 8006796:	2300      	movs	r3, #0
 8006798:	9309      	str	r3, [sp, #36]	; 0x24
 800679a:	2320      	movs	r3, #32
 800679c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80067a4:	2330      	movs	r3, #48	; 0x30
 80067a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800694c <_svfiprintf_r+0x1e8>
 80067aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067ae:	f04f 0901 	mov.w	r9, #1
 80067b2:	4623      	mov	r3, r4
 80067b4:	469a      	mov	sl, r3
 80067b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067ba:	b10a      	cbz	r2, 80067c0 <_svfiprintf_r+0x5c>
 80067bc:	2a25      	cmp	r2, #37	; 0x25
 80067be:	d1f9      	bne.n	80067b4 <_svfiprintf_r+0x50>
 80067c0:	ebba 0b04 	subs.w	fp, sl, r4
 80067c4:	d00b      	beq.n	80067de <_svfiprintf_r+0x7a>
 80067c6:	465b      	mov	r3, fp
 80067c8:	4622      	mov	r2, r4
 80067ca:	4629      	mov	r1, r5
 80067cc:	4638      	mov	r0, r7
 80067ce:	f7ff ff6f 	bl	80066b0 <__ssputs_r>
 80067d2:	3001      	adds	r0, #1
 80067d4:	f000 80a9 	beq.w	800692a <_svfiprintf_r+0x1c6>
 80067d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067da:	445a      	add	r2, fp
 80067dc:	9209      	str	r2, [sp, #36]	; 0x24
 80067de:	f89a 3000 	ldrb.w	r3, [sl]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80a1 	beq.w	800692a <_svfiprintf_r+0x1c6>
 80067e8:	2300      	movs	r3, #0
 80067ea:	f04f 32ff 	mov.w	r2, #4294967295
 80067ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067f2:	f10a 0a01 	add.w	sl, sl, #1
 80067f6:	9304      	str	r3, [sp, #16]
 80067f8:	9307      	str	r3, [sp, #28]
 80067fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067fe:	931a      	str	r3, [sp, #104]	; 0x68
 8006800:	4654      	mov	r4, sl
 8006802:	2205      	movs	r2, #5
 8006804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006808:	4850      	ldr	r0, [pc, #320]	; (800694c <_svfiprintf_r+0x1e8>)
 800680a:	f7f9 fd09 	bl	8000220 <memchr>
 800680e:	9a04      	ldr	r2, [sp, #16]
 8006810:	b9d8      	cbnz	r0, 800684a <_svfiprintf_r+0xe6>
 8006812:	06d0      	lsls	r0, r2, #27
 8006814:	bf44      	itt	mi
 8006816:	2320      	movmi	r3, #32
 8006818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800681c:	0711      	lsls	r1, r2, #28
 800681e:	bf44      	itt	mi
 8006820:	232b      	movmi	r3, #43	; 0x2b
 8006822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006826:	f89a 3000 	ldrb.w	r3, [sl]
 800682a:	2b2a      	cmp	r3, #42	; 0x2a
 800682c:	d015      	beq.n	800685a <_svfiprintf_r+0xf6>
 800682e:	9a07      	ldr	r2, [sp, #28]
 8006830:	4654      	mov	r4, sl
 8006832:	2000      	movs	r0, #0
 8006834:	f04f 0c0a 	mov.w	ip, #10
 8006838:	4621      	mov	r1, r4
 800683a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800683e:	3b30      	subs	r3, #48	; 0x30
 8006840:	2b09      	cmp	r3, #9
 8006842:	d94d      	bls.n	80068e0 <_svfiprintf_r+0x17c>
 8006844:	b1b0      	cbz	r0, 8006874 <_svfiprintf_r+0x110>
 8006846:	9207      	str	r2, [sp, #28]
 8006848:	e014      	b.n	8006874 <_svfiprintf_r+0x110>
 800684a:	eba0 0308 	sub.w	r3, r0, r8
 800684e:	fa09 f303 	lsl.w	r3, r9, r3
 8006852:	4313      	orrs	r3, r2
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	46a2      	mov	sl, r4
 8006858:	e7d2      	b.n	8006800 <_svfiprintf_r+0x9c>
 800685a:	9b03      	ldr	r3, [sp, #12]
 800685c:	1d19      	adds	r1, r3, #4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	9103      	str	r1, [sp, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	bfbb      	ittet	lt
 8006866:	425b      	neglt	r3, r3
 8006868:	f042 0202 	orrlt.w	r2, r2, #2
 800686c:	9307      	strge	r3, [sp, #28]
 800686e:	9307      	strlt	r3, [sp, #28]
 8006870:	bfb8      	it	lt
 8006872:	9204      	strlt	r2, [sp, #16]
 8006874:	7823      	ldrb	r3, [r4, #0]
 8006876:	2b2e      	cmp	r3, #46	; 0x2e
 8006878:	d10c      	bne.n	8006894 <_svfiprintf_r+0x130>
 800687a:	7863      	ldrb	r3, [r4, #1]
 800687c:	2b2a      	cmp	r3, #42	; 0x2a
 800687e:	d134      	bne.n	80068ea <_svfiprintf_r+0x186>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	1d1a      	adds	r2, r3, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	9203      	str	r2, [sp, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	bfb8      	it	lt
 800688c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006890:	3402      	adds	r4, #2
 8006892:	9305      	str	r3, [sp, #20]
 8006894:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800695c <_svfiprintf_r+0x1f8>
 8006898:	7821      	ldrb	r1, [r4, #0]
 800689a:	2203      	movs	r2, #3
 800689c:	4650      	mov	r0, sl
 800689e:	f7f9 fcbf 	bl	8000220 <memchr>
 80068a2:	b138      	cbz	r0, 80068b4 <_svfiprintf_r+0x150>
 80068a4:	9b04      	ldr	r3, [sp, #16]
 80068a6:	eba0 000a 	sub.w	r0, r0, sl
 80068aa:	2240      	movs	r2, #64	; 0x40
 80068ac:	4082      	lsls	r2, r0
 80068ae:	4313      	orrs	r3, r2
 80068b0:	3401      	adds	r4, #1
 80068b2:	9304      	str	r3, [sp, #16]
 80068b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b8:	4825      	ldr	r0, [pc, #148]	; (8006950 <_svfiprintf_r+0x1ec>)
 80068ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068be:	2206      	movs	r2, #6
 80068c0:	f7f9 fcae 	bl	8000220 <memchr>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d038      	beq.n	800693a <_svfiprintf_r+0x1d6>
 80068c8:	4b22      	ldr	r3, [pc, #136]	; (8006954 <_svfiprintf_r+0x1f0>)
 80068ca:	bb1b      	cbnz	r3, 8006914 <_svfiprintf_r+0x1b0>
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	3307      	adds	r3, #7
 80068d0:	f023 0307 	bic.w	r3, r3, #7
 80068d4:	3308      	adds	r3, #8
 80068d6:	9303      	str	r3, [sp, #12]
 80068d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068da:	4433      	add	r3, r6
 80068dc:	9309      	str	r3, [sp, #36]	; 0x24
 80068de:	e768      	b.n	80067b2 <_svfiprintf_r+0x4e>
 80068e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068e4:	460c      	mov	r4, r1
 80068e6:	2001      	movs	r0, #1
 80068e8:	e7a6      	b.n	8006838 <_svfiprintf_r+0xd4>
 80068ea:	2300      	movs	r3, #0
 80068ec:	3401      	adds	r4, #1
 80068ee:	9305      	str	r3, [sp, #20]
 80068f0:	4619      	mov	r1, r3
 80068f2:	f04f 0c0a 	mov.w	ip, #10
 80068f6:	4620      	mov	r0, r4
 80068f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068fc:	3a30      	subs	r2, #48	; 0x30
 80068fe:	2a09      	cmp	r2, #9
 8006900:	d903      	bls.n	800690a <_svfiprintf_r+0x1a6>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0c6      	beq.n	8006894 <_svfiprintf_r+0x130>
 8006906:	9105      	str	r1, [sp, #20]
 8006908:	e7c4      	b.n	8006894 <_svfiprintf_r+0x130>
 800690a:	fb0c 2101 	mla	r1, ip, r1, r2
 800690e:	4604      	mov	r4, r0
 8006910:	2301      	movs	r3, #1
 8006912:	e7f0      	b.n	80068f6 <_svfiprintf_r+0x192>
 8006914:	ab03      	add	r3, sp, #12
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	462a      	mov	r2, r5
 800691a:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <_svfiprintf_r+0x1f4>)
 800691c:	a904      	add	r1, sp, #16
 800691e:	4638      	mov	r0, r7
 8006920:	f3af 8000 	nop.w
 8006924:	1c42      	adds	r2, r0, #1
 8006926:	4606      	mov	r6, r0
 8006928:	d1d6      	bne.n	80068d8 <_svfiprintf_r+0x174>
 800692a:	89ab      	ldrh	r3, [r5, #12]
 800692c:	065b      	lsls	r3, r3, #25
 800692e:	f53f af2d 	bmi.w	800678c <_svfiprintf_r+0x28>
 8006932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006934:	b01d      	add	sp, #116	; 0x74
 8006936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693a:	ab03      	add	r3, sp, #12
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	462a      	mov	r2, r5
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <_svfiprintf_r+0x1f4>)
 8006942:	a904      	add	r1, sp, #16
 8006944:	4638      	mov	r0, r7
 8006946:	f000 f9bd 	bl	8006cc4 <_printf_i>
 800694a:	e7eb      	b.n	8006924 <_svfiprintf_r+0x1c0>
 800694c:	08007578 	.word	0x08007578
 8006950:	08007582 	.word	0x08007582
 8006954:	00000000 	.word	0x00000000
 8006958:	080066b1 	.word	0x080066b1
 800695c:	0800757e 	.word	0x0800757e

08006960 <__sfputc_r>:
 8006960:	6893      	ldr	r3, [r2, #8]
 8006962:	3b01      	subs	r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	b410      	push	{r4}
 8006968:	6093      	str	r3, [r2, #8]
 800696a:	da08      	bge.n	800697e <__sfputc_r+0x1e>
 800696c:	6994      	ldr	r4, [r2, #24]
 800696e:	42a3      	cmp	r3, r4
 8006970:	db01      	blt.n	8006976 <__sfputc_r+0x16>
 8006972:	290a      	cmp	r1, #10
 8006974:	d103      	bne.n	800697e <__sfputc_r+0x1e>
 8006976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800697a:	f000 bb73 	b.w	8007064 <__swbuf_r>
 800697e:	6813      	ldr	r3, [r2, #0]
 8006980:	1c58      	adds	r0, r3, #1
 8006982:	6010      	str	r0, [r2, #0]
 8006984:	7019      	strb	r1, [r3, #0]
 8006986:	4608      	mov	r0, r1
 8006988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800698c:	4770      	bx	lr

0800698e <__sfputs_r>:
 800698e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006990:	4606      	mov	r6, r0
 8006992:	460f      	mov	r7, r1
 8006994:	4614      	mov	r4, r2
 8006996:	18d5      	adds	r5, r2, r3
 8006998:	42ac      	cmp	r4, r5
 800699a:	d101      	bne.n	80069a0 <__sfputs_r+0x12>
 800699c:	2000      	movs	r0, #0
 800699e:	e007      	b.n	80069b0 <__sfputs_r+0x22>
 80069a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a4:	463a      	mov	r2, r7
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff ffda 	bl	8006960 <__sfputc_r>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d1f3      	bne.n	8006998 <__sfputs_r+0xa>
 80069b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069b4 <_vfiprintf_r>:
 80069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b8:	460d      	mov	r5, r1
 80069ba:	b09d      	sub	sp, #116	; 0x74
 80069bc:	4614      	mov	r4, r2
 80069be:	4698      	mov	r8, r3
 80069c0:	4606      	mov	r6, r0
 80069c2:	b118      	cbz	r0, 80069cc <_vfiprintf_r+0x18>
 80069c4:	6a03      	ldr	r3, [r0, #32]
 80069c6:	b90b      	cbnz	r3, 80069cc <_vfiprintf_r+0x18>
 80069c8:	f7ff fbb4 	bl	8006134 <__sinit>
 80069cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ce:	07d9      	lsls	r1, r3, #31
 80069d0:	d405      	bmi.n	80069de <_vfiprintf_r+0x2a>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	059a      	lsls	r2, r3, #22
 80069d6:	d402      	bmi.n	80069de <_vfiprintf_r+0x2a>
 80069d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069da:	f7ff fd59 	bl	8006490 <__retarget_lock_acquire_recursive>
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	071b      	lsls	r3, r3, #28
 80069e2:	d501      	bpl.n	80069e8 <_vfiprintf_r+0x34>
 80069e4:	692b      	ldr	r3, [r5, #16]
 80069e6:	b99b      	cbnz	r3, 8006a10 <_vfiprintf_r+0x5c>
 80069e8:	4629      	mov	r1, r5
 80069ea:	4630      	mov	r0, r6
 80069ec:	f000 fb78 	bl	80070e0 <__swsetup_r>
 80069f0:	b170      	cbz	r0, 8006a10 <_vfiprintf_r+0x5c>
 80069f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f4:	07dc      	lsls	r4, r3, #31
 80069f6:	d504      	bpl.n	8006a02 <_vfiprintf_r+0x4e>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	b01d      	add	sp, #116	; 0x74
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	0598      	lsls	r0, r3, #22
 8006a06:	d4f7      	bmi.n	80069f8 <_vfiprintf_r+0x44>
 8006a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a0a:	f7ff fd42 	bl	8006492 <__retarget_lock_release_recursive>
 8006a0e:	e7f3      	b.n	80069f8 <_vfiprintf_r+0x44>
 8006a10:	2300      	movs	r3, #0
 8006a12:	9309      	str	r3, [sp, #36]	; 0x24
 8006a14:	2320      	movs	r3, #32
 8006a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a1e:	2330      	movs	r3, #48	; 0x30
 8006a20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006bd4 <_vfiprintf_r+0x220>
 8006a24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a28:	f04f 0901 	mov.w	r9, #1
 8006a2c:	4623      	mov	r3, r4
 8006a2e:	469a      	mov	sl, r3
 8006a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a34:	b10a      	cbz	r2, 8006a3a <_vfiprintf_r+0x86>
 8006a36:	2a25      	cmp	r2, #37	; 0x25
 8006a38:	d1f9      	bne.n	8006a2e <_vfiprintf_r+0x7a>
 8006a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a3e:	d00b      	beq.n	8006a58 <_vfiprintf_r+0xa4>
 8006a40:	465b      	mov	r3, fp
 8006a42:	4622      	mov	r2, r4
 8006a44:	4629      	mov	r1, r5
 8006a46:	4630      	mov	r0, r6
 8006a48:	f7ff ffa1 	bl	800698e <__sfputs_r>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	f000 80a9 	beq.w	8006ba4 <_vfiprintf_r+0x1f0>
 8006a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a54:	445a      	add	r2, fp
 8006a56:	9209      	str	r2, [sp, #36]	; 0x24
 8006a58:	f89a 3000 	ldrb.w	r3, [sl]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80a1 	beq.w	8006ba4 <_vfiprintf_r+0x1f0>
 8006a62:	2300      	movs	r3, #0
 8006a64:	f04f 32ff 	mov.w	r2, #4294967295
 8006a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a6c:	f10a 0a01 	add.w	sl, sl, #1
 8006a70:	9304      	str	r3, [sp, #16]
 8006a72:	9307      	str	r3, [sp, #28]
 8006a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a78:	931a      	str	r3, [sp, #104]	; 0x68
 8006a7a:	4654      	mov	r4, sl
 8006a7c:	2205      	movs	r2, #5
 8006a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a82:	4854      	ldr	r0, [pc, #336]	; (8006bd4 <_vfiprintf_r+0x220>)
 8006a84:	f7f9 fbcc 	bl	8000220 <memchr>
 8006a88:	9a04      	ldr	r2, [sp, #16]
 8006a8a:	b9d8      	cbnz	r0, 8006ac4 <_vfiprintf_r+0x110>
 8006a8c:	06d1      	lsls	r1, r2, #27
 8006a8e:	bf44      	itt	mi
 8006a90:	2320      	movmi	r3, #32
 8006a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a96:	0713      	lsls	r3, r2, #28
 8006a98:	bf44      	itt	mi
 8006a9a:	232b      	movmi	r3, #43	; 0x2b
 8006a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa6:	d015      	beq.n	8006ad4 <_vfiprintf_r+0x120>
 8006aa8:	9a07      	ldr	r2, [sp, #28]
 8006aaa:	4654      	mov	r4, sl
 8006aac:	2000      	movs	r0, #0
 8006aae:	f04f 0c0a 	mov.w	ip, #10
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ab8:	3b30      	subs	r3, #48	; 0x30
 8006aba:	2b09      	cmp	r3, #9
 8006abc:	d94d      	bls.n	8006b5a <_vfiprintf_r+0x1a6>
 8006abe:	b1b0      	cbz	r0, 8006aee <_vfiprintf_r+0x13a>
 8006ac0:	9207      	str	r2, [sp, #28]
 8006ac2:	e014      	b.n	8006aee <_vfiprintf_r+0x13a>
 8006ac4:	eba0 0308 	sub.w	r3, r0, r8
 8006ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8006acc:	4313      	orrs	r3, r2
 8006ace:	9304      	str	r3, [sp, #16]
 8006ad0:	46a2      	mov	sl, r4
 8006ad2:	e7d2      	b.n	8006a7a <_vfiprintf_r+0xc6>
 8006ad4:	9b03      	ldr	r3, [sp, #12]
 8006ad6:	1d19      	adds	r1, r3, #4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	9103      	str	r1, [sp, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bfbb      	ittet	lt
 8006ae0:	425b      	neglt	r3, r3
 8006ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ae6:	9307      	strge	r3, [sp, #28]
 8006ae8:	9307      	strlt	r3, [sp, #28]
 8006aea:	bfb8      	it	lt
 8006aec:	9204      	strlt	r2, [sp, #16]
 8006aee:	7823      	ldrb	r3, [r4, #0]
 8006af0:	2b2e      	cmp	r3, #46	; 0x2e
 8006af2:	d10c      	bne.n	8006b0e <_vfiprintf_r+0x15a>
 8006af4:	7863      	ldrb	r3, [r4, #1]
 8006af6:	2b2a      	cmp	r3, #42	; 0x2a
 8006af8:	d134      	bne.n	8006b64 <_vfiprintf_r+0x1b0>
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	1d1a      	adds	r2, r3, #4
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	9203      	str	r2, [sp, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	bfb8      	it	lt
 8006b06:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b0a:	3402      	adds	r4, #2
 8006b0c:	9305      	str	r3, [sp, #20]
 8006b0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006be4 <_vfiprintf_r+0x230>
 8006b12:	7821      	ldrb	r1, [r4, #0]
 8006b14:	2203      	movs	r2, #3
 8006b16:	4650      	mov	r0, sl
 8006b18:	f7f9 fb82 	bl	8000220 <memchr>
 8006b1c:	b138      	cbz	r0, 8006b2e <_vfiprintf_r+0x17a>
 8006b1e:	9b04      	ldr	r3, [sp, #16]
 8006b20:	eba0 000a 	sub.w	r0, r0, sl
 8006b24:	2240      	movs	r2, #64	; 0x40
 8006b26:	4082      	lsls	r2, r0
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	3401      	adds	r4, #1
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b32:	4829      	ldr	r0, [pc, #164]	; (8006bd8 <_vfiprintf_r+0x224>)
 8006b34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b38:	2206      	movs	r2, #6
 8006b3a:	f7f9 fb71 	bl	8000220 <memchr>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d03f      	beq.n	8006bc2 <_vfiprintf_r+0x20e>
 8006b42:	4b26      	ldr	r3, [pc, #152]	; (8006bdc <_vfiprintf_r+0x228>)
 8006b44:	bb1b      	cbnz	r3, 8006b8e <_vfiprintf_r+0x1da>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	3307      	adds	r3, #7
 8006b4a:	f023 0307 	bic.w	r3, r3, #7
 8006b4e:	3308      	adds	r3, #8
 8006b50:	9303      	str	r3, [sp, #12]
 8006b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b54:	443b      	add	r3, r7
 8006b56:	9309      	str	r3, [sp, #36]	; 0x24
 8006b58:	e768      	b.n	8006a2c <_vfiprintf_r+0x78>
 8006b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b5e:	460c      	mov	r4, r1
 8006b60:	2001      	movs	r0, #1
 8006b62:	e7a6      	b.n	8006ab2 <_vfiprintf_r+0xfe>
 8006b64:	2300      	movs	r3, #0
 8006b66:	3401      	adds	r4, #1
 8006b68:	9305      	str	r3, [sp, #20]
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	f04f 0c0a 	mov.w	ip, #10
 8006b70:	4620      	mov	r0, r4
 8006b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b76:	3a30      	subs	r2, #48	; 0x30
 8006b78:	2a09      	cmp	r2, #9
 8006b7a:	d903      	bls.n	8006b84 <_vfiprintf_r+0x1d0>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0c6      	beq.n	8006b0e <_vfiprintf_r+0x15a>
 8006b80:	9105      	str	r1, [sp, #20]
 8006b82:	e7c4      	b.n	8006b0e <_vfiprintf_r+0x15a>
 8006b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b88:	4604      	mov	r4, r0
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e7f0      	b.n	8006b70 <_vfiprintf_r+0x1bc>
 8006b8e:	ab03      	add	r3, sp, #12
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	462a      	mov	r2, r5
 8006b94:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <_vfiprintf_r+0x22c>)
 8006b96:	a904      	add	r1, sp, #16
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f3af 8000 	nop.w
 8006b9e:	4607      	mov	r7, r0
 8006ba0:	1c78      	adds	r0, r7, #1
 8006ba2:	d1d6      	bne.n	8006b52 <_vfiprintf_r+0x19e>
 8006ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ba6:	07d9      	lsls	r1, r3, #31
 8006ba8:	d405      	bmi.n	8006bb6 <_vfiprintf_r+0x202>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	059a      	lsls	r2, r3, #22
 8006bae:	d402      	bmi.n	8006bb6 <_vfiprintf_r+0x202>
 8006bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bb2:	f7ff fc6e 	bl	8006492 <__retarget_lock_release_recursive>
 8006bb6:	89ab      	ldrh	r3, [r5, #12]
 8006bb8:	065b      	lsls	r3, r3, #25
 8006bba:	f53f af1d 	bmi.w	80069f8 <_vfiprintf_r+0x44>
 8006bbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bc0:	e71c      	b.n	80069fc <_vfiprintf_r+0x48>
 8006bc2:	ab03      	add	r3, sp, #12
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	462a      	mov	r2, r5
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <_vfiprintf_r+0x22c>)
 8006bca:	a904      	add	r1, sp, #16
 8006bcc:	4630      	mov	r0, r6
 8006bce:	f000 f879 	bl	8006cc4 <_printf_i>
 8006bd2:	e7e4      	b.n	8006b9e <_vfiprintf_r+0x1ea>
 8006bd4:	08007578 	.word	0x08007578
 8006bd8:	08007582 	.word	0x08007582
 8006bdc:	00000000 	.word	0x00000000
 8006be0:	0800698f 	.word	0x0800698f
 8006be4:	0800757e 	.word	0x0800757e

08006be8 <_printf_common>:
 8006be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	4616      	mov	r6, r2
 8006bee:	4699      	mov	r9, r3
 8006bf0:	688a      	ldr	r2, [r1, #8]
 8006bf2:	690b      	ldr	r3, [r1, #16]
 8006bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	bfb8      	it	lt
 8006bfc:	4613      	movlt	r3, r2
 8006bfe:	6033      	str	r3, [r6, #0]
 8006c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c04:	4607      	mov	r7, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	b10a      	cbz	r2, 8006c0e <_printf_common+0x26>
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	6033      	str	r3, [r6, #0]
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	0699      	lsls	r1, r3, #26
 8006c12:	bf42      	ittt	mi
 8006c14:	6833      	ldrmi	r3, [r6, #0]
 8006c16:	3302      	addmi	r3, #2
 8006c18:	6033      	strmi	r3, [r6, #0]
 8006c1a:	6825      	ldr	r5, [r4, #0]
 8006c1c:	f015 0506 	ands.w	r5, r5, #6
 8006c20:	d106      	bne.n	8006c30 <_printf_common+0x48>
 8006c22:	f104 0a19 	add.w	sl, r4, #25
 8006c26:	68e3      	ldr	r3, [r4, #12]
 8006c28:	6832      	ldr	r2, [r6, #0]
 8006c2a:	1a9b      	subs	r3, r3, r2
 8006c2c:	42ab      	cmp	r3, r5
 8006c2e:	dc26      	bgt.n	8006c7e <_printf_common+0x96>
 8006c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c34:	1e13      	subs	r3, r2, #0
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	bf18      	it	ne
 8006c3a:	2301      	movne	r3, #1
 8006c3c:	0692      	lsls	r2, r2, #26
 8006c3e:	d42b      	bmi.n	8006c98 <_printf_common+0xb0>
 8006c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c44:	4649      	mov	r1, r9
 8006c46:	4638      	mov	r0, r7
 8006c48:	47c0      	blx	r8
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d01e      	beq.n	8006c8c <_printf_common+0xa4>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	6922      	ldr	r2, [r4, #16]
 8006c52:	f003 0306 	and.w	r3, r3, #6
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	bf02      	ittt	eq
 8006c5a:	68e5      	ldreq	r5, [r4, #12]
 8006c5c:	6833      	ldreq	r3, [r6, #0]
 8006c5e:	1aed      	subeq	r5, r5, r3
 8006c60:	68a3      	ldr	r3, [r4, #8]
 8006c62:	bf0c      	ite	eq
 8006c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c68:	2500      	movne	r5, #0
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	bfc4      	itt	gt
 8006c6e:	1a9b      	subgt	r3, r3, r2
 8006c70:	18ed      	addgt	r5, r5, r3
 8006c72:	2600      	movs	r6, #0
 8006c74:	341a      	adds	r4, #26
 8006c76:	42b5      	cmp	r5, r6
 8006c78:	d11a      	bne.n	8006cb0 <_printf_common+0xc8>
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	e008      	b.n	8006c90 <_printf_common+0xa8>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4652      	mov	r2, sl
 8006c82:	4649      	mov	r1, r9
 8006c84:	4638      	mov	r0, r7
 8006c86:	47c0      	blx	r8
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d103      	bne.n	8006c94 <_printf_common+0xac>
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	3501      	adds	r5, #1
 8006c96:	e7c6      	b.n	8006c26 <_printf_common+0x3e>
 8006c98:	18e1      	adds	r1, r4, r3
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	2030      	movs	r0, #48	; 0x30
 8006c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ca2:	4422      	add	r2, r4
 8006ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006cac:	3302      	adds	r3, #2
 8006cae:	e7c7      	b.n	8006c40 <_printf_common+0x58>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4622      	mov	r2, r4
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	47c0      	blx	r8
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d0e6      	beq.n	8006c8c <_printf_common+0xa4>
 8006cbe:	3601      	adds	r6, #1
 8006cc0:	e7d9      	b.n	8006c76 <_printf_common+0x8e>
	...

08006cc4 <_printf_i>:
 8006cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	7e0f      	ldrb	r7, [r1, #24]
 8006cca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ccc:	2f78      	cmp	r7, #120	; 0x78
 8006cce:	4691      	mov	r9, r2
 8006cd0:	4680      	mov	r8, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	469a      	mov	sl, r3
 8006cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cda:	d807      	bhi.n	8006cec <_printf_i+0x28>
 8006cdc:	2f62      	cmp	r7, #98	; 0x62
 8006cde:	d80a      	bhi.n	8006cf6 <_printf_i+0x32>
 8006ce0:	2f00      	cmp	r7, #0
 8006ce2:	f000 80d4 	beq.w	8006e8e <_printf_i+0x1ca>
 8006ce6:	2f58      	cmp	r7, #88	; 0x58
 8006ce8:	f000 80c0 	beq.w	8006e6c <_printf_i+0x1a8>
 8006cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cf4:	e03a      	b.n	8006d6c <_printf_i+0xa8>
 8006cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cfa:	2b15      	cmp	r3, #21
 8006cfc:	d8f6      	bhi.n	8006cec <_printf_i+0x28>
 8006cfe:	a101      	add	r1, pc, #4	; (adr r1, 8006d04 <_printf_i+0x40>)
 8006d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d04:	08006d5d 	.word	0x08006d5d
 8006d08:	08006d71 	.word	0x08006d71
 8006d0c:	08006ced 	.word	0x08006ced
 8006d10:	08006ced 	.word	0x08006ced
 8006d14:	08006ced 	.word	0x08006ced
 8006d18:	08006ced 	.word	0x08006ced
 8006d1c:	08006d71 	.word	0x08006d71
 8006d20:	08006ced 	.word	0x08006ced
 8006d24:	08006ced 	.word	0x08006ced
 8006d28:	08006ced 	.word	0x08006ced
 8006d2c:	08006ced 	.word	0x08006ced
 8006d30:	08006e75 	.word	0x08006e75
 8006d34:	08006d9d 	.word	0x08006d9d
 8006d38:	08006e2f 	.word	0x08006e2f
 8006d3c:	08006ced 	.word	0x08006ced
 8006d40:	08006ced 	.word	0x08006ced
 8006d44:	08006e97 	.word	0x08006e97
 8006d48:	08006ced 	.word	0x08006ced
 8006d4c:	08006d9d 	.word	0x08006d9d
 8006d50:	08006ced 	.word	0x08006ced
 8006d54:	08006ced 	.word	0x08006ced
 8006d58:	08006e37 	.word	0x08006e37
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	1d1a      	adds	r2, r3, #4
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	602a      	str	r2, [r5, #0]
 8006d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e09f      	b.n	8006eb0 <_printf_i+0x1ec>
 8006d70:	6820      	ldr	r0, [r4, #0]
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	0607      	lsls	r7, r0, #24
 8006d76:	f103 0104 	add.w	r1, r3, #4
 8006d7a:	6029      	str	r1, [r5, #0]
 8006d7c:	d501      	bpl.n	8006d82 <_printf_i+0xbe>
 8006d7e:	681e      	ldr	r6, [r3, #0]
 8006d80:	e003      	b.n	8006d8a <_printf_i+0xc6>
 8006d82:	0646      	lsls	r6, r0, #25
 8006d84:	d5fb      	bpl.n	8006d7e <_printf_i+0xba>
 8006d86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d8a:	2e00      	cmp	r6, #0
 8006d8c:	da03      	bge.n	8006d96 <_printf_i+0xd2>
 8006d8e:	232d      	movs	r3, #45	; 0x2d
 8006d90:	4276      	negs	r6, r6
 8006d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d96:	485a      	ldr	r0, [pc, #360]	; (8006f00 <_printf_i+0x23c>)
 8006d98:	230a      	movs	r3, #10
 8006d9a:	e012      	b.n	8006dc2 <_printf_i+0xfe>
 8006d9c:	682b      	ldr	r3, [r5, #0]
 8006d9e:	6820      	ldr	r0, [r4, #0]
 8006da0:	1d19      	adds	r1, r3, #4
 8006da2:	6029      	str	r1, [r5, #0]
 8006da4:	0605      	lsls	r5, r0, #24
 8006da6:	d501      	bpl.n	8006dac <_printf_i+0xe8>
 8006da8:	681e      	ldr	r6, [r3, #0]
 8006daa:	e002      	b.n	8006db2 <_printf_i+0xee>
 8006dac:	0641      	lsls	r1, r0, #25
 8006dae:	d5fb      	bpl.n	8006da8 <_printf_i+0xe4>
 8006db0:	881e      	ldrh	r6, [r3, #0]
 8006db2:	4853      	ldr	r0, [pc, #332]	; (8006f00 <_printf_i+0x23c>)
 8006db4:	2f6f      	cmp	r7, #111	; 0x6f
 8006db6:	bf0c      	ite	eq
 8006db8:	2308      	moveq	r3, #8
 8006dba:	230a      	movne	r3, #10
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006dc2:	6865      	ldr	r5, [r4, #4]
 8006dc4:	60a5      	str	r5, [r4, #8]
 8006dc6:	2d00      	cmp	r5, #0
 8006dc8:	bfa2      	ittt	ge
 8006dca:	6821      	ldrge	r1, [r4, #0]
 8006dcc:	f021 0104 	bicge.w	r1, r1, #4
 8006dd0:	6021      	strge	r1, [r4, #0]
 8006dd2:	b90e      	cbnz	r6, 8006dd8 <_printf_i+0x114>
 8006dd4:	2d00      	cmp	r5, #0
 8006dd6:	d04b      	beq.n	8006e70 <_printf_i+0x1ac>
 8006dd8:	4615      	mov	r5, r2
 8006dda:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dde:	fb03 6711 	mls	r7, r3, r1, r6
 8006de2:	5dc7      	ldrb	r7, [r0, r7]
 8006de4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006de8:	4637      	mov	r7, r6
 8006dea:	42bb      	cmp	r3, r7
 8006dec:	460e      	mov	r6, r1
 8006dee:	d9f4      	bls.n	8006dda <_printf_i+0x116>
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d10b      	bne.n	8006e0c <_printf_i+0x148>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	07de      	lsls	r6, r3, #31
 8006df8:	d508      	bpl.n	8006e0c <_printf_i+0x148>
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	6861      	ldr	r1, [r4, #4]
 8006dfe:	4299      	cmp	r1, r3
 8006e00:	bfde      	ittt	le
 8006e02:	2330      	movle	r3, #48	; 0x30
 8006e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e0c:	1b52      	subs	r2, r2, r5
 8006e0e:	6122      	str	r2, [r4, #16]
 8006e10:	f8cd a000 	str.w	sl, [sp]
 8006e14:	464b      	mov	r3, r9
 8006e16:	aa03      	add	r2, sp, #12
 8006e18:	4621      	mov	r1, r4
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	f7ff fee4 	bl	8006be8 <_printf_common>
 8006e20:	3001      	adds	r0, #1
 8006e22:	d14a      	bne.n	8006eba <_printf_i+0x1f6>
 8006e24:	f04f 30ff 	mov.w	r0, #4294967295
 8006e28:	b004      	add	sp, #16
 8006e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	f043 0320 	orr.w	r3, r3, #32
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	4833      	ldr	r0, [pc, #204]	; (8006f04 <_printf_i+0x240>)
 8006e38:	2778      	movs	r7, #120	; 0x78
 8006e3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	6829      	ldr	r1, [r5, #0]
 8006e42:	061f      	lsls	r7, r3, #24
 8006e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e48:	d402      	bmi.n	8006e50 <_printf_i+0x18c>
 8006e4a:	065f      	lsls	r7, r3, #25
 8006e4c:	bf48      	it	mi
 8006e4e:	b2b6      	uxthmi	r6, r6
 8006e50:	07df      	lsls	r7, r3, #31
 8006e52:	bf48      	it	mi
 8006e54:	f043 0320 	orrmi.w	r3, r3, #32
 8006e58:	6029      	str	r1, [r5, #0]
 8006e5a:	bf48      	it	mi
 8006e5c:	6023      	strmi	r3, [r4, #0]
 8006e5e:	b91e      	cbnz	r6, 8006e68 <_printf_i+0x1a4>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	f023 0320 	bic.w	r3, r3, #32
 8006e66:	6023      	str	r3, [r4, #0]
 8006e68:	2310      	movs	r3, #16
 8006e6a:	e7a7      	b.n	8006dbc <_printf_i+0xf8>
 8006e6c:	4824      	ldr	r0, [pc, #144]	; (8006f00 <_printf_i+0x23c>)
 8006e6e:	e7e4      	b.n	8006e3a <_printf_i+0x176>
 8006e70:	4615      	mov	r5, r2
 8006e72:	e7bd      	b.n	8006df0 <_printf_i+0x12c>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	6826      	ldr	r6, [r4, #0]
 8006e78:	6961      	ldr	r1, [r4, #20]
 8006e7a:	1d18      	adds	r0, r3, #4
 8006e7c:	6028      	str	r0, [r5, #0]
 8006e7e:	0635      	lsls	r5, r6, #24
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	d501      	bpl.n	8006e88 <_printf_i+0x1c4>
 8006e84:	6019      	str	r1, [r3, #0]
 8006e86:	e002      	b.n	8006e8e <_printf_i+0x1ca>
 8006e88:	0670      	lsls	r0, r6, #25
 8006e8a:	d5fb      	bpl.n	8006e84 <_printf_i+0x1c0>
 8006e8c:	8019      	strh	r1, [r3, #0]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6123      	str	r3, [r4, #16]
 8006e92:	4615      	mov	r5, r2
 8006e94:	e7bc      	b.n	8006e10 <_printf_i+0x14c>
 8006e96:	682b      	ldr	r3, [r5, #0]
 8006e98:	1d1a      	adds	r2, r3, #4
 8006e9a:	602a      	str	r2, [r5, #0]
 8006e9c:	681d      	ldr	r5, [r3, #0]
 8006e9e:	6862      	ldr	r2, [r4, #4]
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f7f9 f9bc 	bl	8000220 <memchr>
 8006ea8:	b108      	cbz	r0, 8006eae <_printf_i+0x1ea>
 8006eaa:	1b40      	subs	r0, r0, r5
 8006eac:	6060      	str	r0, [r4, #4]
 8006eae:	6863      	ldr	r3, [r4, #4]
 8006eb0:	6123      	str	r3, [r4, #16]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb8:	e7aa      	b.n	8006e10 <_printf_i+0x14c>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	462a      	mov	r2, r5
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	47d0      	blx	sl
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d0ad      	beq.n	8006e24 <_printf_i+0x160>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	079b      	lsls	r3, r3, #30
 8006ecc:	d413      	bmi.n	8006ef6 <_printf_i+0x232>
 8006ece:	68e0      	ldr	r0, [r4, #12]
 8006ed0:	9b03      	ldr	r3, [sp, #12]
 8006ed2:	4298      	cmp	r0, r3
 8006ed4:	bfb8      	it	lt
 8006ed6:	4618      	movlt	r0, r3
 8006ed8:	e7a6      	b.n	8006e28 <_printf_i+0x164>
 8006eda:	2301      	movs	r3, #1
 8006edc:	4632      	mov	r2, r6
 8006ede:	4649      	mov	r1, r9
 8006ee0:	4640      	mov	r0, r8
 8006ee2:	47d0      	blx	sl
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d09d      	beq.n	8006e24 <_printf_i+0x160>
 8006ee8:	3501      	adds	r5, #1
 8006eea:	68e3      	ldr	r3, [r4, #12]
 8006eec:	9903      	ldr	r1, [sp, #12]
 8006eee:	1a5b      	subs	r3, r3, r1
 8006ef0:	42ab      	cmp	r3, r5
 8006ef2:	dcf2      	bgt.n	8006eda <_printf_i+0x216>
 8006ef4:	e7eb      	b.n	8006ece <_printf_i+0x20a>
 8006ef6:	2500      	movs	r5, #0
 8006ef8:	f104 0619 	add.w	r6, r4, #25
 8006efc:	e7f5      	b.n	8006eea <_printf_i+0x226>
 8006efe:	bf00      	nop
 8006f00:	08007589 	.word	0x08007589
 8006f04:	0800759a 	.word	0x0800759a

08006f08 <__sflush_r>:
 8006f08:	898a      	ldrh	r2, [r1, #12]
 8006f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0e:	4605      	mov	r5, r0
 8006f10:	0710      	lsls	r0, r2, #28
 8006f12:	460c      	mov	r4, r1
 8006f14:	d458      	bmi.n	8006fc8 <__sflush_r+0xc0>
 8006f16:	684b      	ldr	r3, [r1, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dc05      	bgt.n	8006f28 <__sflush_r+0x20>
 8006f1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	dc02      	bgt.n	8006f28 <__sflush_r+0x20>
 8006f22:	2000      	movs	r0, #0
 8006f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f2a:	2e00      	cmp	r6, #0
 8006f2c:	d0f9      	beq.n	8006f22 <__sflush_r+0x1a>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f34:	682f      	ldr	r7, [r5, #0]
 8006f36:	6a21      	ldr	r1, [r4, #32]
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	d032      	beq.n	8006fa2 <__sflush_r+0x9a>
 8006f3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	075a      	lsls	r2, r3, #29
 8006f42:	d505      	bpl.n	8006f50 <__sflush_r+0x48>
 8006f44:	6863      	ldr	r3, [r4, #4]
 8006f46:	1ac0      	subs	r0, r0, r3
 8006f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f4a:	b10b      	cbz	r3, 8006f50 <__sflush_r+0x48>
 8006f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f4e:	1ac0      	subs	r0, r0, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	4602      	mov	r2, r0
 8006f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f56:	6a21      	ldr	r1, [r4, #32]
 8006f58:	4628      	mov	r0, r5
 8006f5a:	47b0      	blx	r6
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	d106      	bne.n	8006f70 <__sflush_r+0x68>
 8006f62:	6829      	ldr	r1, [r5, #0]
 8006f64:	291d      	cmp	r1, #29
 8006f66:	d82b      	bhi.n	8006fc0 <__sflush_r+0xb8>
 8006f68:	4a29      	ldr	r2, [pc, #164]	; (8007010 <__sflush_r+0x108>)
 8006f6a:	410a      	asrs	r2, r1
 8006f6c:	07d6      	lsls	r6, r2, #31
 8006f6e:	d427      	bmi.n	8006fc0 <__sflush_r+0xb8>
 8006f70:	2200      	movs	r2, #0
 8006f72:	6062      	str	r2, [r4, #4]
 8006f74:	04d9      	lsls	r1, r3, #19
 8006f76:	6922      	ldr	r2, [r4, #16]
 8006f78:	6022      	str	r2, [r4, #0]
 8006f7a:	d504      	bpl.n	8006f86 <__sflush_r+0x7e>
 8006f7c:	1c42      	adds	r2, r0, #1
 8006f7e:	d101      	bne.n	8006f84 <__sflush_r+0x7c>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b903      	cbnz	r3, 8006f86 <__sflush_r+0x7e>
 8006f84:	6560      	str	r0, [r4, #84]	; 0x54
 8006f86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f88:	602f      	str	r7, [r5, #0]
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	d0c9      	beq.n	8006f22 <__sflush_r+0x1a>
 8006f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f92:	4299      	cmp	r1, r3
 8006f94:	d002      	beq.n	8006f9c <__sflush_r+0x94>
 8006f96:	4628      	mov	r0, r5
 8006f98:	f7ff fa92 	bl	80064c0 <_free_r>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	6360      	str	r0, [r4, #52]	; 0x34
 8006fa0:	e7c0      	b.n	8006f24 <__sflush_r+0x1c>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	47b0      	blx	r6
 8006fa8:	1c41      	adds	r1, r0, #1
 8006faa:	d1c8      	bne.n	8006f3e <__sflush_r+0x36>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0c5      	beq.n	8006f3e <__sflush_r+0x36>
 8006fb2:	2b1d      	cmp	r3, #29
 8006fb4:	d001      	beq.n	8006fba <__sflush_r+0xb2>
 8006fb6:	2b16      	cmp	r3, #22
 8006fb8:	d101      	bne.n	8006fbe <__sflush_r+0xb6>
 8006fba:	602f      	str	r7, [r5, #0]
 8006fbc:	e7b1      	b.n	8006f22 <__sflush_r+0x1a>
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	e7ad      	b.n	8006f24 <__sflush_r+0x1c>
 8006fc8:	690f      	ldr	r7, [r1, #16]
 8006fca:	2f00      	cmp	r7, #0
 8006fcc:	d0a9      	beq.n	8006f22 <__sflush_r+0x1a>
 8006fce:	0793      	lsls	r3, r2, #30
 8006fd0:	680e      	ldr	r6, [r1, #0]
 8006fd2:	bf08      	it	eq
 8006fd4:	694b      	ldreq	r3, [r1, #20]
 8006fd6:	600f      	str	r7, [r1, #0]
 8006fd8:	bf18      	it	ne
 8006fda:	2300      	movne	r3, #0
 8006fdc:	eba6 0807 	sub.w	r8, r6, r7
 8006fe0:	608b      	str	r3, [r1, #8]
 8006fe2:	f1b8 0f00 	cmp.w	r8, #0
 8006fe6:	dd9c      	ble.n	8006f22 <__sflush_r+0x1a>
 8006fe8:	6a21      	ldr	r1, [r4, #32]
 8006fea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fec:	4643      	mov	r3, r8
 8006fee:	463a      	mov	r2, r7
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	47b0      	blx	r6
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	dc06      	bgt.n	8007006 <__sflush_r+0xfe>
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	f04f 30ff 	mov.w	r0, #4294967295
 8007004:	e78e      	b.n	8006f24 <__sflush_r+0x1c>
 8007006:	4407      	add	r7, r0
 8007008:	eba8 0800 	sub.w	r8, r8, r0
 800700c:	e7e9      	b.n	8006fe2 <__sflush_r+0xda>
 800700e:	bf00      	nop
 8007010:	dfbffffe 	.word	0xdfbffffe

08007014 <_fflush_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	690b      	ldr	r3, [r1, #16]
 8007018:	4605      	mov	r5, r0
 800701a:	460c      	mov	r4, r1
 800701c:	b913      	cbnz	r3, 8007024 <_fflush_r+0x10>
 800701e:	2500      	movs	r5, #0
 8007020:	4628      	mov	r0, r5
 8007022:	bd38      	pop	{r3, r4, r5, pc}
 8007024:	b118      	cbz	r0, 800702e <_fflush_r+0x1a>
 8007026:	6a03      	ldr	r3, [r0, #32]
 8007028:	b90b      	cbnz	r3, 800702e <_fflush_r+0x1a>
 800702a:	f7ff f883 	bl	8006134 <__sinit>
 800702e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f3      	beq.n	800701e <_fflush_r+0xa>
 8007036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007038:	07d0      	lsls	r0, r2, #31
 800703a:	d404      	bmi.n	8007046 <_fflush_r+0x32>
 800703c:	0599      	lsls	r1, r3, #22
 800703e:	d402      	bmi.n	8007046 <_fflush_r+0x32>
 8007040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007042:	f7ff fa25 	bl	8006490 <__retarget_lock_acquire_recursive>
 8007046:	4628      	mov	r0, r5
 8007048:	4621      	mov	r1, r4
 800704a:	f7ff ff5d 	bl	8006f08 <__sflush_r>
 800704e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007050:	07da      	lsls	r2, r3, #31
 8007052:	4605      	mov	r5, r0
 8007054:	d4e4      	bmi.n	8007020 <_fflush_r+0xc>
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	059b      	lsls	r3, r3, #22
 800705a:	d4e1      	bmi.n	8007020 <_fflush_r+0xc>
 800705c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800705e:	f7ff fa18 	bl	8006492 <__retarget_lock_release_recursive>
 8007062:	e7dd      	b.n	8007020 <_fflush_r+0xc>

08007064 <__swbuf_r>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	460e      	mov	r6, r1
 8007068:	4614      	mov	r4, r2
 800706a:	4605      	mov	r5, r0
 800706c:	b118      	cbz	r0, 8007076 <__swbuf_r+0x12>
 800706e:	6a03      	ldr	r3, [r0, #32]
 8007070:	b90b      	cbnz	r3, 8007076 <__swbuf_r+0x12>
 8007072:	f7ff f85f 	bl	8006134 <__sinit>
 8007076:	69a3      	ldr	r3, [r4, #24]
 8007078:	60a3      	str	r3, [r4, #8]
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	071a      	lsls	r2, r3, #28
 800707e:	d525      	bpl.n	80070cc <__swbuf_r+0x68>
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	b31b      	cbz	r3, 80070cc <__swbuf_r+0x68>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	6922      	ldr	r2, [r4, #16]
 8007088:	1a98      	subs	r0, r3, r2
 800708a:	6963      	ldr	r3, [r4, #20]
 800708c:	b2f6      	uxtb	r6, r6
 800708e:	4283      	cmp	r3, r0
 8007090:	4637      	mov	r7, r6
 8007092:	dc04      	bgt.n	800709e <__swbuf_r+0x3a>
 8007094:	4621      	mov	r1, r4
 8007096:	4628      	mov	r0, r5
 8007098:	f7ff ffbc 	bl	8007014 <_fflush_r>
 800709c:	b9e0      	cbnz	r0, 80070d8 <__swbuf_r+0x74>
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	60a3      	str	r3, [r4, #8]
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	6022      	str	r2, [r4, #0]
 80070aa:	701e      	strb	r6, [r3, #0]
 80070ac:	6962      	ldr	r2, [r4, #20]
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d004      	beq.n	80070be <__swbuf_r+0x5a>
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	07db      	lsls	r3, r3, #31
 80070b8:	d506      	bpl.n	80070c8 <__swbuf_r+0x64>
 80070ba:	2e0a      	cmp	r6, #10
 80070bc:	d104      	bne.n	80070c8 <__swbuf_r+0x64>
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f7ff ffa7 	bl	8007014 <_fflush_r>
 80070c6:	b938      	cbnz	r0, 80070d8 <__swbuf_r+0x74>
 80070c8:	4638      	mov	r0, r7
 80070ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070cc:	4621      	mov	r1, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 f806 	bl	80070e0 <__swsetup_r>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d0d5      	beq.n	8007084 <__swbuf_r+0x20>
 80070d8:	f04f 37ff 	mov.w	r7, #4294967295
 80070dc:	e7f4      	b.n	80070c8 <__swbuf_r+0x64>
	...

080070e0 <__swsetup_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4b2a      	ldr	r3, [pc, #168]	; (800718c <__swsetup_r+0xac>)
 80070e4:	4605      	mov	r5, r0
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	460c      	mov	r4, r1
 80070ea:	b118      	cbz	r0, 80070f4 <__swsetup_r+0x14>
 80070ec:	6a03      	ldr	r3, [r0, #32]
 80070ee:	b90b      	cbnz	r3, 80070f4 <__swsetup_r+0x14>
 80070f0:	f7ff f820 	bl	8006134 <__sinit>
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070fa:	0718      	lsls	r0, r3, #28
 80070fc:	d422      	bmi.n	8007144 <__swsetup_r+0x64>
 80070fe:	06d9      	lsls	r1, r3, #27
 8007100:	d407      	bmi.n	8007112 <__swsetup_r+0x32>
 8007102:	2309      	movs	r3, #9
 8007104:	602b      	str	r3, [r5, #0]
 8007106:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e034      	b.n	800717c <__swsetup_r+0x9c>
 8007112:	0758      	lsls	r0, r3, #29
 8007114:	d512      	bpl.n	800713c <__swsetup_r+0x5c>
 8007116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007118:	b141      	cbz	r1, 800712c <__swsetup_r+0x4c>
 800711a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711e:	4299      	cmp	r1, r3
 8007120:	d002      	beq.n	8007128 <__swsetup_r+0x48>
 8007122:	4628      	mov	r0, r5
 8007124:	f7ff f9cc 	bl	80064c0 <_free_r>
 8007128:	2300      	movs	r3, #0
 800712a:	6363      	str	r3, [r4, #52]	; 0x34
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007132:	81a3      	strh	r3, [r4, #12]
 8007134:	2300      	movs	r3, #0
 8007136:	6063      	str	r3, [r4, #4]
 8007138:	6923      	ldr	r3, [r4, #16]
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	f043 0308 	orr.w	r3, r3, #8
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	b94b      	cbnz	r3, 800715c <__swsetup_r+0x7c>
 8007148:	89a3      	ldrh	r3, [r4, #12]
 800714a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800714e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007152:	d003      	beq.n	800715c <__swsetup_r+0x7c>
 8007154:	4621      	mov	r1, r4
 8007156:	4628      	mov	r0, r5
 8007158:	f000 f8dd 	bl	8007316 <__smakebuf_r>
 800715c:	89a0      	ldrh	r0, [r4, #12]
 800715e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007162:	f010 0301 	ands.w	r3, r0, #1
 8007166:	d00a      	beq.n	800717e <__swsetup_r+0x9e>
 8007168:	2300      	movs	r3, #0
 800716a:	60a3      	str	r3, [r4, #8]
 800716c:	6963      	ldr	r3, [r4, #20]
 800716e:	425b      	negs	r3, r3
 8007170:	61a3      	str	r3, [r4, #24]
 8007172:	6923      	ldr	r3, [r4, #16]
 8007174:	b943      	cbnz	r3, 8007188 <__swsetup_r+0xa8>
 8007176:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800717a:	d1c4      	bne.n	8007106 <__swsetup_r+0x26>
 800717c:	bd38      	pop	{r3, r4, r5, pc}
 800717e:	0781      	lsls	r1, r0, #30
 8007180:	bf58      	it	pl
 8007182:	6963      	ldrpl	r3, [r4, #20]
 8007184:	60a3      	str	r3, [r4, #8]
 8007186:	e7f4      	b.n	8007172 <__swsetup_r+0x92>
 8007188:	2000      	movs	r0, #0
 800718a:	e7f7      	b.n	800717c <__swsetup_r+0x9c>
 800718c:	200000bc 	.word	0x200000bc

08007190 <memmove>:
 8007190:	4288      	cmp	r0, r1
 8007192:	b510      	push	{r4, lr}
 8007194:	eb01 0402 	add.w	r4, r1, r2
 8007198:	d902      	bls.n	80071a0 <memmove+0x10>
 800719a:	4284      	cmp	r4, r0
 800719c:	4623      	mov	r3, r4
 800719e:	d807      	bhi.n	80071b0 <memmove+0x20>
 80071a0:	1e43      	subs	r3, r0, #1
 80071a2:	42a1      	cmp	r1, r4
 80071a4:	d008      	beq.n	80071b8 <memmove+0x28>
 80071a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071ae:	e7f8      	b.n	80071a2 <memmove+0x12>
 80071b0:	4402      	add	r2, r0
 80071b2:	4601      	mov	r1, r0
 80071b4:	428a      	cmp	r2, r1
 80071b6:	d100      	bne.n	80071ba <memmove+0x2a>
 80071b8:	bd10      	pop	{r4, pc}
 80071ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071c2:	e7f7      	b.n	80071b4 <memmove+0x24>

080071c4 <_raise_r>:
 80071c4:	291f      	cmp	r1, #31
 80071c6:	b538      	push	{r3, r4, r5, lr}
 80071c8:	4604      	mov	r4, r0
 80071ca:	460d      	mov	r5, r1
 80071cc:	d904      	bls.n	80071d8 <_raise_r+0x14>
 80071ce:	2316      	movs	r3, #22
 80071d0:	6003      	str	r3, [r0, #0]
 80071d2:	f04f 30ff 	mov.w	r0, #4294967295
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80071da:	b112      	cbz	r2, 80071e2 <_raise_r+0x1e>
 80071dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071e0:	b94b      	cbnz	r3, 80071f6 <_raise_r+0x32>
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 f830 	bl	8007248 <_getpid_r>
 80071e8:	462a      	mov	r2, r5
 80071ea:	4601      	mov	r1, r0
 80071ec:	4620      	mov	r0, r4
 80071ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f2:	f000 b817 	b.w	8007224 <_kill_r>
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d00a      	beq.n	8007210 <_raise_r+0x4c>
 80071fa:	1c59      	adds	r1, r3, #1
 80071fc:	d103      	bne.n	8007206 <_raise_r+0x42>
 80071fe:	2316      	movs	r3, #22
 8007200:	6003      	str	r3, [r0, #0]
 8007202:	2001      	movs	r0, #1
 8007204:	e7e7      	b.n	80071d6 <_raise_r+0x12>
 8007206:	2400      	movs	r4, #0
 8007208:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800720c:	4628      	mov	r0, r5
 800720e:	4798      	blx	r3
 8007210:	2000      	movs	r0, #0
 8007212:	e7e0      	b.n	80071d6 <_raise_r+0x12>

08007214 <raise>:
 8007214:	4b02      	ldr	r3, [pc, #8]	; (8007220 <raise+0xc>)
 8007216:	4601      	mov	r1, r0
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	f7ff bfd3 	b.w	80071c4 <_raise_r>
 800721e:	bf00      	nop
 8007220:	200000bc 	.word	0x200000bc

08007224 <_kill_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d07      	ldr	r5, [pc, #28]	; (8007244 <_kill_r+0x20>)
 8007228:	2300      	movs	r3, #0
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	4611      	mov	r1, r2
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	f7f9 fc69 	bl	8000b08 <_kill>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	d102      	bne.n	8007240 <_kill_r+0x1c>
 800723a:	682b      	ldr	r3, [r5, #0]
 800723c:	b103      	cbz	r3, 8007240 <_kill_r+0x1c>
 800723e:	6023      	str	r3, [r4, #0]
 8007240:	bd38      	pop	{r3, r4, r5, pc}
 8007242:	bf00      	nop
 8007244:	20004938 	.word	0x20004938

08007248 <_getpid_r>:
 8007248:	f7f9 bc56 	b.w	8000af8 <_getpid>

0800724c <_sbrk_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d06      	ldr	r5, [pc, #24]	; (8007268 <_sbrk_r+0x1c>)
 8007250:	2300      	movs	r3, #0
 8007252:	4604      	mov	r4, r0
 8007254:	4608      	mov	r0, r1
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	f7f9 fcde 	bl	8000c18 <_sbrk>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_sbrk_r+0x1a>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_sbrk_r+0x1a>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	20004938 	.word	0x20004938

0800726c <_realloc_r>:
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	4680      	mov	r8, r0
 8007272:	4614      	mov	r4, r2
 8007274:	460e      	mov	r6, r1
 8007276:	b921      	cbnz	r1, 8007282 <_realloc_r+0x16>
 8007278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800727c:	4611      	mov	r1, r2
 800727e:	f7ff b98b 	b.w	8006598 <_malloc_r>
 8007282:	b92a      	cbnz	r2, 8007290 <_realloc_r+0x24>
 8007284:	f7ff f91c 	bl	80064c0 <_free_r>
 8007288:	4625      	mov	r5, r4
 800728a:	4628      	mov	r0, r5
 800728c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007290:	f000 f8a0 	bl	80073d4 <_malloc_usable_size_r>
 8007294:	4284      	cmp	r4, r0
 8007296:	4607      	mov	r7, r0
 8007298:	d802      	bhi.n	80072a0 <_realloc_r+0x34>
 800729a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800729e:	d812      	bhi.n	80072c6 <_realloc_r+0x5a>
 80072a0:	4621      	mov	r1, r4
 80072a2:	4640      	mov	r0, r8
 80072a4:	f7ff f978 	bl	8006598 <_malloc_r>
 80072a8:	4605      	mov	r5, r0
 80072aa:	2800      	cmp	r0, #0
 80072ac:	d0ed      	beq.n	800728a <_realloc_r+0x1e>
 80072ae:	42bc      	cmp	r4, r7
 80072b0:	4622      	mov	r2, r4
 80072b2:	4631      	mov	r1, r6
 80072b4:	bf28      	it	cs
 80072b6:	463a      	movcs	r2, r7
 80072b8:	f7ff f8ec 	bl	8006494 <memcpy>
 80072bc:	4631      	mov	r1, r6
 80072be:	4640      	mov	r0, r8
 80072c0:	f7ff f8fe 	bl	80064c0 <_free_r>
 80072c4:	e7e1      	b.n	800728a <_realloc_r+0x1e>
 80072c6:	4635      	mov	r5, r6
 80072c8:	e7df      	b.n	800728a <_realloc_r+0x1e>

080072ca <__swhatbuf_r>:
 80072ca:	b570      	push	{r4, r5, r6, lr}
 80072cc:	460c      	mov	r4, r1
 80072ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d2:	2900      	cmp	r1, #0
 80072d4:	b096      	sub	sp, #88	; 0x58
 80072d6:	4615      	mov	r5, r2
 80072d8:	461e      	mov	r6, r3
 80072da:	da0d      	bge.n	80072f8 <__swhatbuf_r+0x2e>
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80072e2:	f04f 0100 	mov.w	r1, #0
 80072e6:	bf0c      	ite	eq
 80072e8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80072ec:	2340      	movne	r3, #64	; 0x40
 80072ee:	2000      	movs	r0, #0
 80072f0:	6031      	str	r1, [r6, #0]
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	b016      	add	sp, #88	; 0x58
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	466a      	mov	r2, sp
 80072fa:	f000 f849 	bl	8007390 <_fstat_r>
 80072fe:	2800      	cmp	r0, #0
 8007300:	dbec      	blt.n	80072dc <__swhatbuf_r+0x12>
 8007302:	9901      	ldr	r1, [sp, #4]
 8007304:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007308:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800730c:	4259      	negs	r1, r3
 800730e:	4159      	adcs	r1, r3
 8007310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007314:	e7eb      	b.n	80072ee <__swhatbuf_r+0x24>

08007316 <__smakebuf_r>:
 8007316:	898b      	ldrh	r3, [r1, #12]
 8007318:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800731a:	079d      	lsls	r5, r3, #30
 800731c:	4606      	mov	r6, r0
 800731e:	460c      	mov	r4, r1
 8007320:	d507      	bpl.n	8007332 <__smakebuf_r+0x1c>
 8007322:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	6123      	str	r3, [r4, #16]
 800732a:	2301      	movs	r3, #1
 800732c:	6163      	str	r3, [r4, #20]
 800732e:	b002      	add	sp, #8
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	ab01      	add	r3, sp, #4
 8007334:	466a      	mov	r2, sp
 8007336:	f7ff ffc8 	bl	80072ca <__swhatbuf_r>
 800733a:	9900      	ldr	r1, [sp, #0]
 800733c:	4605      	mov	r5, r0
 800733e:	4630      	mov	r0, r6
 8007340:	f7ff f92a 	bl	8006598 <_malloc_r>
 8007344:	b948      	cbnz	r0, 800735a <__smakebuf_r+0x44>
 8007346:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800734a:	059a      	lsls	r2, r3, #22
 800734c:	d4ef      	bmi.n	800732e <__smakebuf_r+0x18>
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	f043 0302 	orr.w	r3, r3, #2
 8007356:	81a3      	strh	r3, [r4, #12]
 8007358:	e7e3      	b.n	8007322 <__smakebuf_r+0xc>
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	6020      	str	r0, [r4, #0]
 800735e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	9b00      	ldr	r3, [sp, #0]
 8007366:	6163      	str	r3, [r4, #20]
 8007368:	9b01      	ldr	r3, [sp, #4]
 800736a:	6120      	str	r0, [r4, #16]
 800736c:	b15b      	cbz	r3, 8007386 <__smakebuf_r+0x70>
 800736e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007372:	4630      	mov	r0, r6
 8007374:	f000 f81e 	bl	80073b4 <_isatty_r>
 8007378:	b128      	cbz	r0, 8007386 <__smakebuf_r+0x70>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f023 0303 	bic.w	r3, r3, #3
 8007380:	f043 0301 	orr.w	r3, r3, #1
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	431d      	orrs	r5, r3
 800738a:	81a5      	strh	r5, [r4, #12]
 800738c:	e7cf      	b.n	800732e <__smakebuf_r+0x18>
	...

08007390 <_fstat_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d07      	ldr	r5, [pc, #28]	; (80073b0 <_fstat_r+0x20>)
 8007394:	2300      	movs	r3, #0
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	4611      	mov	r1, r2
 800739c:	602b      	str	r3, [r5, #0]
 800739e:	f7f9 fc12 	bl	8000bc6 <_fstat>
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	d102      	bne.n	80073ac <_fstat_r+0x1c>
 80073a6:	682b      	ldr	r3, [r5, #0]
 80073a8:	b103      	cbz	r3, 80073ac <_fstat_r+0x1c>
 80073aa:	6023      	str	r3, [r4, #0]
 80073ac:	bd38      	pop	{r3, r4, r5, pc}
 80073ae:	bf00      	nop
 80073b0:	20004938 	.word	0x20004938

080073b4 <_isatty_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4d06      	ldr	r5, [pc, #24]	; (80073d0 <_isatty_r+0x1c>)
 80073b8:	2300      	movs	r3, #0
 80073ba:	4604      	mov	r4, r0
 80073bc:	4608      	mov	r0, r1
 80073be:	602b      	str	r3, [r5, #0]
 80073c0:	f7f9 fc11 	bl	8000be6 <_isatty>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d102      	bne.n	80073ce <_isatty_r+0x1a>
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	b103      	cbz	r3, 80073ce <_isatty_r+0x1a>
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	20004938 	.word	0x20004938

080073d4 <_malloc_usable_size_r>:
 80073d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d8:	1f18      	subs	r0, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfbc      	itt	lt
 80073de:	580b      	ldrlt	r3, [r1, r0]
 80073e0:	18c0      	addlt	r0, r0, r3
 80073e2:	4770      	bx	lr

080073e4 <_init>:
 80073e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e6:	bf00      	nop
 80073e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ea:	bc08      	pop	{r3}
 80073ec:	469e      	mov	lr, r3
 80073ee:	4770      	bx	lr

080073f0 <_fini>:
 80073f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f2:	bf00      	nop
 80073f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073f6:	bc08      	pop	{r3}
 80073f8:	469e      	mov	lr, r3
 80073fa:	4770      	bx	lr
